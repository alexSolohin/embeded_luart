
LUART_connect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000592c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005a68  08005a68  00015a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000004  08005cb8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000460  200001e4  08005e98  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000644  08005e98  00020644  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000171df  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002aa8  00000000  00000000  000373f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001a78  00000000  00000000  00039ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001940  00000000  00000000  0003b918  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022a02  00000000  00000000  0003d258  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010e51  00000000  00000000  0005fc5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000e1bb3  00000000  00000000  00070aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0015265e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000072f0  00000000  00000000  001526dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e4 	.word	0x200001e4
 8000158:	00000000 	.word	0x00000000
 800015c:	08005a50 	.word	0x08005a50

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e8 	.word	0x200001e8
 8000178:	08005a50 	.word	0x08005a50

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	4688      	mov	r8, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0803 	orr.w	r8, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f4:	fa1f fc85 	uxth.w	ip, r5
 80001f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000200:	fb07 f10c 	mul.w	r1, r7, ip
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800020e:	f080 811b 	bcs.w	8000448 <__udivmoddi4+0x28c>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8118 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000230:	45a4      	cmp	ip, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	192c      	adds	r4, r5, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023a:	f080 8107 	bcs.w	800044c <__udivmoddi4+0x290>
 800023e:	45a4      	cmp	ip, r4
 8000240:	f240 8104 	bls.w	800044c <__udivmoddi4+0x290>
 8000244:	3802      	subs	r0, #2
 8000246:	442c      	add	r4, r5
 8000248:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024c:	eba4 040c 	sub.w	r4, r4, ip
 8000250:	2700      	movs	r7, #0
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80eb 	beq.w	8000442 <__udivmoddi4+0x286>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d147      	bne.n	8000312 <__udivmoddi4+0x156>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fa 	bhi.w	8000480 <__udivmoddi4+0x2c4>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	1b49      	subs	r1, r1, r5
 80002b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b4:	fa1f f885 	uxth.w	r8, r5
 80002b8:	2701      	movs	r7, #1
 80002ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	fb08 f10c 	mul.w	r1, r8, ip
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002d0:	18eb      	adds	r3, r5, r3
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4299      	cmp	r1, r3
 80002da:	f200 80cd 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002de:	4684      	mov	ip, r0
 80002e0:	1a59      	subs	r1, r3, r1
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x14c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x14a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80b6 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e79f      	b.n	8000252 <__udivmoddi4+0x96>
 8000312:	f1c7 0c20 	rsb	ip, r7, #32
 8000316:	40bb      	lsls	r3, r7
 8000318:	fa22 fe0c 	lsr.w	lr, r2, ip
 800031c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000320:	fa01 f407 	lsl.w	r4, r1, r7
 8000324:	fa20 f50c 	lsr.w	r5, r0, ip
 8000328:	fa21 f30c 	lsr.w	r3, r1, ip
 800032c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000330:	4325      	orrs	r5, r4
 8000332:	fbb3 f9f8 	udiv	r9, r3, r8
 8000336:	0c2c      	lsrs	r4, r5, #16
 8000338:	fb08 3319 	mls	r3, r8, r9, r3
 800033c:	fa1f fa8e 	uxth.w	sl, lr
 8000340:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000344:	fb09 f40a 	mul.w	r4, r9, sl
 8000348:	429c      	cmp	r4, r3
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f107 	lsl.w	r1, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1e 0303 	adds.w	r3, lr, r3
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800035c:	f080 8087 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000360:	429c      	cmp	r4, r3
 8000362:	f240 8084 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4473      	add	r3, lr
 800036c:	1b1b      	subs	r3, r3, r4
 800036e:	b2ad      	uxth	r5, r5
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800037c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000380:	45a2      	cmp	sl, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1e 0404 	adds.w	r4, lr, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	d26b      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 800038e:	45a2      	cmp	sl, r4
 8000390:	d969      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000392:	3802      	subs	r0, #2
 8000394:	4474      	add	r4, lr
 8000396:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039a:	fba0 8902 	umull	r8, r9, r0, r2
 800039e:	eba4 040a 	sub.w	r4, r4, sl
 80003a2:	454c      	cmp	r4, r9
 80003a4:	46c2      	mov	sl, r8
 80003a6:	464b      	mov	r3, r9
 80003a8:	d354      	bcc.n	8000454 <__udivmoddi4+0x298>
 80003aa:	d051      	beq.n	8000450 <__udivmoddi4+0x294>
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d069      	beq.n	8000484 <__udivmoddi4+0x2c8>
 80003b0:	ebb1 050a 	subs.w	r5, r1, sl
 80003b4:	eb64 0403 	sbc.w	r4, r4, r3
 80003b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003bc:	40fd      	lsrs	r5, r7
 80003be:	40fc      	lsrs	r4, r7
 80003c0:	ea4c 0505 	orr.w	r5, ip, r5
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f703 	lsr.w	r7, r0, r3
 80003d4:	4095      	lsls	r5, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	fa21 f303 	lsr.w	r3, r1, r3
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	4338      	orrs	r0, r7
 80003e4:	0c01      	lsrs	r1, r0, #16
 80003e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ea:	fa1f f885 	uxth.w	r8, r5
 80003ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f6:	fb07 f308 	mul.w	r3, r7, r8
 80003fa:	428b      	cmp	r3, r1
 80003fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x256>
 8000402:	1869      	adds	r1, r5, r1
 8000404:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	428b      	cmp	r3, r1
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3f02      	subs	r7, #2
 8000410:	4429      	add	r1, r5
 8000412:	1acb      	subs	r3, r1, r3
 8000414:	b281      	uxth	r1, r0
 8000416:	fbb3 f0fe 	udiv	r0, r3, lr
 800041a:	fb0e 3310 	mls	r3, lr, r0, r3
 800041e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000422:	fb00 f308 	mul.w	r3, r0, r8
 8000426:	428b      	cmp	r3, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000430:	d217      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000432:	428b      	cmp	r3, r1
 8000434:	d915      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000440:	e73b      	b.n	80002ba <__udivmoddi4+0xfe>
 8000442:	4637      	mov	r7, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e709      	b.n	800025c <__udivmoddi4+0xa0>
 8000448:	4607      	mov	r7, r0
 800044a:	e6e7      	b.n	800021c <__udivmoddi4+0x60>
 800044c:	4618      	mov	r0, r3
 800044e:	e6fb      	b.n	8000248 <__udivmoddi4+0x8c>
 8000450:	4541      	cmp	r1, r8
 8000452:	d2ab      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000454:	ebb8 0a02 	subs.w	sl, r8, r2
 8000458:	eb69 020e 	sbc.w	r2, r9, lr
 800045c:	3801      	subs	r0, #1
 800045e:	4613      	mov	r3, r2
 8000460:	e7a4      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000462:	4660      	mov	r0, ip
 8000464:	e7e9      	b.n	800043a <__udivmoddi4+0x27e>
 8000466:	4618      	mov	r0, r3
 8000468:	e795      	b.n	8000396 <__udivmoddi4+0x1da>
 800046a:	4667      	mov	r7, ip
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	4681      	mov	r9, r0
 8000470:	e77c      	b.n	800036c <__udivmoddi4+0x1b0>
 8000472:	3802      	subs	r0, #2
 8000474:	442c      	add	r4, r5
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0x14c>
 8000478:	f1ac 0c02 	sub.w	ip, ip, #2
 800047c:	442b      	add	r3, r5
 800047e:	e72f      	b.n	80002e0 <__udivmoddi4+0x124>
 8000480:	4638      	mov	r0, r7
 8000482:	e708      	b.n	8000296 <__udivmoddi4+0xda>
 8000484:	4637      	mov	r7, r6
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0xa0>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800049c:	f023 0218 	bic.w	r2, r3, #24
 80004a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004dc:	68fb      	ldr	r3, [r7, #12]
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <cmd1_led>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void	cmd1_led(uint32_t ptr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	led_on = ptr;
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <cmd1_led+0x1c>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <cmd1_led+0x20>)
 80004fc:	f003 f950 	bl	80037a0 <HAL_TIM_Base_Start_IT>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	2000028c 	.word	0x2000028c
 800050c:	2000031c 	.word	0x2000031c

08000510 <cmd2_led>:

void	cmd2_led(uint32_t ptr)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim1);
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <cmd2_led+0x20>)
 800051a:	f003 f98f 	bl	800383c <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2123      	movs	r1, #35	; 0x23
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <cmd2_led+0x24>)
 8000524:	f001 f9d2 	bl	80018cc <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000031c 	.word	0x2000031c
 8000534:	48000400 	.word	0x48000400

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b08f      	sub	sp, #60	; 0x3c
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fd53 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f8b9 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 fa8d 	bl	8000a64 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800054a:	f000 f95d 	bl	8000808 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800054e:	f000 f9a9 	bl	80008a4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000552:	f000 fa5f 	bl	8000a14 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000556:	f000 f9f1 	bl	800093c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Transmit_IT(&hlpuart1, "Ok\n", strlen("Ok\n"));
  HAL_UART_Receive_IT(&hlpuart1, str, strlen(str) - 1);
 800055a:	4850      	ldr	r0, [pc, #320]	; (800069c <main+0x164>)
 800055c:	f7ff fe0e 	bl	800017c <strlen>
 8000560:	4603      	mov	r3, r0
 8000562:	b29b      	uxth	r3, r3
 8000564:	3b01      	subs	r3, #1
 8000566:	b29b      	uxth	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	494c      	ldr	r1, [pc, #304]	; (800069c <main+0x164>)
 800056c:	484c      	ldr	r0, [pc, #304]	; (80006a0 <main+0x168>)
 800056e:	f003 fedb 	bl	8004328 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char *str1;
  char *str2;
  const comand_node_t command_name[2] = {{"CMD1", cmd1_led}, {"CMD2", cmd2_led}};
 8000572:	4b4c      	ldr	r3, [pc, #304]	; (80006a4 <main+0x16c>)
 8000574:	1d3c      	adds	r4, r7, #4
 8000576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000578:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t ptr;
  char *str3;
  const comand_node_t *point;
  uint8_t flag;
  uint32_t next_byte = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t Rx_Num_of_Bytes;
  uint32_t Processed_Rx_Bytes = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
	  Rx_Num_of_Bytes = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 8000584:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <main+0x168>)
 8000586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800058a:	461a      	mov	r2, r3
 800058c:	4b44      	ldr	r3, [pc, #272]	; (80006a0 <main+0x168>)
 800058e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000592:	b29b      	uxth	r3, r3
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28

		  Processed_Rx_Bytes = Rx_Num_of_Bytes;
 8000598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
		  for (uint8_t idx = 0; idx < Processed_Rx_Bytes; idx++)
 800059c:	2300      	movs	r3, #0
 800059e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80005a2:	e074      	b.n	800068e <main+0x156>
		  {
			  if ((str1 = strstr(&str[idx], "CMD+")) != NULL)
 80005a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80005a8:	4a3c      	ldr	r2, [pc, #240]	; (800069c <main+0x164>)
 80005aa:	4413      	add	r3, r2
 80005ac:	493e      	ldr	r1, [pc, #248]	; (80006a8 <main+0x170>)
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 f980 	bl	80058b4 <strstr>
 80005b4:	6278      	str	r0, [r7, #36]	; 0x24
 80005b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d063      	beq.n	8000684 <main+0x14c>
			  {
				  if ((str2 = strstr(str1, "+END")) != NULL)
 80005bc:	493b      	ldr	r1, [pc, #236]	; (80006ac <main+0x174>)
 80005be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005c0:	f005 f978 	bl	80058b4 <strstr>
 80005c4:	6238      	str	r0, [r7, #32]
 80005c6:	6a3b      	ldr	r3, [r7, #32]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d05b      	beq.n	8000684 <main+0x14c>
				  {
					  *(str2) = '\0';
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
					  flag = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					  for (uint8_t i = 0; i < sizeof(command_name) / sizeof(command_name[0]); i++)
 80005d8:	2300      	movs	r3, #0
 80005da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80005de:	e02e      	b.n	800063e <main+0x106>
					  {
						  point = &command_name[i];
 80005e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005e4:	1d3a      	adds	r2, r7, #4
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	4413      	add	r3, r2
 80005ea:	61fb      	str	r3, [r7, #28]
						  if ((str3 = strstr(str1, point->name)) != NULL)
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005f4:	f005 f95e 	bl	80058b4 <strstr>
 80005f8:	61b8      	str	r0, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d019      	beq.n	8000634 <main+0xfc>
						  {
							  ptr = (uint32_t)atoi(str3 + strlen(point->name) + 1);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fdb9 	bl	800017c <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	3301      	adds	r3, #1
 800060e:	69ba      	ldr	r2, [r7, #24]
 8000610:	4413      	add	r3, r2
 8000612:	4618      	mov	r0, r3
 8000614:	f005 f91e 	bl	8005854 <atoi>
 8000618:	4603      	mov	r3, r0
 800061a:	617b      	str	r3, [r7, #20]
							  if (point->p_func != NULL)
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d003      	beq.n	800062c <main+0xf4>
							  {
								  point->p_func(ptr);
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	6978      	ldr	r0, [r7, #20]
 800062a:	4798      	blx	r3
							  }
							  flag = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							  break ;
 8000632:	e008      	b.n	8000646 <main+0x10e>
					  for (uint8_t i = 0; i < sizeof(command_name) / sizeof(command_name[0]); i++)
 8000634:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000638:	3301      	adds	r3, #1
 800063a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800063e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000642:	2b01      	cmp	r3, #1
 8000644:	d9cc      	bls.n	80005e0 <main+0xa8>
						  }
					  }
					  memset(str, 0x00, sizeof(str));
 8000646:	2264      	movs	r2, #100	; 0x64
 8000648:	2100      	movs	r1, #0
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <main+0x164>)
 800064c:	f005 f92a 	bl	80058a4 <memset>
					  HAL_UART_DeInit(&hlpuart1);
 8000650:	4813      	ldr	r0, [pc, #76]	; (80006a0 <main+0x168>)
 8000652:	f003 fdab 	bl	80041ac <HAL_UART_DeInit>
					  HAL_UART_Init(&hlpuart1);
 8000656:	4812      	ldr	r0, [pc, #72]	; (80006a0 <main+0x168>)
 8000658:	f003 fd58 	bl	800410c <HAL_UART_Init>
					  HAL_UART_Receive_IT(&hlpuart1, str, sizeof(str) - 1);
 800065c:	2263      	movs	r2, #99	; 0x63
 800065e:	490f      	ldr	r1, [pc, #60]	; (800069c <main+0x164>)
 8000660:	480f      	ldr	r0, [pc, #60]	; (80006a0 <main+0x168>)
 8000662:	f003 fe61 	bl	8004328 <HAL_UART_Receive_IT>
					  if (flag == 1)
 8000666:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800066a:	2b01      	cmp	r3, #1
 800066c:	d105      	bne.n	800067a <main+0x142>
					  {
						  HAL_UART_Transmit_IT(&hlpuart1, "Ok\n", strlen("Ok\n"));
 800066e:	2203      	movs	r2, #3
 8000670:	490f      	ldr	r1, [pc, #60]	; (80006b0 <main+0x178>)
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <main+0x168>)
 8000674:	f003 fdd4 	bl	8004220 <HAL_UART_Transmit_IT>
 8000678:	e004      	b.n	8000684 <main+0x14c>
					  }
					  else
					  {
						  HAL_UART_Transmit_IT(&hlpuart1, "No command\n", strlen("No command\n"));
 800067a:	220b      	movs	r2, #11
 800067c:	490d      	ldr	r1, [pc, #52]	; (80006b4 <main+0x17c>)
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <main+0x168>)
 8000680:	f003 fdce 	bl	8004220 <HAL_UART_Transmit_IT>
		  for (uint8_t idx = 0; idx < Processed_Rx_Bytes; idx++)
 8000684:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000688:	3301      	adds	r3, #1
 800068a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800068e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000694:	429a      	cmp	r2, r3
 8000696:	d885      	bhi.n	80005a4 <main+0x6c>
	  Rx_Num_of_Bytes = hlpuart1.RxXferSize - hlpuart1.RxXferCount;
 8000698:	e774      	b.n	8000584 <main+0x4c>
 800069a:	bf00      	nop
 800069c:	20000368 	.word	0x20000368
 80006a0:	20000200 	.word	0x20000200
 80006a4:	08005a98 	.word	0x08005a98
 80006a8:	08005a68 	.word	0x08005a68
 80006ac:	08005a70 	.word	0x08005a70
 80006b0:	08005a78 	.word	0x08005a78
 80006b4:	08005a7c 	.word	0x08005a7c

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0ae      	sub	sp, #184	; 0xb8
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006c2:	2248      	movs	r2, #72	; 0x48
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 f8ec 	bl	80058a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2250      	movs	r2, #80	; 0x50
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f005 f8dc 	bl	80058a4 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006fa:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80006fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	f023 0303 	bic.w	r3, r3, #3
 8000706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000710:	f001 f9f4 	bl	8001afc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff feb9 	bl	800048c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <SystemClock_Config+0x14c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000722:	4a38      	ldr	r2, [pc, #224]	; (8000804 <SystemClock_Config+0x14c>)
 8000724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000728:	6013      	str	r3, [r2, #0]
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <SystemClock_Config+0x14c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000736:	2327      	movs	r3, #39	; 0x27
 8000738:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000748:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2340      	movs	r3, #64	; 0x40
 8000752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800075c:	2360      	movs	r3, #96	; 0x60
 800075e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000762:	2300      	movs	r3, #0
 8000764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fd59 	bl	8002224 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000778:	f000 f9d4 	bl	8000b24 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800077c:	236f      	movs	r3, #111	; 0x6f
 800077e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000780:	2302      	movs	r3, #2
 8000782:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000798:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f8cc 	bl	800293c <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007aa:	f000 f9bb 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80007ae:	f242 1303 	movw	r3, #8451	; 0x2103
 80007b2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80007b4:	2318      	movs	r3, #24
 80007b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80007b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80007be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007c2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80007c4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007c8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80007ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007de:	2300      	movs	r3, #0
 80007e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fcf5 	bl	80031d8 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x140>
  {
    Error_Handler();
 80007f4:	f000 f996 	bl	8000b24 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007f8:	f002 fe63 	bl	80034c2 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007fc:	bf00      	nop
 80007fe:	37b8      	adds	r7, #184	; 0xb8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	58000400 	.word	0x58000400

08000808 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 800080e:	4a23      	ldr	r2, [pc, #140]	; (800089c <MX_LPUART1_UART_Init+0x94>)
 8000810:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <MX_LPUART1_UART_Init+0x98>)
 8000816:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 800082c:	220c      	movs	r2, #12
 800082e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000850:	f003 fc5c 	bl	800410c <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800085a:	f000 f963 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000862:	f004 feba 	bl	80055da <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800086c:	f000 f95a 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000874:	f004 feef 	bl	8005656 <HAL_UARTEx_SetRxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800087e:	f000 f951 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_LPUART1_UART_Init+0x90>)
 8000884:	f004 fe70 	bl	8005568 <HAL_UARTEx_DisableFifoMode>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800088e:	f000 f949 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000200 	.word	0x20000200
 800089c:	40008000 	.word	0x40008000
 80008a0:	00033324 	.word	0x00033324

080008a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_USART1_UART_Init+0x94>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <MX_USART1_UART_Init+0x90>)
 80008ee:	f003 fc0d 	bl	800410c <HAL_UART_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008f8:	f000 f914 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_USART1_UART_Init+0x90>)
 8000900:	f004 fe6b 	bl	80055da <HAL_UARTEx_SetTxFifoThreshold>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800090a:	f000 f90b 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <MX_USART1_UART_Init+0x90>)
 8000912:	f004 fea0 	bl	8005656 <HAL_UARTEx_SetRxFifoThreshold>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 f902 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_USART1_UART_Init+0x90>)
 8000922:	f004 fe21 	bl	8005568 <HAL_UARTEx_DisableFifoMode>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800092c:	f000 f8fa 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000290 	.word	0x20000290
 8000938:	40013800 	.word	0x40013800

0800093c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b094      	sub	sp, #80	; 0x50
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095c:	463b      	mov	r3, r7
 800095e:	2234      	movs	r2, #52	; 0x34
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f004 ff9e 	bl	80058a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_TIM1_Init+0xcc>)
 800096a:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <MX_TIM1_Init+0xd0>)
 800096c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_TIM1_Init+0xcc>)
 8000970:	f240 123f 	movw	r2, #319	; 0x13f
 8000974:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_TIM1_Init+0xcc>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = period;
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_TIM1_Init+0xd4>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <MX_TIM1_Init+0xcc>)
 8000982:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_TIM1_Init+0xcc>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_TIM1_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_TIM1_Init+0xcc>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000996:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_TIM1_Init+0xcc>)
 8000998:	f002 feaa 	bl	80036f0 <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80009a2:	f000 f8bf 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b0:	4619      	mov	r1, r3
 80009b2:	4815      	ldr	r0, [pc, #84]	; (8000a08 <MX_TIM1_Init+0xcc>)
 80009b4:	f003 f890 	bl	8003ad8 <HAL_TIM_ConfigClockSource>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 80009be:	f000 f8b1 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c2:	2300      	movs	r3, #0
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_TIM1_Init+0xcc>)
 80009d6:	f003 fa6b 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009e0:	f000 f8a0 	bl	8000b24 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_TIM1_Init+0xcc>)
 80009f2:	f003 fabd 	bl	8003f70 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009fc:	f000 f892 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3750      	adds	r7, #80	; 0x50
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000031c 	.word	0x2000031c
 8000a0c:	40012c00 	.word	0x40012c00
 8000a10:	20000004 	.word	0x20000004

08000a14 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a1a:	4a11      	ldr	r2, [pc, #68]	; (8000a60 <MX_USB_PCD_Init+0x4c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a20:	2208      	movs	r2, #8
 8000a22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a26:	2202      	movs	r2, #2
 8000a28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a3c:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_USB_PCD_Init+0x48>)
 8000a4a:	f000 ff71 	bl	8001930 <HAL_PCD_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a54:	f000 f866 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200003cc 	.word	0x200003cc
 8000a60:	40006800 	.word	0x40006800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f7ff fd1d 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2002      	movs	r0, #2
 8000a80:	f7ff fd1a 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff fd17 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	2008      	movs	r0, #8
 8000a8c:	f7ff fd14 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2123      	movs	r1, #35	; 0x23
 8000a94:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_GPIO_Init+0x84>)
 8000a96:	f000 ff19 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4810      	ldr	r0, [pc, #64]	; (8000aec <MX_GPIO_Init+0x88>)
 8000aac:	f000 fcc0 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ab0:	2323      	movs	r3, #35	; 0x23
 8000ab2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <MX_GPIO_Init+0x84>)
 8000ac6:	f000 fcb3 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000aca:	2303      	movs	r3, #3
 8000acc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_GPIO_Init+0x8c>)
 8000adc:	f000 fca8 	bl	8001430 <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	48000400 	.word	0x48000400
 8000aec:	48000800 	.word	0x48000800
 8000af0:	48000c00 	.word	0x48000c00

08000af4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_DeInit(&hlpuart1);
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <HAL_UART_RxCpltCallback+0x28>)
 8000afe:	f003 fb55 	bl	80041ac <HAL_UART_DeInit>
	HAL_UART_Init(&hlpuart1);
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <HAL_UART_RxCpltCallback+0x28>)
 8000b04:	f003 fb02 	bl	800410c <HAL_UART_Init>
	HAL_UART_Receive_IT(&hlpuart1, str, sizeof(str) - 1);
 8000b08:	2263      	movs	r2, #99	; 0x63
 8000b0a:	4905      	ldr	r1, [pc, #20]	; (8000b20 <HAL_UART_RxCpltCallback+0x2c>)
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <HAL_UART_RxCpltCallback+0x28>)
 8000b0e:	f003 fc0b 	bl	8004328 <HAL_UART_Receive_IT>
  UNUSED(hlpuart1);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000200 	.word	0x20000200
 8000b20:	20000368 	.word	0x20000368

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <Error_Handler+0x6>

08000b2c <LL_AHB2_GRP1_EnableClock>:
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b50:	68fb      	ldr	r3, [r7, #12]
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
}
 8000bb6:	bf00      	nop
 8000bb8:	3714      	adds	r7, #20
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <LL_APB1_GRP2_DisableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8000bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bd8:	4013      	ands	r3, r2
 8000bda:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
}
 8000c0e:	bf00      	nop
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c30:	4013      	ands	r3, r2
 8000c32:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <HAL_UART_MspInit+0xb0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d11e      	bne.n	8000cb0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c72:	2001      	movs	r0, #1
 8000c74:	f7ff ff8c 	bl	8000b90 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c78:	2004      	movs	r0, #4
 8000c7a:	f7ff ff57 	bl	8000b2c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	4619      	mov	r1, r3
 8000c98:	481a      	ldr	r0, [pc, #104]	; (8000d04 <HAL_UART_MspInit+0xb4>)
 8000c9a:	f000 fbc9 	bl	8001430 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2025      	movs	r0, #37	; 0x25
 8000ca4:	f000 fb23 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ca8:	2025      	movs	r0, #37	; 0x25
 8000caa:	f000 fb3a 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cae:	e023      	b.n	8000cf8 <HAL_UART_MspInit+0xa8>
  else if(huart->Instance==USART1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0xb8>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d11e      	bne.n	8000cf8 <HAL_UART_MspInit+0xa8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cbe:	f7ff ff93 	bl	8000be8 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f7ff ff32 	bl	8000b2c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cc8:	23c0      	movs	r3, #192	; 0xc0
 8000cca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <HAL_UART_MspInit+0xbc>)
 8000ce4:	f000 fba4 	bl	8001430 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2024      	movs	r0, #36	; 0x24
 8000cee:	f000 fafe 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf2:	2024      	movs	r0, #36	; 0x24
 8000cf4:	f000 fb15 	bl	8001322 <HAL_NVIC_EnableIRQ>
}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40008000 	.word	0x40008000
 8000d04:	48000800 	.word	0x48000800
 8000d08:	40013800 	.word	0x40013800
 8000d0c:	48000400 	.word	0x48000400

08000d10 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <HAL_UART_MspDeInit+0x50>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10a      	bne.n	8000d38 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff ff4d 	bl	8000bc2 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 8000d28:	2103      	movs	r1, #3
 8000d2a:	480e      	ldr	r0, [pc, #56]	; (8000d64 <HAL_UART_MspDeInit+0x54>)
 8000d2c:	f000 fcf0 	bl	8001710 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8000d30:	2025      	movs	r0, #37	; 0x25
 8000d32:	f000 fb04 	bl	800133e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000d36:	e00f      	b.n	8000d58 <HAL_UART_MspDeInit+0x48>
  else if(huart->Instance==USART1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_UART_MspDeInit+0x58>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d10a      	bne.n	8000d58 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART1_CLK_DISABLE();
 8000d42:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d46:	f7ff ff68 	bl	8000c1a <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOB, STLINK_RX_Pin|STLINK_TX_Pin);
 8000d4a:	21c0      	movs	r1, #192	; 0xc0
 8000d4c:	4807      	ldr	r0, [pc, #28]	; (8000d6c <HAL_UART_MspDeInit+0x5c>)
 8000d4e:	f000 fcdf 	bl	8001710 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000d52:	2024      	movs	r0, #36	; 0x24
 8000d54:	f000 faf3 	bl	800133e <HAL_NVIC_DisableIRQ>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40008000 	.word	0x40008000
 8000d64:	48000800 	.word	0x48000800
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	48000400 	.word	0x48000400

08000d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <HAL_TIM_Base_MspInit+0x34>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10b      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d86:	f7ff ff2f 	bl	8000be8 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2019      	movs	r0, #25
 8000d90:	f000 faad 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d94:	2019      	movs	r0, #25
 8000d96:	f000 fac4 	bl	8001322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40012c00 	.word	0x40012c00

08000da8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <HAL_PCD_MspInit+0x5c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d118      	bne.n	8000dfc <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff feae 	bl	8000b2c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dd0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000de2:	230a      	movs	r3, #10
 8000de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df0:	f000 fb1e 	bl	8001430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000df4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000df8:	f7ff feb1 	bl	8000b5e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40006800 	.word	0x40006800

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 f922 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if (led_on == 0)
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <TIM1_UP_TIM16_IRQHandler+0x3c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d104      	bne.n	8000e72 <TIM1_UP_TIM16_IRQHandler+0x16>
	{
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000e68:	2120      	movs	r1, #32
 8000e6a:	480c      	ldr	r0, [pc, #48]	; (8000e9c <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000e6c:	f000 fd46 	bl	80018fc <HAL_GPIO_TogglePin>
 8000e70:	e00c      	b.n	8000e8c <TIM1_UP_TIM16_IRQHandler+0x30>
	}
	else if (led_on == 1)
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <TIM1_UP_TIM16_IRQHandler+0x3c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d104      	bne.n	8000e84 <TIM1_UP_TIM16_IRQHandler+0x28>
	{
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000e7e:	f000 fd3d 	bl	80018fc <HAL_GPIO_TogglePin>
 8000e82:	e003      	b.n	8000e8c <TIM1_UP_TIM16_IRQHandler+0x30>
	}
	else
	{
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000e84:	2102      	movs	r1, #2
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000e88:	f000 fd38 	bl	80018fc <HAL_GPIO_TogglePin>
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <TIM1_UP_TIM16_IRQHandler+0x44>)
 8000e8e:	f002 fd04 	bl	800389a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000028c 	.word	0x2000028c
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	2000031c 	.word	0x2000031c

08000ea4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <USART1_IRQHandler+0x10>)
 8000eaa:	f003 fb15 	bl	80044d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000290 	.word	0x20000290

08000eb8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <LPUART1_IRQHandler+0x10>)
 8000ebe:	f003 fb0b 	bl	80044d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000200 	.word	0x20000200

08000ecc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <SystemInit+0xa0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000ed6:	4b25      	ldr	r3, [pc, #148]	; (8000f6c <SystemInit+0xa0>)
 8000ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000edc:	4a23      	ldr	r2, [pc, #140]	; (8000f6c <SystemInit+0xa0>)
 8000ede:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000efe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <SystemInit+0xa4>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f1c:	f023 0305 	bic.w	r3, r3, #5
 8000f20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f30:	f023 0301 	bic.w	r3, r3, #1
 8000f34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <SystemInit+0xa8>)
 8000f3e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <SystemInit+0xa8>)
 8000f46:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f56:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	faf6fefb 	.word	0xfaf6fefb
 8000f74:	22041000 	.word	0x22041000

08000f78 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f78:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7c:	3304      	adds	r3, #4

08000f7e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f80:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f82:	d3f9      	bcc.n	8000f78 <CopyDataInit>
  bx lr
 8000f84:	4770      	bx	lr

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f86:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f88:	3004      	adds	r0, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f8a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>
  bx lr
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000f92:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f94:	f7ff ff9a 	bl	8000ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <LoopForever+0x8>)
 8000f9a:	490c      	ldr	r1, [pc, #48]	; (8000fcc <LoopForever+0xc>)
 8000f9c:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <LoopForever+0x10>)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f7ff ffed 	bl	8000f7e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <LoopForever+0x14>)
 8000fa6:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <LoopForever+0x18>)
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f7ff ffee 	bl	8000f8a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <LoopForever+0x1c>)
 8000fb0:	490b      	ldr	r1, [pc, #44]	; (8000fe0 <LoopForever+0x20>)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f7ff ffe9 	bl	8000f8a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fb8:	f004 fc50 	bl	800585c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000fbc:	f7ff fabc 	bl	8000538 <main>

08000fc0 <LoopForever>:

LoopForever:
  b LoopForever
 8000fc0:	e7fe      	b.n	8000fc0 <LoopForever>
 8000fc2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000fc4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fc8:	20000004 	.word	0x20000004
 8000fcc:	200001e4 	.word	0x200001e4
 8000fd0:	08005cb8 	.word	0x08005cb8
  INIT_BSS _sbss, _ebss
 8000fd4:	200001e4 	.word	0x200001e4
 8000fd8:	20000644 	.word	0x20000644
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fdc:	20030000 	.word	0x20030000
 8000fe0:	20030000 	.word	0x20030000

08000fe4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_Init+0x3c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_Init+0x3c>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f96a 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f80f 	bl	8001028 <HAL_InitTick>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d002      	beq.n	8001016 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	e001      	b.n	800101a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001016:	f7ff fe13 	bl	8000c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101a:	79fb      	ldrb	r3, [r7, #7]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58004000 	.word	0x58004000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_InitTick+0x6c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d024      	beq.n	8001086 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800103c:	f001 fe28 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8001040:	4602      	mov	r2, r0
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_InitTick+0x6c>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f980 	bl	800135a <HAL_SYSTICK_Config>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10f      	bne.n	8001080 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d809      	bhi.n	800107a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001066:	2200      	movs	r2, #0
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800106e:	f000 f93e 	bl	80012ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_InitTick+0x70>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e007      	b.n	800108a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e004      	b.n	800108a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000010 	.word	0x20000010
 8001098:	2000000c 	.word	0x2000000c

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000010 	.word	0x20000010
 80010c0:	20000640 	.word	0x20000640

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000640 	.word	0x20000640

080010dc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTickPrio+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000000c 	.word	0x2000000c

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db10      	blt.n	80011c8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4909      	ldr	r1, [pc, #36]	; (80011d4 <__NVIC_DisableIRQ+0x40>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	3320      	adds	r3, #32
 80011bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011c4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff07 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012fc:	f7ff ff1e 	bl	800113c <__NVIC_GetPriorityGrouping>
 8001300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff ff90 	bl	800122c <NVIC_EncodePriority>
 800130c:	4602      	mov	r2, r0
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4611      	mov	r1, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff5f 	bl	80011d8 <__NVIC_SetPriority>
}
 800131a:	bf00      	nop
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff11 	bl	8001158 <__NVIC_EnableIRQ>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff21 	bl	8001194 <__NVIC_DisableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff96 	bl	8001294 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d005      	beq.n	8001396 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2204      	movs	r2, #4
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e047      	b.n	8001426 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 020e 	bic.w	r2, r2, #14
 80013a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0201 	bic.w	r2, r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f003 021c 	and.w	r2, r3, #28
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	2101      	movs	r1, #1
 80013d4:	fa01 f202 	lsl.w	r2, r1, r2
 80013d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00c      	beq.n	8001406 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001404:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	4798      	blx	r3
    }
  }
  return status;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e14c      	b.n	80016da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 813e 	beq.w	80016d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d00b      	beq.n	8001478 <HAL_GPIO_Init+0x48>
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d007      	beq.n	8001478 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146c:	2b11      	cmp	r3, #17
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b12      	cmp	r3, #18
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0xea>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b12      	cmp	r3, #18
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8098 	beq.w	80016d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015a4:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_GPIO_Init+0x2c8>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ce:	d019      	beq.n	8001604 <HAL_GPIO_Init+0x1d4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a4a      	ldr	r2, [pc, #296]	; (80016fc <HAL_GPIO_Init+0x2cc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d013      	beq.n	8001600 <HAL_GPIO_Init+0x1d0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a49      	ldr	r2, [pc, #292]	; (8001700 <HAL_GPIO_Init+0x2d0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00d      	beq.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a48      	ldr	r2, [pc, #288]	; (8001704 <HAL_GPIO_Init+0x2d4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d007      	beq.n	80015f8 <HAL_GPIO_Init+0x1c8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_GPIO_Init+0x2d8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_GPIO_Init+0x1c4>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e008      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015f4:	2307      	movs	r3, #7
 80015f6:	e006      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015f8:	2303      	movs	r3, #3
 80015fa:	e004      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 8001604:	2300      	movs	r3, #0
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001616:	4938      	ldr	r1, [pc, #224]	; (80016f8 <HAL_GPIO_Init+0x2c8>)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_GPIO_Init+0x2dc>)
 8001626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164a:	4a30      	ldr	r2, [pc, #192]	; (800170c <HAL_GPIO_Init+0x2dc>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001652:	4b2e      	ldr	r3, [pc, #184]	; (800170c <HAL_GPIO_Init+0x2dc>)
 8001654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001678:	4a24      	ldr	r2, [pc, #144]	; (800170c <HAL_GPIO_Init+0x2dc>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_GPIO_Init+0x2dc>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_GPIO_Init+0x2dc>)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_GPIO_Init+0x2dc>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_GPIO_Init+0x2dc>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f aeab 	bne.w	8001440 <HAL_GPIO_Init+0x10>
  }
}
 80016ea:	bf00      	nop
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40010000 	.word	0x40010000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800
 8001704:	48000c00 	.word	0x48000c00
 8001708:	48001000 	.word	0x48001000
 800170c:	58000800 	.word	0x58000800

08001710 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800171e:	e0bb      	b.n	8001898 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001720:	2201      	movs	r2, #1
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80ae 	beq.w	8001892 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001736:	4a5f      	ldr	r2, [pc, #380]	; (80018b4 <HAL_GPIO_DeInit+0x1a4>)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3302      	adds	r3, #2
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800175e:	d019      	beq.n	8001794 <HAL_GPIO_DeInit+0x84>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a55      	ldr	r2, [pc, #340]	; (80018b8 <HAL_GPIO_DeInit+0x1a8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d013      	beq.n	8001790 <HAL_GPIO_DeInit+0x80>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a54      	ldr	r2, [pc, #336]	; (80018bc <HAL_GPIO_DeInit+0x1ac>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_DeInit+0x7c>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a53      	ldr	r2, [pc, #332]	; (80018c0 <HAL_GPIO_DeInit+0x1b0>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_DeInit+0x78>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a52      	ldr	r2, [pc, #328]	; (80018c4 <HAL_GPIO_DeInit+0x1b4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_DeInit+0x74>
 8001780:	2304      	movs	r3, #4
 8001782:	e008      	b.n	8001796 <HAL_GPIO_DeInit+0x86>
 8001784:	2307      	movs	r3, #7
 8001786:	e006      	b.n	8001796 <HAL_GPIO_DeInit+0x86>
 8001788:	2303      	movs	r3, #3
 800178a:	e004      	b.n	8001796 <HAL_GPIO_DeInit+0x86>
 800178c:	2302      	movs	r3, #2
 800178e:	e002      	b.n	8001796 <HAL_GPIO_DeInit+0x86>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <HAL_GPIO_DeInit+0x86>
 8001794:	2300      	movs	r3, #0
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	f002 0203 	and.w	r2, r2, #3
 800179c:	0092      	lsls	r2, r2, #2
 800179e:	4093      	lsls	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d136      	bne.n	8001814 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80017a6:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_GPIO_DeInit+0x1b8>)
 80017a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	4945      	ldr	r1, [pc, #276]	; (80018c8 <HAL_GPIO_DeInit+0x1b8>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <HAL_GPIO_DeInit+0x1b8>)
 80017ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4941      	ldr	r1, [pc, #260]	; (80018c8 <HAL_GPIO_DeInit+0x1b8>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_GPIO_DeInit+0x1b8>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	493d      	ldr	r1, [pc, #244]	; (80018c8 <HAL_GPIO_DeInit+0x1b8>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80017d8:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_GPIO_DeInit+0x1b8>)
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	4939      	ldr	r1, [pc, #228]	; (80018c8 <HAL_GPIO_DeInit+0x1b8>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80017f6:	4a2f      	ldr	r2, [pc, #188]	; (80018b4 <HAL_GPIO_DeInit+0x1a4>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	43da      	mvns	r2, r3
 8001806:	482b      	ldr	r0, [pc, #172]	; (80018b4 <HAL_GPIO_DeInit+0x1a4>)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	400a      	ands	r2, r1
 800180e:	3302      	adds	r3, #2
 8001810:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2103      	movs	r1, #3
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	08d2      	lsrs	r2, r2, #3
 8001848:	4019      	ands	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2103      	movs	r1, #3
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	2101      	movs	r1, #1
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	401a      	ands	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2103      	movs	r1, #3
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	401a      	ands	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
    }
    
    position++;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3301      	adds	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f af3d 	bne.w	8001720 <HAL_GPIO_DeInit+0x10>
  }
}
 80018a6:	bf00      	nop
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40010000 	.word	0x40010000
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000800 	.word	0x48000800
 80018c0:	48000c00 	.word	0x48000c00
 80018c4:	48001000 	.word	0x48001000
 80018c8:	58000800 	.word	0x58000800

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4013      	ands	r3, r2
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43d9      	mvns	r1, r3
 800191a:	887b      	ldrh	r3, [r7, #2]
 800191c:	400b      	ands	r3, r1
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001932:	b08b      	sub	sp, #44	; 0x2c
 8001934:	af06      	add	r7, sp, #24
 8001936:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e0ad      	b.n	8001a9e <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fa26 	bl	8000da8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2203      	movs	r2, #3
 8001960:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 ff34 	bl	80057d6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e035      	b.n	80019e0 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	015b      	lsls	r3, r3, #5
 800197a:	4413      	add	r3, r2
 800197c:	3329      	adds	r3, #41	; 0x29
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	015b      	lsls	r3, r3, #5
 8001988:	4413      	add	r3, r2
 800198a:	3328      	adds	r3, #40	; 0x28
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	b291      	uxth	r1, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	015b      	lsls	r3, r3, #5
 800199a:	4413      	add	r3, r2
 800199c:	3336      	adds	r3, #54	; 0x36
 800199e:	460a      	mov	r2, r1
 80019a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	015b      	lsls	r3, r3, #5
 80019a8:	4413      	add	r3, r2
 80019aa:	332b      	adds	r3, #43	; 0x2b
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019b0:	7bfb      	ldrb	r3, [r7, #15]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	015b      	lsls	r3, r3, #5
 80019b6:	4413      	add	r3, r2
 80019b8:	3338      	adds	r3, #56	; 0x38
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	015b      	lsls	r3, r3, #5
 80019c4:	4413      	add	r3, r2
 80019c6:	333c      	adds	r3, #60	; 0x3c
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	3302      	adds	r3, #2
 80019d2:	015b      	lsls	r3, r3, #5
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	3301      	adds	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d3c4      	bcc.n	8001974 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	e031      	b.n	8001a54 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	015b      	lsls	r3, r3, #5
 80019f6:	4413      	add	r3, r2
 80019f8:	f203 1329 	addw	r3, r3, #297	; 0x129
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a0c:	7bfa      	ldrb	r2, [r7, #15]
 8001a0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	015b      	lsls	r3, r3, #5
 8001a16:	4413      	add	r3, r2
 8001a18:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	015b      	lsls	r3, r3, #5
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	015b      	lsls	r3, r3, #5
 8001a36:	4413      	add	r3, r2
 8001a38:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	330a      	adds	r3, #10
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	4413      	add	r3, r2
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	3301      	adds	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3c8      	bcc.n	80019f0 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	687e      	ldr	r6, [r7, #4]
 8001a66:	466d      	mov	r5, sp
 8001a68:	f106 0410 	add.w	r4, r6, #16
 8001a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	602b      	str	r3, [r5, #0]
 8001a74:	1d33      	adds	r3, r6, #4
 8001a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f003 fec7 	bl	800580c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d102      	bne.n	8001a9c <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f805 	bl	8001aa6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	58000400 	.word	0x58000400

08001b1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	58000400 	.word	0x58000400

08001b38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b4a:	d101      	bne.n	8001b50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_RCC_HSE_Enable>:
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_HSE_Disable>:
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_RCC_HSE_IsReady>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001baa:	d101      	bne.n	8001bb0 <LL_RCC_HSE_IsReady+0x18>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <LL_RCC_HSE_IsReady+0x1a>
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_RCC_HSI_Enable>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_RCC_HSI_Disable>:
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bec:	6013      	str	r3, [r2, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_RCC_HSI_IsReady>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0a:	d101      	bne.n	8001c10 <LL_RCC_HSI_IsReady+0x18>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <LL_RCC_HSI_IsReady+0x1a>
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_HSI_SetCalibTrimming>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_HSI48_Enable>:
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_RCC_HSI48_Disable>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_RCC_HSI48_IsReady>:
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d101      	bne.n	8001ca2 <LL_RCC_HSI48_IsReady+0x18>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <LL_RCC_HSI48_IsReady+0x1a>
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_RCC_LSE_Enable>:
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_RCC_LSE_Disable>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_LSE_EnableBypass>:
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_RCC_LSE_DisableBypass>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d101      	bne.n	8001d4e <LL_RCC_LSE_IsReady+0x18>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <LL_RCC_LSE_IsReady+0x1a>
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d101      	bne.n	8001db6 <LL_RCC_LSI1_IsReady+0x18>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_RCC_LSI1_IsReady+0x1a>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d101      	bne.n	8001e1e <LL_RCC_LSI2_IsReady+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_RCC_LSI2_IsReady+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6013      	str	r3, [r2, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d101      	bne.n	8001eaa <LL_RCC_MSI_IsReady+0x16>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <LL_RCC_MSI_IsReady+0x18>
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2bb0      	cmp	r3, #176	; 0xb0
 8001ef4:	d901      	bls.n	8001efa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001ef6:	23b0      	movs	r3, #176	; 0xb0
 8001ef8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 0203 	bic.w	r2, r3, #3
 8001f44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001faa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fd6:	f023 020f 	bic.w	r2, r3, #15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800206e:	4618      	mov	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d8:	6013      	str	r3, [r2, #0]
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80020e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020f6:	d101      	bne.n	80020fc <LL_RCC_PLL_IsReady+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_RCC_PLL_IsReady+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002126:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0303 	and.w	r3, r3, #3
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217c:	d101      	bne.n	8002182 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021a2:	d101      	bne.n	80021a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80021b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d101      	bne.n	80021ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ec:	d101      	bne.n	80021f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002210:	d101      	bne.n	8002216 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b08d      	sub	sp, #52	; 0x34
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e37e      	b.n	8002934 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8092 	beq.w	8002368 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002244:	f7ff fe89 	bl	8001f5a <LL_RCC_GetSysClkSource>
 8002248:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224a:	f7ff ff82 	bl	8002152 <LL_RCC_PLL_GetMainSource>
 800224e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x3e>
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d14c      	bne.n	80022f6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	2b01      	cmp	r3, #1
 8002260:	d149      	bne.n	80022f6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002262:	f7ff fe17 	bl	8001e94 <LL_RCC_MSI_IsReady>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_OscConfig+0x54>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e35d      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800227c:	f7ff fe2f 	bl	8001ede <LL_RCC_MSI_GetRange>
 8002280:	4603      	mov	r3, r0
 8002282:	429c      	cmp	r4, r3
 8002284:	d914      	bls.n	80022b0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fd40 	bl	8002d10 <RCC_SetFlashLatencyFromMSIRange>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e34c      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fe09 	bl	8001eb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fe2d 	bl	8001f08 <LL_RCC_MSI_SetCalibTrimming>
 80022ae:	e013      	b.n	80022d8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fdfe 	bl	8001eb6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fe22 	bl	8001f08 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fd21 	bl	8002d10 <RCC_SetFlashLatencyFromMSIRange>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e32d      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022d8:	f000 fcda 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4bb3      	ldr	r3, [pc, #716]	; (80025ac <HAL_RCC_OscConfig+0x388>)
 80022e0:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022e2:	4bb3      	ldr	r3, [pc, #716]	; (80025b0 <HAL_RCC_OscConfig+0x38c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fe9e 	bl	8001028 <HAL_InitTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d039      	beq.n	8002366 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e31e      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d01e      	beq.n	800233c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022fe:	f7ff fdab 	bl	8001e58 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002302:	f7fe fedf 	bl	80010c4 <HAL_GetTick>
 8002306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800230a:	f7fe fedb 	bl	80010c4 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e30b      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800231c:	f7ff fdba 	bl	8001e94 <LL_RCC_MSI_IsReady>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f1      	beq.n	800230a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fdc3 	bl	8001eb6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fde7 	bl	8001f08 <LL_RCC_MSI_SetCalibTrimming>
 800233a:	e015      	b.n	8002368 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800233c:	f7ff fd9b 	bl	8001e76 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002340:	f7fe fec0 	bl	80010c4 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002348:	f7fe febc 	bl	80010c4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2ec      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800235a:	f7ff fd9b 	bl	8001e94 <LL_RCC_MSI_IsReady>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f1      	bne.n	8002348 <HAL_RCC_OscConfig+0x124>
 8002364:	e000      	b.n	8002368 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002366:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d04e      	beq.n	8002412 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002374:	f7ff fdf1 	bl	8001f5a <LL_RCC_GetSysClkSource>
 8002378:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237a:	f7ff feea 	bl	8002152 <LL_RCC_PLL_GetMainSource>
 800237e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2b08      	cmp	r3, #8
 8002384:	d005      	beq.n	8002392 <HAL_RCC_OscConfig+0x16e>
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d10d      	bne.n	80023a8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b03      	cmp	r3, #3
 8002390:	d10a      	bne.n	80023a8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002392:	f7ff fc01 	bl	8001b98 <LL_RCC_HSE_IsReady>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d039      	beq.n	8002410 <HAL_RCC_OscConfig+0x1ec>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d135      	bne.n	8002410 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e2c5      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d102      	bne.n	80023b8 <HAL_RCC_OscConfig+0x194>
 80023b2:	f7ff fbd3 	bl	8001b5c <LL_RCC_HSE_Enable>
 80023b6:	e001      	b.n	80023bc <HAL_RCC_OscConfig+0x198>
 80023b8:	f7ff fbdf 	bl	8001b7a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d012      	beq.n	80023ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe fe7e 	bl	80010c4 <HAL_GetTick>
 80023c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe fe7a 	bl	80010c4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e2aa      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80023de:	f7ff fbdb 	bl	8001b98 <LL_RCC_HSE_IsReady>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f1      	beq.n	80023cc <HAL_RCC_OscConfig+0x1a8>
 80023e8:	e013      	b.n	8002412 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ea:	f7fe fe6b 	bl	80010c4 <HAL_GetTick>
 80023ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f2:	f7fe fe67 	bl	80010c4 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b64      	cmp	r3, #100	; 0x64
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e297      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002404:	f7ff fbc8 	bl	8001b98 <LL_RCC_HSE_IsReady>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f1      	bne.n	80023f2 <HAL_RCC_OscConfig+0x1ce>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d051      	beq.n	80024c2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800241e:	f7ff fd9c 	bl	8001f5a <LL_RCC_GetSysClkSource>
 8002422:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002424:	f7ff fe95 	bl	8002152 <LL_RCC_PLL_GetMainSource>
 8002428:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d005      	beq.n	800243c <HAL_RCC_OscConfig+0x218>
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d113      	bne.n	800245e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d110      	bne.n	800245e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243c:	f7ff fbdc 	bl	8001bf8 <LL_RCC_HSI_IsReady>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x22e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e270      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fbe0 	bl	8001c1c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	e031      	b.n	80024c2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d019      	beq.n	800249a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002466:	f7ff fba9 	bl	8001bbc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fe2b 	bl	80010c4 <HAL_GetTick>
 800246e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fe27 	bl	80010c4 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e257      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002484:	f7ff fbb8 	bl	8001bf8 <LL_RCC_HSI_IsReady>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f1      	beq.n	8002472 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fbc2 	bl	8001c1c <LL_RCC_HSI_SetCalibTrimming>
 8002498:	e013      	b.n	80024c2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	f7ff fb9e 	bl	8001bda <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe fe11 	bl	80010c4 <HAL_GetTick>
 80024a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7fe fe0d 	bl	80010c4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e23d      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80024b8:	f7ff fb9e 	bl	8001bf8 <LL_RCC_HSI_IsReady>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f1      	bne.n	80024a6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80a3 	beq.w	8002622 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d076      	beq.n	80025d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d046      	beq.n	800257e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80024f0:	f7ff fc55 	bl	8001d9e <LL_RCC_LSI1_IsReady>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d113      	bne.n	8002522 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80024fa:	f7ff fc2e 	bl	8001d5a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024fe:	f7fe fde1 	bl	80010c4 <HAL_GetTick>
 8002502:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002506:	f7fe fddd 	bl	80010c4 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e20d      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002518:	f7ff fc41 	bl	8001d9e <LL_RCC_LSI1_IsReady>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f1      	beq.n	8002506 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002522:	f7ff fc4e 	bl	8001dc2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7fe fdcd 	bl	80010c4 <HAL_GetTick>
 800252a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800252e:	f7fe fdc9 	bl	80010c4 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1f9      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002540:	f7ff fc61 	bl	8001e06 <LL_RCC_LSI2_IsReady>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f1      	beq.n	800252e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fc6b 	bl	8001e2a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002554:	f7ff fc12 	bl	8001d7c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fdb4 	bl	80010c4 <HAL_GetTick>
 800255c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002560:	f7fe fdb0 	bl	80010c4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1e0      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002572:	f7ff fc14 	bl	8001d9e <LL_RCC_LSI1_IsReady>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f1      	bne.n	8002560 <HAL_RCC_OscConfig+0x33c>
 800257c:	e051      	b.n	8002622 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800257e:	f7ff fbec 	bl	8001d5a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fd9f 	bl	80010c4 <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800258a:	f7fe fd9b 	bl	80010c4 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1cb      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800259c:	f7ff fbff 	bl	8001d9e <LL_RCC_LSI1_IsReady>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f1      	beq.n	800258a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80025a6:	f7ff fc1d 	bl	8001de4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025aa:	e00c      	b.n	80025c6 <HAL_RCC_OscConfig+0x3a2>
 80025ac:	20000008 	.word	0x20000008
 80025b0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025b4:	f7fe fd86 	bl	80010c4 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1b6      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025c6:	f7ff fc1e 	bl	8001e06 <LL_RCC_LSI2_IsReady>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f1      	bne.n	80025b4 <HAL_RCC_OscConfig+0x390>
 80025d0:	e027      	b.n	8002622 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80025d2:	f7ff fc07 	bl	8001de4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7fe fd75 	bl	80010c4 <HAL_GetTick>
 80025da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025de:	f7fe fd71 	bl	80010c4 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1a1      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80025f0:	f7ff fc09 	bl	8001e06 <LL_RCC_LSI2_IsReady>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f1      	bne.n	80025de <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80025fa:	f7ff fbbf 	bl	8001d7c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fe:	f7fe fd61 	bl	80010c4 <HAL_GetTick>
 8002602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002606:	f7fe fd5d 	bl	80010c4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e18d      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002618:	f7ff fbc1 	bl	8001d9e <LL_RCC_LSI1_IsReady>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f1      	bne.n	8002606 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d05b      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262e:	4bb5      	ldr	r3, [pc, #724]	; (8002904 <HAL_RCC_OscConfig+0x6e0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d114      	bne.n	8002664 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800263a:	f7ff fa5f 	bl	8001afc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263e:	f7fe fd41 	bl	80010c4 <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f7fe fd3d 	bl	80010c4 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e16d      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002658:	4baa      	ldr	r3, [pc, #680]	; (8002904 <HAL_RCC_OscConfig+0x6e0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d102      	bne.n	8002672 <HAL_RCC_OscConfig+0x44e>
 800266c:	f7ff fb1f 	bl	8001cae <LL_RCC_LSE_Enable>
 8002670:	e00c      	b.n	800268c <HAL_RCC_OscConfig+0x468>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b05      	cmp	r3, #5
 8002678:	d104      	bne.n	8002684 <HAL_RCC_OscConfig+0x460>
 800267a:	f7ff fb3a 	bl	8001cf2 <LL_RCC_LSE_EnableBypass>
 800267e:	f7ff fb16 	bl	8001cae <LL_RCC_LSE_Enable>
 8002682:	e003      	b.n	800268c <HAL_RCC_OscConfig+0x468>
 8002684:	f7ff fb24 	bl	8001cd0 <LL_RCC_LSE_Disable>
 8002688:	f7ff fb44 	bl	8001d14 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d014      	beq.n	80026be <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fd16 	bl	80010c4 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe fd12 	bl	80010c4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e140      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80026b2:	f7ff fb40 	bl	8001d36 <LL_RCC_LSE_IsReady>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ef      	beq.n	800269c <HAL_RCC_OscConfig+0x478>
 80026bc:	e013      	b.n	80026e6 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe fd01 	bl	80010c4 <HAL_GetTick>
 80026c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fcfd 	bl	80010c4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e12b      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80026dc:	f7ff fb2b 	bl	8001d36 <LL_RCC_LSE_IsReady>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ef      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d02c      	beq.n	800274c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d014      	beq.n	8002724 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026fa:	f7ff faa4 	bl	8001c46 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7fe fce1 	bl	80010c4 <HAL_GetTick>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002706:	f7fe fcdd 	bl	80010c4 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e10d      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002718:	f7ff fab7 	bl	8001c8a <LL_RCC_HSI48_IsReady>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f1      	beq.n	8002706 <HAL_RCC_OscConfig+0x4e2>
 8002722:	e013      	b.n	800274c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002724:	f7ff faa0 	bl	8001c68 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fccc 	bl	80010c4 <HAL_GetTick>
 800272c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002730:	f7fe fcc8 	bl	80010c4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0f8      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002742:	f7ff faa2 	bl	8001c8a <LL_RCC_HSI48_IsReady>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f1      	bne.n	8002730 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80ee 	beq.w	8002932 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	f7ff fc00 	bl	8001f5a <LL_RCC_GetSysClkSource>
 800275a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2b02      	cmp	r3, #2
 800276a:	f040 80af 	bne.w	80028cc <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	429a      	cmp	r2, r3
 800277a:	d123      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d114      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10d      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d106      	bne.n	80027c4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d05d      	beq.n	8002880 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d058      	beq.n	800287c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0ab      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027dc:	f7ff fc73 	bl	80020c6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e0:	f7fe fc70 	bl	80010c4 <HAL_GetTick>
 80027e4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe fc6c 	bl	80010c4 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e09c      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ef      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b3e      	ldr	r3, [pc, #248]	; (8002908 <HAL_RCC_OscConfig+0x6e4>)
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800281a:	4311      	orrs	r1, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002820:	0212      	lsls	r2, r2, #8
 8002822:	4311      	orrs	r1, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002828:	4311      	orrs	r1, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800282e:	4311      	orrs	r1, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002834:	430a      	orrs	r2, r1
 8002836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800283a:	4313      	orrs	r3, r2
 800283c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800283e:	f7ff fc33 	bl	80020a8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002852:	f7fe fc37 	bl	80010c4 <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285a:	f7fe fc33 	bl	80010c4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e063      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0ef      	beq.n	800285a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800287a:	e05a      	b.n	8002932 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e059      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d151      	bne.n	8002932 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800288e:	f7ff fc0b 	bl	80020a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a2:	f7fe fc0f 	bl	80010c4 <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7fe fc0b 	bl	80010c4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e03b      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0ef      	beq.n	80028aa <HAL_RCC_OscConfig+0x686>
 80028ca:	e032      	b.n	8002932 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d02d      	beq.n	800292e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	f7ff fbf8 	bl	80020c6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80028d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e0:	f023 0303 	bic.w	r3, r3, #3
 80028e4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe fbe3 	bl	80010c4 <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	e00d      	b.n	800291e <HAL_RCC_OscConfig+0x6fa>
 8002902:	bf00      	nop
 8002904:	58000400 	.word	0x58000400
 8002908:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fbda 	bl	80010c4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ef      	bne.n	800290c <HAL_RCC_OscConfig+0x6e8>
 800292c:	e001      	b.n	8002932 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3734      	adds	r7, #52	; 0x34
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}

0800293c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e12d      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002950:	4b98      	ldr	r3, [pc, #608]	; (8002bb4 <HAL_RCC_ClockConfig+0x278>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d91b      	bls.n	8002996 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b95      	ldr	r3, [pc, #596]	; (8002bb4 <HAL_RCC_ClockConfig+0x278>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 0207 	bic.w	r2, r3, #7
 8002966:	4993      	ldr	r1, [pc, #588]	; (8002bb4 <HAL_RCC_ClockConfig+0x278>)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296e:	f7fe fba9 	bl	80010c4 <HAL_GetTick>
 8002972:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002974:	e008      	b.n	8002988 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002976:	f7fe fba5 	bl	80010c4 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e111      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002988:	4b8a      	ldr	r3, [pc, #552]	; (8002bb4 <HAL_RCC_ClockConfig+0x278>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d1ef      	bne.n	8002976 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d016      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fae3 	bl	8001f72 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fb8a 	bl	80010c4 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029b4:	f7fe fb86 	bl	80010c4 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0f2      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029c6:	f7ff fbd0 	bl	800216a <LL_RCC_IsActiveFlag_HPRE>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f1      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d016      	beq.n	8002a0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fada 	bl	8001f9a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029e6:	f7fe fb6d 	bl	80010c4 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ee:	f7fe fb69 	bl	80010c4 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e0d5      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a00:	f7ff fbc5 	bl	800218e <LL_RCC_IsActiveFlag_C2HPRE>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f1      	beq.n	80029ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fad3 	bl	8001fc6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a20:	f7fe fb50 	bl	80010c4 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a28:	f7fe fb4c 	bl	80010c4 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0b8      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a3a:	f7ff fbbb 	bl	80021b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f1      	beq.n	8002a28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d016      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff facd 	bl	8001ff4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a5a:	f7fe fb33 	bl	80010c4 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a62:	f7fe fb2f 	bl	80010c4 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e09b      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a74:	f7ff fbb1 	bl	80021da <LL_RCC_IsActiveFlag_PPRE1>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f1      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d017      	beq.n	8002aba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fac3 	bl	800201c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a96:	f7fe fb15 	bl	80010c4 <HAL_GetTick>
 8002a9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a9e:	f7fe fb11 	bl	80010c4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e07d      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ab0:	f7ff fba5 	bl	80021fe <LL_RCC_IsActiveFlag_PPRE2>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f1      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d043      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ace:	f7ff f863 	bl	8001b98 <LL_RCC_HSE_IsReady>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d11e      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e067      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ae4:	f7ff fafe 	bl	80020e4 <LL_RCC_PLL_IsReady>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d113      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e05c      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d106      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002afa:	f7ff f9cb 	bl	8001e94 <LL_RCC_MSI_IsReady>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d108      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e051      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b08:	f7ff f876 	bl	8001bf8 <LL_RCC_HSI_IsReady>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e04a      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fa09 	bl	8001f32 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fe fad0 	bl	80010c4 <HAL_GetTick>
 8002b24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b28:	f7fe facc 	bl	80010c4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e036      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	f7ff fa0c 	bl	8001f5a <LL_RCC_GetSysClkSource>
 8002b42:	4602      	mov	r2, r0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d1ec      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <HAL_RCC_ClockConfig+0x278>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d21b      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCC_ClockConfig+0x278>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 0207 	bic.w	r2, r3, #7
 8002b64:	4913      	ldr	r1, [pc, #76]	; (8002bb4 <HAL_RCC_ClockConfig+0x278>)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe faaa 	bl	80010c4 <HAL_GetTick>
 8002b70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b74:	f7fe faa6 	bl	80010c4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e012      	b.n	8002bac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_ClockConfig+0x278>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1ef      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b94:	f000 f87c 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_RCC_ClockConfig+0x27c>)
 8002b9c:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002b9e:	f7fe fa9d 	bl	80010dc <HAL_GetTickPrio>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fa3f 	bl	8001028 <HAL_InitTick>
 8002baa:	4603      	mov	r3, r0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	58004000 	.word	0x58004000
 8002bb8:	20000008 	.word	0x20000008

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc2:	f7ff f9ca 	bl	8001f5a <LL_RCC_GetSysClkSource>
 8002bc6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bce:	f7ff f986 	bl	8001ede <LL_RCC_MSI_GetRange>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e04a      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d102      	bne.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bea:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e044      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d10a      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bf6:	f7fe ff9f 	bl	8001b38 <LL_RCC_HSE_IsEnabledDiv2>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d102      	bne.n	8002c06 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e039      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e036      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c0c:	f7ff faa1 	bl	8002152 <LL_RCC_PLL_GetMainSource>
 8002c10:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d002      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x62>
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d003      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x68>
 8002c1c:	e00d      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c20:	60bb      	str	r3, [r7, #8]
        break;
 8002c22:	e015      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c24:	f7fe ff88 	bl	8001b38 <LL_RCC_HSE_IsEnabledDiv2>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d102      	bne.n	8002c34 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c30:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c32:	e00d      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c36:	60bb      	str	r3, [r7, #8]
        break;
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c3a:	f7ff f950 	bl	8001ede <LL_RCC_MSI_GetRange>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4c:	60bb      	str	r3, [r7, #8]
        break;
 8002c4e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002c50:	f7ff fa5a 	bl	8002108 <LL_RCC_PLL_GetN>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	fb03 f402 	mul.w	r4, r3, r2
 8002c5c:	f7ff fa6d 	bl	800213a <LL_RCC_PLL_GetDivider>
 8002c60:	4603      	mov	r3, r0
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	3301      	adds	r3, #1
 8002c66:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c6a:	f7ff fa5a 	bl	8002122 <LL_RCC_PLL_GetR>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	0f5b      	lsrs	r3, r3, #29
 8002c72:	3301      	adds	r3, #1
 8002c74:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	08005b44 	.word	0x08005b44
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	01e84800 	.word	0x01e84800

08002c90 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b598      	push	{r3, r4, r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c94:	f7ff ff92 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	f7ff f9d3 	bl	8002044 <LL_RCC_GetAHBPrescaler>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	4a03      	ldr	r2, [pc, #12]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd98      	pop	{r3, r4, r7, pc}
 8002cb4:	08005ae4 	.word	0x08005ae4

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b598      	push	{r3, r4, r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cbc:	f7ff ffe8 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	f7ff f9d9 	bl	8002078 <LL_RCC_GetAPB1Prescaler>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd98      	pop	{r3, r4, r7, pc}
 8002ce0:	08005b24 	.word	0x08005b24

08002ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce4:	b598      	push	{r3, r4, r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002ce8:	f7ff ffd2 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cec:	4604      	mov	r4, r0
 8002cee:	f7ff f9cf 	bl	8002090 <LL_RCC_GetAPB2Prescaler>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	0adb      	lsrs	r3, r3, #11
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd98      	pop	{r3, r4, r7, pc}
 8002d0c:	08005b24 	.word	0x08005b24

08002d10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2bb0      	cmp	r3, #176	; 0xb0
 8002d1c:	d903      	bls.n	8002d26 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e007      	b.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d36:	f7ff f991 	bl	800205c <LL_RCC_GetAHB4Prescaler>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	0c9c      	lsrs	r4, r3, #18
 8002d5a:	f7fe fedf 	bl	8001b1c <HAL_PWREx_GetVoltageRange>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4619      	mov	r1, r3
 8002d62:	4620      	mov	r0, r4
 8002d64:	f000 f80c 	bl	8002d80 <RCC_SetFlashLatency>
 8002d68:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd90      	pop	{r4, r7, pc}
 8002d72:	bf00      	nop
 8002d74:	08005b44 	.word	0x08005b44
 8002d78:	08005ae4 	.word	0x08005ae4
 8002d7c:	431bde83 	.word	0x431bde83

08002d80 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b093      	sub	sp, #76	; 0x4c
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d8a:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <RCC_SetFlashLatency+0xf0>)
 8002d8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002d96:	4a37      	ldr	r2, [pc, #220]	; (8002e74 <RCC_SetFlashLatency+0xf4>)
 8002d98:	f107 031c 	add.w	r3, r7, #28
 8002d9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002da2:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <RCC_SetFlashLatency+0xf8>)
 8002da4:	f107 040c 	add.w	r4, r7, #12
 8002da8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002daa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002dae:	2300      	movs	r3, #0
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db8:	d11c      	bne.n	8002df4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dbe:	e015      	b.n	8002dec <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002dc8:	4413      	add	r3, r2
 8002dca:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d808      	bhi.n	8002de6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002ddc:	4413      	add	r3, r2
 8002dde:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002de4:	e022      	b.n	8002e2c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de8:	3301      	adds	r3, #1
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
 8002dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d9e6      	bls.n	8002dc0 <RCC_SetFlashLatency+0x40>
 8002df2:	e01b      	b.n	8002e2c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df8:	e015      	b.n	8002e26 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e02:	4413      	add	r3, r2
 8002e04:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d808      	bhi.n	8002e20 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e16:	4413      	add	r3, r2
 8002e18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e1c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e1e:	e005      	b.n	8002e2c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	3301      	adds	r3, #1
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d9e6      	bls.n	8002dfa <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <RCC_SetFlashLatency+0xfc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 0207 	bic.w	r2, r3, #7
 8002e34:	4911      	ldr	r1, [pc, #68]	; (8002e7c <RCC_SetFlashLatency+0xfc>)
 8002e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e3c:	f7fe f942 	bl	80010c4 <HAL_GetTick>
 8002e40:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e42:	e008      	b.n	8002e56 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e44:	f7fe f93e 	bl	80010c4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e007      	b.n	8002e66 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <RCC_SetFlashLatency+0xfc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1ef      	bne.n	8002e44 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	374c      	adds	r7, #76	; 0x4c
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd90      	pop	{r4, r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	08005aa8 	.word	0x08005aa8
 8002e74:	08005ab8 	.word	0x08005ab8
 8002e78:	08005ac4 	.word	0x08005ac4
 8002e7c:	58004000 	.word	0x58004000

08002e80 <LL_RCC_LSE_IsEnabled>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <LL_RCC_LSE_IsEnabled+0x18>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <LL_RCC_LSE_IsEnabled+0x1a>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_RCC_LSE_IsReady>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d101      	bne.n	8002ebc <LL_RCC_LSE_IsReady+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_RCC_LSE_IsReady+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_RCC_MSI_EnablePLLMode>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_RCC_SetRFWKPClockSource>:
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_SetSMPSClockSource>:
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	f023 0203 	bic.w	r2, r3, #3
 8002f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_SetSMPSPrescaler>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LL_RCC_SetUSARTClockSource>:
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_SetLPUARTClockSource>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_SetI2CClockSource>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_RCC_SetLPTIMClockSource>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	43db      	mvns	r3, r3
 800300c:	401a      	ands	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_RCC_SetSAIClockSource>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800303c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_RCC_SetRNGClockSource>:
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <LL_RCC_SetCLK48ClockSource>:
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_RCC_SetUSBClockSource>:
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ffe3 	bl	8003080 <LL_RCC_SetCLK48ClockSource>
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <LL_RCC_SetADCClockSource>:
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_RCC_SetRTCClockSource>:
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003102:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_RCC_GetRTCClockSource>:
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_RCC_ForceBackupDomainReset>:
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_RCC_PLLSAI1_Enable>:
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800318a:	6013      	str	r3, [r2, #0]
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_RCC_PLLSAI1_Disable>:
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800319a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031a8:	6013      	str	r3, [r2, #0]
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_RCC_PLLSAI1_IsReady>:
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80031b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c6:	d101      	bne.n	80031cc <LL_RCC_PLLSAI1_IsReady+0x18>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <LL_RCC_PLLSAI1_IsReady+0x1a>
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80031e0:	2300      	movs	r3, #0
 80031e2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80031e4:	2300      	movs	r3, #0
 80031e6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d033      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d00c      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003202:	d802      	bhi.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d010      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003208:	e017      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800320a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800320e:	d017      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003210:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003214:	d016      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003216:	e010      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003226:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003228:	e00d      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3304      	adds	r3, #4
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f94d 	bl	80034ce <RCCEx_PLLSAI1_ConfigNP>
 8003234:	4603      	mov	r3, r0
 8003236:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003238:	e005      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	77fb      	strb	r3, [r7, #31]
        break;
 800323e:	e002      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003240:	bf00      	nop
 8003242:	e000      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003246:	7ffb      	ldrb	r3, [r7, #31]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fee9 	bl	8003028 <LL_RCC_SetSAIClockSource>
 8003256:	e001      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7ffb      	ldrb	r3, [r7, #31]
 800325a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003264:	2b00      	cmp	r3, #0
 8003266:	d046      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003268:	f7ff ff57 	bl	800311a <LL_RCC_GetRTCClockSource>
 800326c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	429a      	cmp	r2, r3
 8003276:	d03c      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003278:	f7fe fc40 	bl	8001afc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff ff31 	bl	80030ee <LL_RCC_SetRTCClockSource>
 800328c:	e02e      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800328e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003298:	f7ff ff4c 	bl	8003134 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800329c:	f7ff ff5b 	bl	8003156 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80032ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80032b8:	f7ff fde2 	bl	8002e80 <LL_RCC_LSE_IsEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d114      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032c2:	f7fd feff 	bl	80010c4 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80032c8:	e00b      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fefb 	bl	80010c4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d902      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	77fb      	strb	r3, [r7, #31]
              break;
 80032e0:	e004      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 80032e2:	f7ff fddf 	bl	8002ea4 <LL_RCC_LSE_IsReady>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d1ee      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80032ec:	7ffb      	ldrb	r3, [r7, #31]
 80032ee:	77bb      	strb	r3, [r7, #30]
 80032f0:	e001      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f2:	7ffb      	ldrb	r3, [r7, #31]
 80032f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d004      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fe2b 	bl	8002f62 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fe36 	bl	8002f8e <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fe5e 	bl	8002ff4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d004      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fe53 	bl	8002ff4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d004      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fe2b 	bl	8002fba <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fe20 	bl	8002fba <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d022      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fe8e 	bl	80030ac <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003398:	d107      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800339a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b2:	d10b      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f8e3 	bl	8003584 <RCCEx_PLLSAI1_ConfigNQ>
 80033be:	4603      	mov	r3, r0
 80033c0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80033c2:	7ffb      	ldrb	r3, [r7, #31]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 80033c8:	7ffb      	ldrb	r3, [r7, #31]
 80033ca:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d02b      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ea:	d003      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d105      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fe2b 	bl	8003054 <LL_RCC_SetRNGClockSource>
 80033fe:	e00a      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	2000      	movs	r0, #0
 800340c:	f7ff fe22 	bl	8003054 <LL_RCC_SetRNGClockSource>
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fe35 	bl	8003080 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800341e:	d107      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003438:	2b00      	cmp	r3, #0
 800343a:	d022      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff fe3e 	bl	80030c2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800344e:	d107      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800345a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003468:	d10b      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f8e3 	bl	800363a <RCCEx_PLLSAI1_ConfigNR>
 8003474:	4603      	mov	r3, r0
 8003476:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003478:	7ffb      	ldrb	r3, [r7, #31]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800347e:	7ffb      	ldrb	r3, [r7, #31]
 8003480:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fd27 	bl	8002ee6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fd46 	bl	8002f3a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fd2d 	bl	8002f12 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80034b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3720      	adds	r7, #32
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80034c6:	f7ff fcff 	bl	8002ec8 <LL_RCC_MSI_EnablePLLMode>
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}

080034ce <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034da:	f7ff fe5c 	bl	8003196 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034de:	f7fd fdf1 	bl	80010c4 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034e4:	e009      	b.n	80034fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034e6:	f7fd fded 	bl	80010c4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d902      	bls.n	80034fa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	73fb      	strb	r3, [r7, #15]
      break;
 80034f8:	e004      	b.n	8003504 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034fa:	f7ff fe5b 	bl	80031b4 <LL_RCC_PLLSAI1_IsReady>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d137      	bne.n	800357a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800350a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800351e:	4313      	orrs	r3, r2
 8003520:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003534:	4313      	orrs	r3, r2
 8003536:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003538:	f7ff fe1e 	bl	8003178 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800353c:	f7fd fdc2 	bl	80010c4 <HAL_GetTick>
 8003540:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003542:	e009      	b.n	8003558 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003544:	f7fd fdbe 	bl	80010c4 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d902      	bls.n	8003558 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	73fb      	strb	r3, [r7, #15]
        break;
 8003556:	e004      	b.n	8003562 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003558:	f7ff fe2c 	bl	80031b4 <LL_RCC_PLLSAI1_IsReady>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d1f0      	bne.n	8003544 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d108      	bne.n	800357a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003590:	f7ff fe01 	bl	8003196 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003594:	f7fd fd96 	bl	80010c4 <HAL_GetTick>
 8003598:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800359a:	e009      	b.n	80035b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800359c:	f7fd fd92 	bl	80010c4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d902      	bls.n	80035b0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	73fb      	strb	r3, [r7, #15]
      break;
 80035ae:	e004      	b.n	80035ba <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035b0:	f7ff fe00 	bl	80031b4 <LL_RCC_PLLSAI1_IsReady>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d137      	bne.n	8003630 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035d4:	4313      	orrs	r3, r2
 80035d6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ea:	4313      	orrs	r3, r2
 80035ec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035ee:	f7ff fdc3 	bl	8003178 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f2:	f7fd fd67 	bl	80010c4 <HAL_GetTick>
 80035f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035f8:	e009      	b.n	800360e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035fa:	f7fd fd63 	bl	80010c4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d902      	bls.n	800360e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	73fb      	strb	r3, [r7, #15]
        break;
 800360c:	e004      	b.n	8003618 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800360e:	f7ff fdd1 	bl	80031b4 <LL_RCC_PLLSAI1_IsReady>
 8003612:	4603      	mov	r3, r0
 8003614:	2b01      	cmp	r3, #1
 8003616:	d1f0      	bne.n	80035fa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d108      	bne.n	8003630 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362c:	4313      	orrs	r3, r2
 800362e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003630:	7bfb      	ldrb	r3, [r7, #15]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003646:	f7ff fda6 	bl	8003196 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800364a:	f7fd fd3b 	bl	80010c4 <HAL_GetTick>
 800364e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003650:	e009      	b.n	8003666 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003652:	f7fd fd37 	bl	80010c4 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d902      	bls.n	8003666 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	73fb      	strb	r3, [r7, #15]
      break;
 8003664:	e004      	b.n	8003670 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003666:	f7ff fda5 	bl	80031b4 <LL_RCC_PLLSAI1_IsReady>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d137      	bne.n	80036e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800368a:	4313      	orrs	r3, r2
 800368c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a0:	4313      	orrs	r3, r2
 80036a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036a4:	f7ff fd68 	bl	8003178 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a8:	f7fd fd0c 	bl	80010c4 <HAL_GetTick>
 80036ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036ae:	e009      	b.n	80036c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036b0:	f7fd fd08 	bl	80010c4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d902      	bls.n	80036c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	73fb      	strb	r3, [r7, #15]
        break;
 80036c2:	e004      	b.n	80036ce <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036c4:	f7ff fd76 	bl	80031b4 <LL_RCC_PLLSAI1_IsReady>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d1f0      	bne.n	80036b0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d108      	bne.n	80036e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e2:	4313      	orrs	r3, r2
 80036e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e049      	b.n	8003796 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fb2a 	bl	8000d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3304      	adds	r3, #4
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f000 fabe 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d001      	beq.n	80037b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e036      	b.n	8003826 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_TIM_Base_Start_IT+0x94>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d004      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0x44>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e2:	d115      	bne.n	8003810 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <HAL_TIM_Base_Start_IT+0x98>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d015      	beq.n	8003822 <HAL_TIM_Base_Start_IT+0x82>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d011      	beq.n	8003822 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	e008      	b.n	8003822 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e000      	b.n	8003824 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40012c00 	.word	0x40012c00
 8003838:	00010007 	.word	0x00010007

0800383c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a1a      	ldr	r2, [r3, #32]
 800385a:	f241 1311 	movw	r3, #4369	; 0x1111
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <HAL_TIM_Base_Stop_IT+0x48>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6a1a      	ldr	r2, [r3, #32]
 800386a:	f240 4344 	movw	r3, #1092	; 0x444
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_TIM_Base_Stop_IT+0x48>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d122      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d11b      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f06f 0202 	mvn.w	r2, #2
 80038c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f9c8 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 80038e2:	e005      	b.n	80038f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f9ba 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9cb 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b04      	cmp	r3, #4
 8003902:	d122      	bne.n	800394a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d11b      	bne.n	800394a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0204 	mvn.w	r2, #4
 800391a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f99e 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 8003936:	e005      	b.n	8003944 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f990 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9a1 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b08      	cmp	r3, #8
 8003956:	d122      	bne.n	800399e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b08      	cmp	r3, #8
 8003964:	d11b      	bne.n	800399e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f06f 0208 	mvn.w	r2, #8
 800396e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2204      	movs	r2, #4
 8003974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	f003 0303 	and.w	r3, r3, #3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f974 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 800398a:	e005      	b.n	8003998 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f966 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f977 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d122      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0310 	and.w	r3, r3, #16
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d11b      	bne.n	80039f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f06f 0210 	mvn.w	r2, #16
 80039c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2208      	movs	r2, #8
 80039c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f94a 	bl	8003c72 <HAL_TIM_IC_CaptureCallback>
 80039de:	e005      	b.n	80039ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f93c 	bl	8003c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f94d 	bl	8003c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10e      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0201 	mvn.w	r2, #1
 8003a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f916 	bl	8003c4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d10e      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d107      	bne.n	8003a4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fb2d 	bl	80040a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a58:	d10e      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b80      	cmp	r3, #128	; 0x80
 8003a66:	d107      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fb20 	bl	80040b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d10e      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d107      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f8fb 	bl	8003c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d107      	bne.n	8003ad0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0220 	mvn.w	r2, #32
 8003ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fae0 	bl	8004090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_TIM_ConfigClockSource+0x18>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0a8      	b.n	8003c42 <HAL_TIM_ConfigClockSource+0x16a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d067      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0x124>
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d80b      	bhi.n	8003b48 <HAL_TIM_ConfigClockSource+0x70>
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d073      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0x144>
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d802      	bhi.n	8003b3e <HAL_TIM_ConfigClockSource+0x66>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d06f      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b3c:	e078      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d06c      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0x144>
 8003b42:	2b30      	cmp	r3, #48	; 0x30
 8003b44:	d06a      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003b46:	e073      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b48:	2b70      	cmp	r3, #112	; 0x70
 8003b4a:	d00d      	beq.n	8003b68 <HAL_TIM_ConfigClockSource+0x90>
 8003b4c:	2b70      	cmp	r3, #112	; 0x70
 8003b4e:	d804      	bhi.n	8003b5a <HAL_TIM_ConfigClockSource+0x82>
 8003b50:	2b50      	cmp	r3, #80	; 0x50
 8003b52:	d033      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0xe4>
 8003b54:	2b60      	cmp	r3, #96	; 0x60
 8003b56:	d041      	beq.n	8003bdc <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003b58:	e06a      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d066      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x156>
 8003b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b64:	d017      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003b66:	e063      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f000 f97a 	bl	8003e70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	609a      	str	r2, [r3, #8]
      break;
 8003b94:	e04c      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6899      	ldr	r1, [r3, #8]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f000 f963 	bl	8003e70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bb8:	609a      	str	r2, [r3, #8]
      break;
 8003bba:	e039      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f000 f8d5 	bl	8003d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2150      	movs	r1, #80	; 0x50
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 f92e 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003bda:	e029      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	461a      	mov	r2, r3
 8003bea:	f000 f8f4 	bl	8003dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2160      	movs	r1, #96	; 0x60
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 f91e 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003bfa:	e019      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f000 f8b5 	bl	8003d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2140      	movs	r1, #64	; 0x40
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f90e 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003c1a:	e009      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f000 f905 	bl	8003e36 <TIM_ITRx_SetConfig>
        break;
 8003c2c:	e000      	b.n	8003c30 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c52:	bf00      	nop
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <TIM_Base_SetConfig+0xbc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0x20>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d108      	bne.n	8003ce2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <TIM_Base_SetConfig+0xbc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <TIM_Base_SetConfig+0x52>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf0:	d007      	beq.n	8003d02 <TIM_Base_SetConfig+0x52>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <TIM_Base_SetConfig+0xc0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0x52>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <TIM_Base_SetConfig+0xc4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d108      	bne.n	8003d14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0c      	ldr	r2, [pc, #48]	; (8003d6c <TIM_Base_SetConfig+0xbc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_Base_SetConfig+0xa0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <TIM_Base_SetConfig+0xc0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_Base_SetConfig+0xa0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <TIM_Base_SetConfig+0xc4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d103      	bne.n	8003d58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	615a      	str	r2, [r3, #20]
}
 8003d5e:	bf00      	nop
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40012c00 	.word	0x40012c00
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800

08003d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 030a 	bic.w	r3, r3, #10
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	031b      	lsls	r3, r3, #12
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f043 0307 	orr.w	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e04a      	b.n	8003f5e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d108      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ef8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d10c      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00

08003f70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e078      	b.n	800407e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a20      	ldr	r2, [pc, #128]	; (800408c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d106      	bne.n	800401e <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d121      	bne.n	800406c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	051b      	lsls	r3, r3, #20
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0c      	ldr	r2, [pc, #48]	; (800408c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d106      	bne.n	800406c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00

08004090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_RCC_GetUSARTClockSource>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4013      	ands	r3, r2
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_GetLPUARTClockSource>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4013      	ands	r3, r2
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e042      	b.n	80041a4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7fc fd8d 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2224      	movs	r2, #36	; 0x24
 800413a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fb56 	bl	8004800 <UART_SetConfig>
 8004154:	4603      	mov	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e022      	b.n	80041a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fd58 	bl	8004c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800417a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800418a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fddf 	bl	8004d60 <UART_CheckIdleState>
 80041a2:	4603      	mov	r3, r0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e02b      	b.n	8004216 <HAL_UART_DeInit+0x6a>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2224      	movs	r2, #36	; 0x24
 80041c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2200      	movs	r2, #0
 80041e4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fd8e 	bl	8000d10 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->gState = HAL_UART_STATE_RESET;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_RESET;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004234:	2b20      	cmp	r3, #32
 8004236:	d168      	bne.n	800430a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Transmit_IT+0x24>
 800423e:	88fb      	ldrh	r3, [r7, #6]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e061      	b.n	800430c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_UART_Transmit_IT+0x36>
 8004252:	2302      	movs	r3, #2
 8004254:	e05a      	b.n	800430c <HAL_UART_Transmit_IT+0xec>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	88fa      	ldrh	r2, [r7, #6]
 8004268:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2221      	movs	r2, #33	; 0x21
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004292:	d11c      	bne.n	80042ce <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429c:	d107      	bne.n	80042ae <HAL_UART_Transmit_IT+0x8e>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <HAL_UART_Transmit_IT+0xf8>)
 80042aa:	671a      	str	r2, [r3, #112]	; 0x70
 80042ac:	e002      	b.n	80042b4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a1a      	ldr	r2, [pc, #104]	; (800431c <HAL_UART_Transmit_IT+0xfc>)
 80042b2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	e01b      	b.n	8004306 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	d107      	bne.n	80042e8 <HAL_UART_Transmit_IT+0xc8>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d103      	bne.n	80042e8 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a0f      	ldr	r2, [pc, #60]	; (8004320 <HAL_UART_Transmit_IT+0x100>)
 80042e4:	671a      	str	r2, [r3, #112]	; 0x70
 80042e6:	e002      	b.n	80042ee <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_UART_Transmit_IT+0x104>)
 80042ec:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004304:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	080050ef 	.word	0x080050ef
 800431c:	08005055 	.word	0x08005055
 8004320:	08004fd7 	.word	0x08004fd7
 8004324:	08004f63 	.word	0x08004f63

08004328 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	2b20      	cmp	r3, #32
 800433e:	f040 80bc 	bne.w	80044ba <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_Receive_IT+0x26>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e0b4      	b.n	80044bc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_UART_Receive_IT+0x38>
 800435c:	2302      	movs	r3, #2
 800435e:	e0ad      	b.n	80044bc <HAL_UART_Receive_IT+0x194>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	88fa      	ldrh	r2, [r7, #6]
 8004372:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d10e      	bne.n	80043ac <HAL_UART_Receive_IT+0x84>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d105      	bne.n	80043a2 <HAL_UART_Receive_IT+0x7a>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f240 12ff 	movw	r2, #511	; 0x1ff
 800439c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043a0:	e02d      	b.n	80043fe <HAL_UART_Receive_IT+0xd6>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	22ff      	movs	r2, #255	; 0xff
 80043a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043aa:	e028      	b.n	80043fe <HAL_UART_Receive_IT+0xd6>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10d      	bne.n	80043d0 <HAL_UART_Receive_IT+0xa8>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <HAL_UART_Receive_IT+0x9e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	22ff      	movs	r2, #255	; 0xff
 80043c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043c4:	e01b      	b.n	80043fe <HAL_UART_Receive_IT+0xd6>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	227f      	movs	r2, #127	; 0x7f
 80043ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043ce:	e016      	b.n	80043fe <HAL_UART_Receive_IT+0xd6>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d8:	d10d      	bne.n	80043f6 <HAL_UART_Receive_IT+0xce>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d104      	bne.n	80043ec <HAL_UART_Receive_IT+0xc4>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	227f      	movs	r2, #127	; 0x7f
 80043e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043ea:	e008      	b.n	80043fe <HAL_UART_Receive_IT+0xd6>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	223f      	movs	r2, #63	; 0x3f
 80043f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043f4:	e003      	b.n	80043fe <HAL_UART_Receive_IT+0xd6>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2222      	movs	r2, #34	; 0x22
 800440a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f042 0201 	orr.w	r2, r2, #1
 800441c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004426:	d12a      	bne.n	800447e <HAL_UART_Receive_IT+0x156>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	429a      	cmp	r2, r3
 8004432:	d324      	bcc.n	800447e <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443c:	d107      	bne.n	800444e <HAL_UART_Receive_IT+0x126>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <HAL_UART_Receive_IT+0x1a0>)
 800444a:	66da      	str	r2, [r3, #108]	; 0x6c
 800444c:	e002      	b.n	8004454 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4a1e      	ldr	r2, [pc, #120]	; (80044cc <HAL_UART_Receive_IT+0x1a4>)
 8004452:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	e01b      	b.n	80044b6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d107      	bne.n	8004498 <HAL_UART_Receive_IT+0x170>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d103      	bne.n	8004498 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4a0f      	ldr	r2, [pc, #60]	; (80044d0 <HAL_UART_Receive_IT+0x1a8>)
 8004494:	66da      	str	r2, [r3, #108]	; 0x6c
 8004496:	e002      	b.n	800449e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a0e      	ldr	r2, [pc, #56]	; (80044d4 <HAL_UART_Receive_IT+0x1ac>)
 800449c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80044b4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	e000      	b.n	80044bc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
  }
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	08005425 	.word	0x08005425
 80044cc:	0800531d 	.word	0x0800531d
 80044d0:	08005271 	.word	0x08005271
 80044d4:	080051c7 	.word	0x080051c7

080044d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80044fe:	4013      	ands	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d118      	bne.n	800453a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d013      	beq.n	800453a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8145 	beq.w	80047ba <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	4798      	blx	r3
      }
      return;
 8004538:	e13f      	b.n	80047ba <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80e8 	beq.w	8004712 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4ba1      	ldr	r3, [pc, #644]	; (80047cc <HAL_UART_IRQHandler+0x2f4>)
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4ba0      	ldr	r3, [pc, #640]	; (80047d0 <HAL_UART_IRQHandler+0x2f8>)
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80dd 	beq.w	8004712 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d010      	beq.n	8004584 <HAL_UART_IRQHandler+0xac>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2201      	movs	r2, #1
 8004572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f043 0201 	orr.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d010      	beq.n	80045b0 <HAL_UART_IRQHandler+0xd8>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2202      	movs	r2, #2
 800459e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f043 0204 	orr.w	r2, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d010      	beq.n	80045dc <HAL_UART_IRQHandler+0x104>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2204      	movs	r2, #4
 80045ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d2:	f043 0202 	orr.w	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d015      	beq.n	8004612 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d104      	bne.n	80045fa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4b76      	ldr	r3, [pc, #472]	; (80047cc <HAL_UART_IRQHandler+0x2f4>)
 80045f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00b      	beq.n	8004612 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2208      	movs	r2, #8
 8004600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f043 0208 	orr.w	r2, r3, #8
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004618:	2b00      	cmp	r3, #0
 800461a:	d011      	beq.n	8004640 <HAL_UART_IRQHandler+0x168>
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00c      	beq.n	8004640 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800462e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 80b9 	beq.w	80047be <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d011      	beq.n	800467a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f003 0320 	and.w	r3, r3, #32
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d004      	beq.n	800469a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004696:	2b00      	cmp	r3, #0
 8004698:	d031      	beq.n	80046fe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fc28 	bl	8004ef0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d123      	bne.n	80046f6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d013      	beq.n	80046ee <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ca:	4a42      	ldr	r2, [pc, #264]	; (80047d4 <HAL_UART_IRQHandler+0x2fc>)
 80046cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fc fe4d 	bl	8001372 <HAL_DMA_Abort_IT>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d017      	beq.n	800470e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80046e8:	4610      	mov	r0, r2
 80046ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ec:	e00f      	b.n	800470e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f87c 	bl	80047ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e00b      	b.n	800470e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f878 	bl	80047ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fc:	e007      	b.n	800470e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f874 	bl	80047ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800470c:	e057      	b.n	80047be <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800470e:	bf00      	nop
    return;
 8004710:	e055      	b.n	80047be <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <HAL_UART_IRQHandler+0x260>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800472e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fefb 	bl	800552c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004736:	e045      	b.n	80047c4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473e:	2b00      	cmp	r3, #0
 8004740:	d012      	beq.n	8004768 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d008      	beq.n	8004768 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	2b00      	cmp	r3, #0
 800475c:	d031      	beq.n	80047c2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
    }
    return;
 8004766:	e02c      	b.n	80047c2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_UART_IRQHandler+0x2ac>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fd08 	bl	8005192 <UART_EndTransmit_IT>
    return;
 8004782:	e01f      	b.n	80047c4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_UART_IRQHandler+0x2c8>
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fedb 	bl	8005554 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800479e:	e011      	b.n	80047c4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <HAL_UART_IRQHandler+0x2ec>
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	da09      	bge.n	80047c4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fec5 	bl	8005540 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047b6:	bf00      	nop
 80047b8:	e004      	b.n	80047c4 <HAL_UART_IRQHandler+0x2ec>
      return;
 80047ba:	bf00      	nop
 80047bc:	e002      	b.n	80047c4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80047be:	bf00      	nop
 80047c0:	e000      	b.n	80047c4 <HAL_UART_IRQHandler+0x2ec>
    return;
 80047c2:	bf00      	nop
  }
}
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	10000001 	.word	0x10000001
 80047d0:	04000120 	.word	0x04000120
 80047d4:	08004f37 	.word	0x08004f37

080047d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004800:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004804:	b088      	sub	sp, #32
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689a      	ldr	r2, [r3, #8]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4313      	orrs	r3, r2
 8004824:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	4313      	orrs	r3, r2
 800482e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4ba4      	ldr	r3, [pc, #656]	; (8004ac8 <UART_SetConfig+0x2c8>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	69f9      	ldr	r1, [r7, #28]
 8004840:	430b      	orrs	r3, r1
 8004842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a99      	ldr	r2, [pc, #612]	; (8004acc <UART_SetConfig+0x2cc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d004      	beq.n	8004874 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	4313      	orrs	r3, r2
 8004872:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800487e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	69f9      	ldr	r1, [r7, #28]
 8004888:	430b      	orrs	r3, r1
 800488a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	f023 010f 	bic.w	r1, r3, #15
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a8a      	ldr	r2, [pc, #552]	; (8004ad0 <UART_SetConfig+0x2d0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d121      	bne.n	80048f0 <UART_SetConfig+0xf0>
 80048ac:	2003      	movs	r0, #3
 80048ae:	f7ff fc0d 	bl	80040cc <LL_RCC_GetUSARTClockSource>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d817      	bhi.n	80048e8 <UART_SetConfig+0xe8>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <UART_SetConfig+0xc0>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048dd 	.word	0x080048dd
 80048c8:	080048d7 	.word	0x080048d7
 80048cc:	080048e3 	.word	0x080048e3
 80048d0:	2301      	movs	r3, #1
 80048d2:	76fb      	strb	r3, [r7, #27]
 80048d4:	e038      	b.n	8004948 <UART_SetConfig+0x148>
 80048d6:	2302      	movs	r3, #2
 80048d8:	76fb      	strb	r3, [r7, #27]
 80048da:	e035      	b.n	8004948 <UART_SetConfig+0x148>
 80048dc:	2304      	movs	r3, #4
 80048de:	76fb      	strb	r3, [r7, #27]
 80048e0:	e032      	b.n	8004948 <UART_SetConfig+0x148>
 80048e2:	2308      	movs	r3, #8
 80048e4:	76fb      	strb	r3, [r7, #27]
 80048e6:	e02f      	b.n	8004948 <UART_SetConfig+0x148>
 80048e8:	2310      	movs	r3, #16
 80048ea:	76fb      	strb	r3, [r7, #27]
 80048ec:	bf00      	nop
 80048ee:	e02b      	b.n	8004948 <UART_SetConfig+0x148>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a75      	ldr	r2, [pc, #468]	; (8004acc <UART_SetConfig+0x2cc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d124      	bne.n	8004944 <UART_SetConfig+0x144>
 80048fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80048fe:	f7ff fbf5 	bl	80040ec <LL_RCC_GetLPUARTClockSource>
 8004902:	4603      	mov	r3, r0
 8004904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004908:	d012      	beq.n	8004930 <UART_SetConfig+0x130>
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490e:	d802      	bhi.n	8004916 <UART_SetConfig+0x116>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <UART_SetConfig+0x124>
 8004914:	e012      	b.n	800493c <UART_SetConfig+0x13c>
 8004916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491a:	d006      	beq.n	800492a <UART_SetConfig+0x12a>
 800491c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004920:	d009      	beq.n	8004936 <UART_SetConfig+0x136>
 8004922:	e00b      	b.n	800493c <UART_SetConfig+0x13c>
 8004924:	2300      	movs	r3, #0
 8004926:	76fb      	strb	r3, [r7, #27]
 8004928:	e00e      	b.n	8004948 <UART_SetConfig+0x148>
 800492a:	2302      	movs	r3, #2
 800492c:	76fb      	strb	r3, [r7, #27]
 800492e:	e00b      	b.n	8004948 <UART_SetConfig+0x148>
 8004930:	2304      	movs	r3, #4
 8004932:	76fb      	strb	r3, [r7, #27]
 8004934:	e008      	b.n	8004948 <UART_SetConfig+0x148>
 8004936:	2308      	movs	r3, #8
 8004938:	76fb      	strb	r3, [r7, #27]
 800493a:	e005      	b.n	8004948 <UART_SetConfig+0x148>
 800493c:	2310      	movs	r3, #16
 800493e:	76fb      	strb	r3, [r7, #27]
 8004940:	bf00      	nop
 8004942:	e001      	b.n	8004948 <UART_SetConfig+0x148>
 8004944:	2310      	movs	r3, #16
 8004946:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a5f      	ldr	r2, [pc, #380]	; (8004acc <UART_SetConfig+0x2cc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	f040 808e 	bne.w	8004a70 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004954:	7efb      	ldrb	r3, [r7, #27]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d823      	bhi.n	80049a2 <UART_SetConfig+0x1a2>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0x160>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004985 	.word	0x08004985
 8004964:	080049a3 	.word	0x080049a3
 8004968:	0800498d 	.word	0x0800498d
 800496c:	080049a3 	.word	0x080049a3
 8004970:	08004993 	.word	0x08004993
 8004974:	080049a3 	.word	0x080049a3
 8004978:	080049a3 	.word	0x080049a3
 800497c:	080049a3 	.word	0x080049a3
 8004980:	0800499b 	.word	0x0800499b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004984:	f7fe f998 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 8004988:	6178      	str	r0, [r7, #20]
        break;
 800498a:	e00f      	b.n	80049ac <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800498c:	4b51      	ldr	r3, [pc, #324]	; (8004ad4 <UART_SetConfig+0x2d4>)
 800498e:	617b      	str	r3, [r7, #20]
        break;
 8004990:	e00c      	b.n	80049ac <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004992:	f7fe f913 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8004996:	6178      	str	r0, [r7, #20]
        break;
 8004998:	e008      	b.n	80049ac <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499e:	617b      	str	r3, [r7, #20]
        break;
 80049a0:	e004      	b.n	80049ac <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	76bb      	strb	r3, [r7, #26]
        break;
 80049aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 811c 	beq.w	8004bec <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	4a47      	ldr	r2, [pc, #284]	; (8004ad8 <UART_SetConfig+0x2d8>)
 80049ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049be:	461a      	mov	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	4613      	mov	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4413      	add	r3, r2
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d305      	bcc.n	80049e4 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d902      	bls.n	80049ea <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	76bb      	strb	r3, [r7, #26]
 80049e8:	e100      	b.n	8004bec <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	4a38      	ldr	r2, [pc, #224]	; (8004ad8 <UART_SetConfig+0x2d8>)
 80049f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f04f 0400 	mov.w	r4, #0
 8004a02:	461a      	mov	r2, r3
 8004a04:	4623      	mov	r3, r4
 8004a06:	f7fb fbc1 	bl	800018c <__aeabi_uldivmod>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4622      	mov	r2, r4
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	f04f 0400 	mov.w	r4, #0
 8004a1a:	0214      	lsls	r4, r2, #8
 8004a1c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a20:	020b      	lsls	r3, r1, #8
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6852      	ldr	r2, [r2, #4]
 8004a26:	0852      	lsrs	r2, r2, #1
 8004a28:	4611      	mov	r1, r2
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	eb13 0b01 	adds.w	fp, r3, r1
 8004a32:	eb44 0c02 	adc.w	ip, r4, r2
 8004a36:	4658      	mov	r0, fp
 8004a38:	4661      	mov	r1, ip
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f04f 0400 	mov.w	r4, #0
 8004a42:	461a      	mov	r2, r3
 8004a44:	4623      	mov	r3, r4
 8004a46:	f7fb fba1 	bl	800018c <__aeabi_uldivmod>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a56:	d308      	bcc.n	8004a6a <UART_SetConfig+0x26a>
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5e:	d204      	bcs.n	8004a6a <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	60da      	str	r2, [r3, #12]
 8004a68:	e0c0      	b.n	8004bec <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	76bb      	strb	r3, [r7, #26]
 8004a6e:	e0bd      	b.n	8004bec <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a78:	d169      	bne.n	8004b4e <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004a7a:	7efb      	ldrb	r3, [r7, #27]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	2b07      	cmp	r3, #7
 8004a80:	d82c      	bhi.n	8004adc <UART_SetConfig+0x2dc>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <UART_SetConfig+0x288>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004aa9 	.word	0x08004aa9
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004add 	.word	0x08004add
 8004a94:	08004ab7 	.word	0x08004ab7
 8004a98:	08004add 	.word	0x08004add
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004add 	.word	0x08004add
 8004aa4:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa8:	f7fe f91c 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
 8004aac:	6178      	str	r0, [r7, #20]
        break;
 8004aae:	e01a      	b.n	8004ae6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab0:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <UART_SetConfig+0x2d4>)
 8004ab2:	617b      	str	r3, [r7, #20]
        break;
 8004ab4:	e017      	b.n	8004ae6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fe f881 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8004aba:	6178      	str	r0, [r7, #20]
        break;
 8004abc:	e013      	b.n	8004ae6 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ac2:	617b      	str	r3, [r7, #20]
        break;
 8004ac4:	e00f      	b.n	8004ae6 <UART_SetConfig+0x2e6>
 8004ac6:	bf00      	nop
 8004ac8:	cfff69f3 	.word	0xcfff69f3
 8004acc:	40008000 	.word	0x40008000
 8004ad0:	40013800 	.word	0x40013800
 8004ad4:	00f42400 	.word	0x00f42400
 8004ad8:	08005b84 	.word	0x08005b84
      default:
        pclk = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	76bb      	strb	r3, [r7, #26]
        break;
 8004ae4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d07f      	beq.n	8004bec <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	4a48      	ldr	r2, [pc, #288]	; (8004c14 <UART_SetConfig+0x414>)
 8004af2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004af6:	461a      	mov	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004afe:	005a      	lsls	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	441a      	add	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0f      	cmp	r3, #15
 8004b18:	d916      	bls.n	8004b48 <UART_SetConfig+0x348>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d212      	bcs.n	8004b48 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f023 030f 	bic.w	r3, r3, #15
 8004b2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	89fb      	ldrh	r3, [r7, #14]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	89fa      	ldrh	r2, [r7, #14]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e051      	b.n	8004bec <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	76bb      	strb	r3, [r7, #26]
 8004b4c:	e04e      	b.n	8004bec <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b4e:	7efb      	ldrb	r3, [r7, #27]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	2b07      	cmp	r3, #7
 8004b54:	d821      	bhi.n	8004b9a <UART_SetConfig+0x39a>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0x35c>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b7d 	.word	0x08004b7d
 8004b60:	08004b85 	.word	0x08004b85
 8004b64:	08004b9b 	.word	0x08004b9b
 8004b68:	08004b8b 	.word	0x08004b8b
 8004b6c:	08004b9b 	.word	0x08004b9b
 8004b70:	08004b9b 	.word	0x08004b9b
 8004b74:	08004b9b 	.word	0x08004b9b
 8004b78:	08004b93 	.word	0x08004b93
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7fe f8b2 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
 8004b80:	6178      	str	r0, [r7, #20]
        break;
 8004b82:	e00f      	b.n	8004ba4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <UART_SetConfig+0x418>)
 8004b86:	617b      	str	r3, [r7, #20]
        break;
 8004b88:	e00c      	b.n	8004ba4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8a:	f7fe f817 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8004b8e:	6178      	str	r0, [r7, #20]
        break;
 8004b90:	e008      	b.n	8004ba4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b96:	617b      	str	r3, [r7, #20]
        break;
 8004b98:	e004      	b.n	8004ba4 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	76bb      	strb	r3, [r7, #26]
        break;
 8004ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d020      	beq.n	8004bec <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <UART_SetConfig+0x414>)
 8004bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	085b      	lsrs	r3, r3, #1
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	d908      	bls.n	8004be8 <UART_SetConfig+0x3e8>
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bdc:	d204      	bcs.n	8004be8 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	e001      	b.n	8004bec <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004c08:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004c14:	08005b84 	.word	0x08005b84
 8004c18:	00f42400 	.word	0x00f42400

08004c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01a      	beq.n	8004d32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1a:	d10a      	bne.n	8004d32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	605a      	str	r2, [r3, #4]
  }
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d70:	f7fc f9a8 	bl	80010c4 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d10e      	bne.n	8004da2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f82c 	bl	8004df0 <UART_WaitOnFlagUntilTimeout>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e022      	b.n	8004de8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d10e      	bne.n	8004dce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f816 	bl	8004df0 <UART_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e00c      	b.n	8004de8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e00:	e062      	b.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e08:	d05e      	beq.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fc f95b 	bl	80010c4 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d11d      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e2e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0201 	bic.w	r2, r2, #1
 8004e3e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e045      	b.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d02e      	beq.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e78:	d126      	bne.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e82:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e92:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e00f      	b.n	8004ee8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69da      	ldr	r2, [r3, #28]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	bf0c      	ite	eq
 8004ed8:	2301      	moveq	r3, #1
 8004eda:	2300      	movne	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d08d      	beq.n	8004e02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b084      	sub	sp, #16
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff fc49 	bl	80047ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f70:	2b21      	cmp	r3, #33	; 0x21
 8004f72:	d12a      	bne.n	8004fca <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d110      	bne.n	8004fa2 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f8e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f9e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004fa0:	e013      	b.n	8004fca <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe4:	2b21      	cmp	r3, #33	; 0x21
 8004fe6:	d12f      	bne.n	8005048 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d110      	bne.n	8005016 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005002:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005012:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005014:	e018      	b.n	8005048 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005030:	1c9a      	adds	r2, r3, #2
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005062:	2b21      	cmp	r3, #33	; 0x21
 8005064:	d13d      	bne.n	80050e2 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800506c:	81fb      	strh	r3, [r7, #14]
 800506e:	e035      	b.n	80050dc <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d111      	bne.n	80050a0 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800508a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800509c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800509e:	e020      	b.n	80050e2 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d013      	beq.n	80050d6 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	3b01      	subs	r3, #1
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80050d6:	89fb      	ldrh	r3, [r7, #14]
 80050d8:	3b01      	subs	r3, #1
 80050da:	81fb      	strh	r3, [r7, #14]
 80050dc:	89fb      	ldrh	r3, [r7, #14]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1c6      	bne.n	8005070 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050fc:	2b21      	cmp	r3, #33	; 0x21
 80050fe:	d142      	bne.n	8005186 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005106:	81fb      	strh	r3, [r7, #14]
 8005108:	e03a      	b.n	8005180 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d111      	bne.n	800513a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005124:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005134:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8005136:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8005138:	e025      	b.n	8005186 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b00      	cmp	r3, #0
 8005146:	d018      	beq.n	800517a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005162:	1c9a      	adds	r2, r3, #2
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	3b01      	subs	r3, #1
 800517e:	81fb      	strh	r3, [r7, #14]
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1c1      	bne.n	800510a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff fb0d 	bl	80047d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80051d4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051dc:	2b22      	cmp	r3, #34	; 0x22
 80051de:	d13b      	bne.n	8005258 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051e8:	89bb      	ldrh	r3, [r7, #12]
 80051ea:	b2d9      	uxtb	r1, r3
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f4:	400a      	ands	r2, r1
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800521c:	b29b      	uxth	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d122      	bne.n	8005268 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005230:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fb fc4f 	bl	8000af4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005256:	e007      	b.n	8005268 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0208 	orr.w	r2, r2, #8
 8005266:	619a      	str	r2, [r3, #24]
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800527e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005286:	2b22      	cmp	r3, #34	; 0x22
 8005288:	d13b      	bne.n	8005302 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005296:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005298:	89ba      	ldrh	r2, [r7, #12]
 800529a:	89fb      	ldrh	r3, [r7, #14]
 800529c:	4013      	ands	r3, r2
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	1c9a      	adds	r2, r3, #2
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d122      	bne.n	8005312 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fb fbfa 	bl	8000af4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005300:	e007      	b.n	8005312 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0208 	orr.w	r2, r2, #8
 8005310:	619a      	str	r2, [r3, #24]
}
 8005312:	bf00      	nop
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800532a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005332:	2b22      	cmp	r3, #34	; 0x22
 8005334:	d168      	bne.n	8005408 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800533c:	81fb      	strh	r3, [r7, #14]
 800533e:	e03f      	b.n	80053c0 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005348:	893b      	ldrh	r3, [r7, #8]
 800534a:	b2d9      	uxtb	r1, r3
 800534c:	89bb      	ldrh	r3, [r7, #12]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	400a      	ands	r2, r1
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11b      	bne.n	80053ba <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005390:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a0:	f023 0301 	bic.w	r3, r3, #1
 80053a4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2220      	movs	r2, #32
 80053aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fb fb9d 	bl	8000af4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	3b01      	subs	r3, #1
 80053be:	81fb      	strh	r3, [r7, #14]
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1bc      	bne.n	8005340 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053cc:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80053ce:	897b      	ldrh	r3, [r7, #10]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d021      	beq.n	8005418 <UART_RxISR_8BIT_FIFOEN+0xfc>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80053da:	897a      	ldrh	r2, [r7, #10]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d21b      	bcs.n	8005418 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80053ee:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a0b      	ldr	r2, [pc, #44]	; (8005420 <UART_RxISR_8BIT_FIFOEN+0x104>)
 80053f4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0220 	orr.w	r2, r2, #32
 8005404:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005406:	e007      	b.n	8005418 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0208 	orr.w	r2, r2, #8
 8005416:	619a      	str	r2, [r3, #24]
}
 8005418:	bf00      	nop
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	080051c7 	.word	0x080051c7

08005424 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005432:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543a:	2b22      	cmp	r3, #34	; 0x22
 800543c:	d168      	bne.n	8005510 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005444:	82fb      	strh	r3, [r7, #22]
 8005446:	e03f      	b.n	80054c8 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005456:	8a3a      	ldrh	r2, [r7, #16]
 8005458:	8abb      	ldrh	r3, [r7, #20]
 800545a:	4013      	ands	r3, r2
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	1c9a      	adds	r2, r3, #2
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d11b      	bne.n	80054c2 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005498:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7fb fb19 	bl	8000af4 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80054c2:	8afb      	ldrh	r3, [r7, #22]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	82fb      	strh	r3, [r7, #22]
 80054c8:	8afb      	ldrh	r3, [r7, #22]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1bc      	bne.n	8005448 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054d4:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80054d6:	8a7b      	ldrh	r3, [r7, #18]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d021      	beq.n	8005520 <UART_RxISR_16BIT_FIFOEN+0xfc>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054e2:	8a7a      	ldrh	r2, [r7, #18]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d21b      	bcs.n	8005520 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80054f6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80054fc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0220 	orr.w	r2, r2, #32
 800550c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800550e:	e007      	b.n	8005520 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0208 	orr.w	r2, r2, #8
 800551e:	619a      	str	r2, [r3, #24]
}
 8005520:	bf00      	nop
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	08005271 	.word	0x08005271

0800552c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UARTEx_DisableFifoMode+0x16>
 800557a:	2302      	movs	r3, #2
 800557c:	e027      	b.n	80055ce <HAL_UARTEx_DisableFifoMode+0x66>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2224      	movs	r2, #36	; 0x24
 800558a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e02d      	b.n	800564e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2224      	movs	r2, #36	; 0x24
 80055fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0201 	bic.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f850 	bl	80056d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800566a:	2302      	movs	r3, #2
 800566c:	e02d      	b.n	80056ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2224      	movs	r2, #36	; 0x24
 800567a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f812 	bl	80056d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b089      	sub	sp, #36	; 0x24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80056dc:	4a2f      	ldr	r2, [pc, #188]	; (800579c <UARTEx_SetNbDataToProcess+0xc8>)
 80056de:	f107 0314 	add.w	r3, r7, #20
 80056e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056e6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80056ea:	4a2d      	ldr	r2, [pc, #180]	; (80057a0 <UARTEx_SetNbDataToProcess+0xcc>)
 80056ec:	f107 030c 	add.w	r3, r7, #12
 80056f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056f4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d108      	bne.n	8005712 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005710:	e03d      	b.n	800578e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005712:	2308      	movs	r3, #8
 8005714:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005716:	2308      	movs	r3, #8
 8005718:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	0e5b      	lsrs	r3, r3, #25
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	0f5b      	lsrs	r3, r3, #29
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800573a:	7fbb      	ldrb	r3, [r7, #30]
 800573c:	7f3a      	ldrb	r2, [r7, #28]
 800573e:	f107 0120 	add.w	r1, r7, #32
 8005742:	440a      	add	r2, r1
 8005744:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	7f3a      	ldrb	r2, [r7, #28]
 800574e:	f107 0120 	add.w	r1, r7, #32
 8005752:	440a      	add	r2, r1
 8005754:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005758:	fb93 f3f2 	sdiv	r3, r3, r2
 800575c:	b29a      	uxth	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005764:	7ffb      	ldrb	r3, [r7, #31]
 8005766:	7f7a      	ldrb	r2, [r7, #29]
 8005768:	f107 0120 	add.w	r1, r7, #32
 800576c:	440a      	add	r2, r1
 800576e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	7f7a      	ldrb	r2, [r7, #29]
 8005778:	f107 0120 	add.w	r1, r7, #32
 800577c:	440a      	add	r2, r1
 800577e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005782:	fb93 f3f2 	sdiv	r3, r3, r2
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800578e:	bf00      	nop
 8005790:	3724      	adds	r7, #36	; 0x24
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	08005ad4 	.word	0x08005ad4
 80057a0:	08005adc 	.word	0x08005adc

080057a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057ac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057de:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	4013      	ands	r3, r2
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800580c:	b084      	sub	sp, #16
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	f107 0014 	add.w	r0, r7, #20
 800581a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff ffb0 	bl	80057a4 <USB_EnableGlobalInt>

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005850:	b004      	add	sp, #16
 8005852:	4770      	bx	lr

08005854 <atoi>:
 8005854:	220a      	movs	r2, #10
 8005856:	2100      	movs	r1, #0
 8005858:	f000 b8c2 	b.w	80059e0 <strtol>

0800585c <__libc_init_array>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	4e0d      	ldr	r6, [pc, #52]	; (8005894 <__libc_init_array+0x38>)
 8005860:	4c0d      	ldr	r4, [pc, #52]	; (8005898 <__libc_init_array+0x3c>)
 8005862:	1ba4      	subs	r4, r4, r6
 8005864:	10a4      	asrs	r4, r4, #2
 8005866:	2500      	movs	r5, #0
 8005868:	42a5      	cmp	r5, r4
 800586a:	d109      	bne.n	8005880 <__libc_init_array+0x24>
 800586c:	4e0b      	ldr	r6, [pc, #44]	; (800589c <__libc_init_array+0x40>)
 800586e:	4c0c      	ldr	r4, [pc, #48]	; (80058a0 <__libc_init_array+0x44>)
 8005870:	f000 f8ee 	bl	8005a50 <_init>
 8005874:	1ba4      	subs	r4, r4, r6
 8005876:	10a4      	asrs	r4, r4, #2
 8005878:	2500      	movs	r5, #0
 800587a:	42a5      	cmp	r5, r4
 800587c:	d105      	bne.n	800588a <__libc_init_array+0x2e>
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005884:	4798      	blx	r3
 8005886:	3501      	adds	r5, #1
 8005888:	e7ee      	b.n	8005868 <__libc_init_array+0xc>
 800588a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800588e:	4798      	blx	r3
 8005890:	3501      	adds	r5, #1
 8005892:	e7f2      	b.n	800587a <__libc_init_array+0x1e>
 8005894:	08005cb0 	.word	0x08005cb0
 8005898:	08005cb0 	.word	0x08005cb0
 800589c:	08005cb0 	.word	0x08005cb0
 80058a0:	08005cb4 	.word	0x08005cb4

080058a4 <memset>:
 80058a4:	4402      	add	r2, r0
 80058a6:	4603      	mov	r3, r0
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d100      	bne.n	80058ae <memset+0xa>
 80058ac:	4770      	bx	lr
 80058ae:	f803 1b01 	strb.w	r1, [r3], #1
 80058b2:	e7f9      	b.n	80058a8 <memset+0x4>

080058b4 <strstr>:
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b6:	7803      	ldrb	r3, [r0, #0]
 80058b8:	b17b      	cbz	r3, 80058da <strstr+0x26>
 80058ba:	4604      	mov	r4, r0
 80058bc:	7823      	ldrb	r3, [r4, #0]
 80058be:	4620      	mov	r0, r4
 80058c0:	1c66      	adds	r6, r4, #1
 80058c2:	b17b      	cbz	r3, 80058e4 <strstr+0x30>
 80058c4:	1e4a      	subs	r2, r1, #1
 80058c6:	1e63      	subs	r3, r4, #1
 80058c8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80058cc:	b14d      	cbz	r5, 80058e2 <strstr+0x2e>
 80058ce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80058d2:	42af      	cmp	r7, r5
 80058d4:	4634      	mov	r4, r6
 80058d6:	d0f7      	beq.n	80058c8 <strstr+0x14>
 80058d8:	e7f0      	b.n	80058bc <strstr+0x8>
 80058da:	780b      	ldrb	r3, [r1, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf18      	it	ne
 80058e0:	2000      	movne	r0, #0
 80058e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e4:	4618      	mov	r0, r3
 80058e6:	e7fc      	b.n	80058e2 <strstr+0x2e>

080058e8 <_strtol_l.isra.0>:
 80058e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	4680      	mov	r8, r0
 80058ee:	4689      	mov	r9, r1
 80058f0:	4692      	mov	sl, r2
 80058f2:	461e      	mov	r6, r3
 80058f4:	460f      	mov	r7, r1
 80058f6:	463d      	mov	r5, r7
 80058f8:	9808      	ldr	r0, [sp, #32]
 80058fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058fe:	f000 f885 	bl	8005a0c <__locale_ctype_ptr_l>
 8005902:	4420      	add	r0, r4
 8005904:	7843      	ldrb	r3, [r0, #1]
 8005906:	f013 0308 	ands.w	r3, r3, #8
 800590a:	d132      	bne.n	8005972 <_strtol_l.isra.0+0x8a>
 800590c:	2c2d      	cmp	r4, #45	; 0x2d
 800590e:	d132      	bne.n	8005976 <_strtol_l.isra.0+0x8e>
 8005910:	787c      	ldrb	r4, [r7, #1]
 8005912:	1cbd      	adds	r5, r7, #2
 8005914:	2201      	movs	r2, #1
 8005916:	2e00      	cmp	r6, #0
 8005918:	d05d      	beq.n	80059d6 <_strtol_l.isra.0+0xee>
 800591a:	2e10      	cmp	r6, #16
 800591c:	d109      	bne.n	8005932 <_strtol_l.isra.0+0x4a>
 800591e:	2c30      	cmp	r4, #48	; 0x30
 8005920:	d107      	bne.n	8005932 <_strtol_l.isra.0+0x4a>
 8005922:	782b      	ldrb	r3, [r5, #0]
 8005924:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005928:	2b58      	cmp	r3, #88	; 0x58
 800592a:	d14f      	bne.n	80059cc <_strtol_l.isra.0+0xe4>
 800592c:	786c      	ldrb	r4, [r5, #1]
 800592e:	2610      	movs	r6, #16
 8005930:	3502      	adds	r5, #2
 8005932:	2a00      	cmp	r2, #0
 8005934:	bf14      	ite	ne
 8005936:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800593a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800593e:	2700      	movs	r7, #0
 8005940:	fbb1 fcf6 	udiv	ip, r1, r6
 8005944:	4638      	mov	r0, r7
 8005946:	fb06 1e1c 	mls	lr, r6, ip, r1
 800594a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800594e:	2b09      	cmp	r3, #9
 8005950:	d817      	bhi.n	8005982 <_strtol_l.isra.0+0x9a>
 8005952:	461c      	mov	r4, r3
 8005954:	42a6      	cmp	r6, r4
 8005956:	dd23      	ble.n	80059a0 <_strtol_l.isra.0+0xb8>
 8005958:	1c7b      	adds	r3, r7, #1
 800595a:	d007      	beq.n	800596c <_strtol_l.isra.0+0x84>
 800595c:	4584      	cmp	ip, r0
 800595e:	d31c      	bcc.n	800599a <_strtol_l.isra.0+0xb2>
 8005960:	d101      	bne.n	8005966 <_strtol_l.isra.0+0x7e>
 8005962:	45a6      	cmp	lr, r4
 8005964:	db19      	blt.n	800599a <_strtol_l.isra.0+0xb2>
 8005966:	fb00 4006 	mla	r0, r0, r6, r4
 800596a:	2701      	movs	r7, #1
 800596c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005970:	e7eb      	b.n	800594a <_strtol_l.isra.0+0x62>
 8005972:	462f      	mov	r7, r5
 8005974:	e7bf      	b.n	80058f6 <_strtol_l.isra.0+0xe>
 8005976:	2c2b      	cmp	r4, #43	; 0x2b
 8005978:	bf04      	itt	eq
 800597a:	1cbd      	addeq	r5, r7, #2
 800597c:	787c      	ldrbeq	r4, [r7, #1]
 800597e:	461a      	mov	r2, r3
 8005980:	e7c9      	b.n	8005916 <_strtol_l.isra.0+0x2e>
 8005982:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005986:	2b19      	cmp	r3, #25
 8005988:	d801      	bhi.n	800598e <_strtol_l.isra.0+0xa6>
 800598a:	3c37      	subs	r4, #55	; 0x37
 800598c:	e7e2      	b.n	8005954 <_strtol_l.isra.0+0x6c>
 800598e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005992:	2b19      	cmp	r3, #25
 8005994:	d804      	bhi.n	80059a0 <_strtol_l.isra.0+0xb8>
 8005996:	3c57      	subs	r4, #87	; 0x57
 8005998:	e7dc      	b.n	8005954 <_strtol_l.isra.0+0x6c>
 800599a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800599e:	e7e5      	b.n	800596c <_strtol_l.isra.0+0x84>
 80059a0:	1c7b      	adds	r3, r7, #1
 80059a2:	d108      	bne.n	80059b6 <_strtol_l.isra.0+0xce>
 80059a4:	2322      	movs	r3, #34	; 0x22
 80059a6:	f8c8 3000 	str.w	r3, [r8]
 80059aa:	4608      	mov	r0, r1
 80059ac:	f1ba 0f00 	cmp.w	sl, #0
 80059b0:	d107      	bne.n	80059c2 <_strtol_l.isra.0+0xda>
 80059b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b6:	b102      	cbz	r2, 80059ba <_strtol_l.isra.0+0xd2>
 80059b8:	4240      	negs	r0, r0
 80059ba:	f1ba 0f00 	cmp.w	sl, #0
 80059be:	d0f8      	beq.n	80059b2 <_strtol_l.isra.0+0xca>
 80059c0:	b10f      	cbz	r7, 80059c6 <_strtol_l.isra.0+0xde>
 80059c2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80059c6:	f8ca 9000 	str.w	r9, [sl]
 80059ca:	e7f2      	b.n	80059b2 <_strtol_l.isra.0+0xca>
 80059cc:	2430      	movs	r4, #48	; 0x30
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	d1af      	bne.n	8005932 <_strtol_l.isra.0+0x4a>
 80059d2:	2608      	movs	r6, #8
 80059d4:	e7ad      	b.n	8005932 <_strtol_l.isra.0+0x4a>
 80059d6:	2c30      	cmp	r4, #48	; 0x30
 80059d8:	d0a3      	beq.n	8005922 <_strtol_l.isra.0+0x3a>
 80059da:	260a      	movs	r6, #10
 80059dc:	e7a9      	b.n	8005932 <_strtol_l.isra.0+0x4a>
	...

080059e0 <strtol>:
 80059e0:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <strtol+0x24>)
 80059e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059e4:	681c      	ldr	r4, [r3, #0]
 80059e6:	4d08      	ldr	r5, [pc, #32]	; (8005a08 <strtol+0x28>)
 80059e8:	6a23      	ldr	r3, [r4, #32]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	bf08      	it	eq
 80059ee:	462b      	moveq	r3, r5
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	4613      	mov	r3, r2
 80059f4:	460a      	mov	r2, r1
 80059f6:	4601      	mov	r1, r0
 80059f8:	4620      	mov	r0, r4
 80059fa:	f7ff ff75 	bl	80058e8 <_strtol_l.isra.0>
 80059fe:	b003      	add	sp, #12
 8005a00:	bd30      	pop	{r4, r5, pc}
 8005a02:	bf00      	nop
 8005a04:	20000014 	.word	0x20000014
 8005a08:	20000078 	.word	0x20000078

08005a0c <__locale_ctype_ptr_l>:
 8005a0c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005a10:	4770      	bx	lr

08005a12 <__ascii_mbtowc>:
 8005a12:	b082      	sub	sp, #8
 8005a14:	b901      	cbnz	r1, 8005a18 <__ascii_mbtowc+0x6>
 8005a16:	a901      	add	r1, sp, #4
 8005a18:	b142      	cbz	r2, 8005a2c <__ascii_mbtowc+0x1a>
 8005a1a:	b14b      	cbz	r3, 8005a30 <__ascii_mbtowc+0x1e>
 8005a1c:	7813      	ldrb	r3, [r2, #0]
 8005a1e:	600b      	str	r3, [r1, #0]
 8005a20:	7812      	ldrb	r2, [r2, #0]
 8005a22:	1c10      	adds	r0, r2, #0
 8005a24:	bf18      	it	ne
 8005a26:	2001      	movne	r0, #1
 8005a28:	b002      	add	sp, #8
 8005a2a:	4770      	bx	lr
 8005a2c:	4610      	mov	r0, r2
 8005a2e:	e7fb      	b.n	8005a28 <__ascii_mbtowc+0x16>
 8005a30:	f06f 0001 	mvn.w	r0, #1
 8005a34:	e7f8      	b.n	8005a28 <__ascii_mbtowc+0x16>

08005a36 <__ascii_wctomb>:
 8005a36:	b149      	cbz	r1, 8005a4c <__ascii_wctomb+0x16>
 8005a38:	2aff      	cmp	r2, #255	; 0xff
 8005a3a:	bf85      	ittet	hi
 8005a3c:	238a      	movhi	r3, #138	; 0x8a
 8005a3e:	6003      	strhi	r3, [r0, #0]
 8005a40:	700a      	strbls	r2, [r1, #0]
 8005a42:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005a46:	bf98      	it	ls
 8005a48:	2001      	movls	r0, #1
 8005a4a:	4770      	bx	lr
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	4770      	bx	lr

08005a50 <_init>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr

08005a5c <_fini>:
 8005a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5e:	bf00      	nop
 8005a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a62:	bc08      	pop	{r3}
 8005a64:	469e      	mov	lr, r3
 8005a66:	4770      	bx	lr
