
LUART_connect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005cf4  08005cf4  00015cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000004  08005cf8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000460  200001e4  08005ed8  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000644  08005ed8  00020644  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001722d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ab7  00000000  00000000  00037441  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001a80  00000000  00000000  00039ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001948  00000000  00000000  0003b978  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022a08  00000000  00000000  0003d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010e69  00000000  00000000  0005fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000e1bf0  00000000  00000000  00070b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00152721  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007318  00000000  00000000  0015279c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e4 	.word	0x200001e4
 8000158:	00000000 	.word	0x00000000
 800015c:	08005a90 	.word	0x08005a90

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e8 	.word	0x200001e8
 8000178:	08005a90 	.word	0x08005a90

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	4688      	mov	r8, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0803 	orr.w	r8, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f4:	fa1f fc85 	uxth.w	ip, r5
 80001f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000200:	fb07 f10c 	mul.w	r1, r7, ip
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800020e:	f080 811b 	bcs.w	8000448 <__udivmoddi4+0x28c>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8118 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000230:	45a4      	cmp	ip, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	192c      	adds	r4, r5, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023a:	f080 8107 	bcs.w	800044c <__udivmoddi4+0x290>
 800023e:	45a4      	cmp	ip, r4
 8000240:	f240 8104 	bls.w	800044c <__udivmoddi4+0x290>
 8000244:	3802      	subs	r0, #2
 8000246:	442c      	add	r4, r5
 8000248:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024c:	eba4 040c 	sub.w	r4, r4, ip
 8000250:	2700      	movs	r7, #0
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80eb 	beq.w	8000442 <__udivmoddi4+0x286>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d147      	bne.n	8000312 <__udivmoddi4+0x156>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fa 	bhi.w	8000480 <__udivmoddi4+0x2c4>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	1b49      	subs	r1, r1, r5
 80002b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b4:	fa1f f885 	uxth.w	r8, r5
 80002b8:	2701      	movs	r7, #1
 80002ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	fb08 f10c 	mul.w	r1, r8, ip
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002d0:	18eb      	adds	r3, r5, r3
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4299      	cmp	r1, r3
 80002da:	f200 80cd 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002de:	4684      	mov	ip, r0
 80002e0:	1a59      	subs	r1, r3, r1
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x14c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x14a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80b6 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e79f      	b.n	8000252 <__udivmoddi4+0x96>
 8000312:	f1c7 0c20 	rsb	ip, r7, #32
 8000316:	40bb      	lsls	r3, r7
 8000318:	fa22 fe0c 	lsr.w	lr, r2, ip
 800031c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000320:	fa01 f407 	lsl.w	r4, r1, r7
 8000324:	fa20 f50c 	lsr.w	r5, r0, ip
 8000328:	fa21 f30c 	lsr.w	r3, r1, ip
 800032c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000330:	4325      	orrs	r5, r4
 8000332:	fbb3 f9f8 	udiv	r9, r3, r8
 8000336:	0c2c      	lsrs	r4, r5, #16
 8000338:	fb08 3319 	mls	r3, r8, r9, r3
 800033c:	fa1f fa8e 	uxth.w	sl, lr
 8000340:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000344:	fb09 f40a 	mul.w	r4, r9, sl
 8000348:	429c      	cmp	r4, r3
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f107 	lsl.w	r1, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1e 0303 	adds.w	r3, lr, r3
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800035c:	f080 8087 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000360:	429c      	cmp	r4, r3
 8000362:	f240 8084 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4473      	add	r3, lr
 800036c:	1b1b      	subs	r3, r3, r4
 800036e:	b2ad      	uxth	r5, r5
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800037c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000380:	45a2      	cmp	sl, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1e 0404 	adds.w	r4, lr, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	d26b      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 800038e:	45a2      	cmp	sl, r4
 8000390:	d969      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000392:	3802      	subs	r0, #2
 8000394:	4474      	add	r4, lr
 8000396:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039a:	fba0 8902 	umull	r8, r9, r0, r2
 800039e:	eba4 040a 	sub.w	r4, r4, sl
 80003a2:	454c      	cmp	r4, r9
 80003a4:	46c2      	mov	sl, r8
 80003a6:	464b      	mov	r3, r9
 80003a8:	d354      	bcc.n	8000454 <__udivmoddi4+0x298>
 80003aa:	d051      	beq.n	8000450 <__udivmoddi4+0x294>
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d069      	beq.n	8000484 <__udivmoddi4+0x2c8>
 80003b0:	ebb1 050a 	subs.w	r5, r1, sl
 80003b4:	eb64 0403 	sbc.w	r4, r4, r3
 80003b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003bc:	40fd      	lsrs	r5, r7
 80003be:	40fc      	lsrs	r4, r7
 80003c0:	ea4c 0505 	orr.w	r5, ip, r5
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f703 	lsr.w	r7, r0, r3
 80003d4:	4095      	lsls	r5, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	fa21 f303 	lsr.w	r3, r1, r3
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	4338      	orrs	r0, r7
 80003e4:	0c01      	lsrs	r1, r0, #16
 80003e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ea:	fa1f f885 	uxth.w	r8, r5
 80003ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f6:	fb07 f308 	mul.w	r3, r7, r8
 80003fa:	428b      	cmp	r3, r1
 80003fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x256>
 8000402:	1869      	adds	r1, r5, r1
 8000404:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	428b      	cmp	r3, r1
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3f02      	subs	r7, #2
 8000410:	4429      	add	r1, r5
 8000412:	1acb      	subs	r3, r1, r3
 8000414:	b281      	uxth	r1, r0
 8000416:	fbb3 f0fe 	udiv	r0, r3, lr
 800041a:	fb0e 3310 	mls	r3, lr, r0, r3
 800041e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000422:	fb00 f308 	mul.w	r3, r0, r8
 8000426:	428b      	cmp	r3, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000430:	d217      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000432:	428b      	cmp	r3, r1
 8000434:	d915      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000440:	e73b      	b.n	80002ba <__udivmoddi4+0xfe>
 8000442:	4637      	mov	r7, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e709      	b.n	800025c <__udivmoddi4+0xa0>
 8000448:	4607      	mov	r7, r0
 800044a:	e6e7      	b.n	800021c <__udivmoddi4+0x60>
 800044c:	4618      	mov	r0, r3
 800044e:	e6fb      	b.n	8000248 <__udivmoddi4+0x8c>
 8000450:	4541      	cmp	r1, r8
 8000452:	d2ab      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000454:	ebb8 0a02 	subs.w	sl, r8, r2
 8000458:	eb69 020e 	sbc.w	r2, r9, lr
 800045c:	3801      	subs	r0, #1
 800045e:	4613      	mov	r3, r2
 8000460:	e7a4      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000462:	4660      	mov	r0, ip
 8000464:	e7e9      	b.n	800043a <__udivmoddi4+0x27e>
 8000466:	4618      	mov	r0, r3
 8000468:	e795      	b.n	8000396 <__udivmoddi4+0x1da>
 800046a:	4667      	mov	r7, ip
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	4681      	mov	r9, r0
 8000470:	e77c      	b.n	800036c <__udivmoddi4+0x1b0>
 8000472:	3802      	subs	r0, #2
 8000474:	442c      	add	r4, r5
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0x14c>
 8000478:	f1ac 0c02 	sub.w	ip, ip, #2
 800047c:	442b      	add	r3, r5
 800047e:	e72f      	b.n	80002e0 <__udivmoddi4+0x124>
 8000480:	4638      	mov	r0, r7
 8000482:	e708      	b.n	8000296 <__udivmoddi4+0xda>
 8000484:	4637      	mov	r7, r6
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0xa0>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800049c:	f023 0218 	bic.w	r2, r3, #24
 80004a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004dc:	68fb      	ldr	r3, [r7, #12]
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <parse_to_func>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void	parse_to_func(UART_HandleTypeDef *huart, parse_t *parse)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	parse->Rx_Num_of_Bytes = huart->RxXferSize - huart->RxXferCount;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000504:	b29b      	uxth	r3, r3
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	461a      	mov	r2, r3
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	619a      	str	r2, [r3, #24]
	parse->Processed_Rx_Bytes = parse->Rx_Num_of_Bytes;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	699a      	ldr	r2, [r3, #24]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	61da      	str	r2, [r3, #28]
	for (uint8_t idx = 0; idx < parse->Processed_Rx_Bytes; idx++)
 8000516:	2300      	movs	r3, #0
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	e084      	b.n	8000626 <parse_to_func+0x13a>
	{
		if ((parse->str1 = strstr(&str[idx], "CMD+")) != NULL)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	4a47      	ldr	r2, [pc, #284]	; (800063c <parse_to_func+0x150>)
 8000520:	4413      	add	r3, r2
 8000522:	4947      	ldr	r1, [pc, #284]	; (8000640 <parse_to_func+0x154>)
 8000524:	4618      	mov	r0, r3
 8000526:	f005 f9e5 	bl	80058f4 <strstr>
 800052a:	4602      	mov	r2, r0
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d073      	beq.n	8000620 <parse_to_func+0x134>
		{
			if ((parse->str2 = strstr(parse->str1, "+END")) != NULL)
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4941      	ldr	r1, [pc, #260]	; (8000644 <parse_to_func+0x158>)
 800053e:	4618      	mov	r0, r3
 8000540:	f005 f9d8 	bl	80058f4 <strstr>
 8000544:	4602      	mov	r2, r0
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d066      	beq.n	8000620 <parse_to_func+0x134>
			{
				*(parse->str2) = '\0';
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
				parse->flag = 0;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	731a      	strb	r2, [r3, #12]
				for (uint8_t i = 0; i < sizeof(command_name) / sizeof(command_name[0]); i++)
 8000560:	2300      	movs	r3, #0
 8000562:	73bb      	strb	r3, [r7, #14]
 8000564:	e03a      	b.n	80005dc <parse_to_func+0xf0>
				{
					parse->point = &command_name[i];
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	00db      	lsls	r3, r3, #3
 800056a:	4a37      	ldr	r2, [pc, #220]	; (8000648 <parse_to_func+0x15c>)
 800056c:	441a      	add	r2, r3
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	621a      	str	r2, [r3, #32]
					if ((parse->str3 = strstr(parse->str1, parse->point->name)) != NULL)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	6a1b      	ldr	r3, [r3, #32]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	4610      	mov	r0, r2
 8000580:	f005 f9b8 	bl	80058f4 <strstr>
 8000584:	4602      	mov	r2, r0
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d021      	beq.n	80005d6 <parse_to_func+0xea>
					{
						parse->ptr = (uint32_t)atoi(parse->str3 + strlen(parse->point->name) + 1);
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	689c      	ldr	r4, [r3, #8]
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fded 	bl	800017c <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	3301      	adds	r3, #1
 80005a6:	4423      	add	r3, r4
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 f973 	bl	8005894 <atoi>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	611a      	str	r2, [r3, #16]
						if (parse->point->p_func != NULL)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	6a1b      	ldr	r3, [r3, #32]
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d006      	beq.n	80005ce <parse_to_func+0xe2>
						{
						  parse->point->p_func(parse->ptr);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	6912      	ldr	r2, [r2, #16]
 80005ca:	4610      	mov	r0, r2
 80005cc:	4798      	blx	r3
						}
						parse->flag = 1;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	2201      	movs	r2, #1
 80005d2:	731a      	strb	r2, [r3, #12]
						break ;
 80005d4:	e005      	b.n	80005e2 <parse_to_func+0xf6>
				for (uint8_t i = 0; i < sizeof(command_name) / sizeof(command_name[0]); i++)
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d9c1      	bls.n	8000566 <parse_to_func+0x7a>
					}
				}
				memset(str, 0x00, sizeof(str));
 80005e2:	2264      	movs	r2, #100	; 0x64
 80005e4:	2100      	movs	r1, #0
 80005e6:	4815      	ldr	r0, [pc, #84]	; (800063c <parse_to_func+0x150>)
 80005e8:	f005 f97c 	bl	80058e4 <memset>
				HAL_UART_DeInit(huart);
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f003 fdfd 	bl	80041ec <HAL_UART_DeInit>
				HAL_UART_Init(huart);
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f003 fdaa 	bl	800414c <HAL_UART_Init>
				HAL_UART_Receive_IT(huart, (uint8_t*)str, sizeof(str) - 1);
 80005f8:	2263      	movs	r2, #99	; 0x63
 80005fa:	4910      	ldr	r1, [pc, #64]	; (800063c <parse_to_func+0x150>)
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f003 feb3 	bl	8004368 <HAL_UART_Receive_IT>
				if (parse->flag == 1)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	7b1b      	ldrb	r3, [r3, #12]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d105      	bne.n	8000616 <parse_to_func+0x12a>
				{
				  HAL_UART_Transmit_IT(huart, (uint8_t*)"Ok\n", strlen("Ok\n"));
 800060a:	2203      	movs	r2, #3
 800060c:	490f      	ldr	r1, [pc, #60]	; (800064c <parse_to_func+0x160>)
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f003 fe26 	bl	8004260 <HAL_UART_Transmit_IT>
 8000614:	e004      	b.n	8000620 <parse_to_func+0x134>
				}
				else
				{
				  HAL_UART_Transmit_IT(huart, (uint8_t*)"No command\n", strlen("No command\n"));
 8000616:	220b      	movs	r2, #11
 8000618:	490d      	ldr	r1, [pc, #52]	; (8000650 <parse_to_func+0x164>)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f003 fe20 	bl	8004260 <HAL_UART_Transmit_IT>
	for (uint8_t idx = 0; idx < parse->Processed_Rx_Bytes; idx++)
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	3301      	adds	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	7bfa      	ldrb	r2, [r7, #15]
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	429a      	cmp	r2, r3
 800062e:	f4ff af75 	bcc.w	800051c <parse_to_func+0x30>
				}
			}
		}
	}
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bd90      	pop	{r4, r7, pc}
 800063a:	bf00      	nop
 800063c:	20000368 	.word	0x20000368
 8000640:	08005ab8 	.word	0x08005ab8
 8000644:	08005ac0 	.word	0x08005ac0
 8000648:	08005b14 	.word	0x08005b14
 800064c:	08005ac8 	.word	0x08005ac8
 8000650:	08005acc 	.word	0x08005acc

08000654 <cmd1_led>:

void	cmd1_led(uint32_t ptr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	led_on = ptr;
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <cmd1_led+0x1c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <cmd1_led+0x20>)
 8000664:	f003 f8bc 	bl	80037e0 <HAL_TIM_Base_Start_IT>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	2000028c 	.word	0x2000028c
 8000674:	2000031c 	.word	0x2000031c

08000678 <cmd2_led>:

void	cmd2_led(uint32_t ptr)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim1);
 8000680:	4805      	ldr	r0, [pc, #20]	; (8000698 <cmd2_led+0x20>)
 8000682:	f003 f8fb 	bl	800387c <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2123      	movs	r1, #35	; 0x23
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <cmd2_led+0x24>)
 800068c:	f001 f93e 	bl	800190c <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000031c 	.word	0x2000031c
 800069c:	48000400 	.word	0x48000400

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f000 fcbf 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f825 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 f9f9 	bl	8000aa4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006b2:	f000 f8c9 	bl	8000848 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80006b6:	f000 f915 	bl	80008e4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80006ba:	f000 f9cb 	bl	8000a54 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80006be:	f000 f95d 	bl	800097c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Transmit_IT(&hlpuart1, "asd\n", strlen("asd\n"));
  HAL_UART_Receive_IT(&huart1, (uint8_t*)str, strlen(str) - 1);
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <main+0x50>)
 80006c4:	f7ff fd5a 	bl	800017c <strlen>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	3b01      	subs	r3, #1
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	4907      	ldr	r1, [pc, #28]	; (80006f0 <main+0x50>)
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <main+0x54>)
 80006d6:	f003 fe47 	bl	8004368 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  parse_t parse;
  parse.next_byte = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  parse.Processed_Rx_Bytes = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  while (1)
  {
	 parse_to_func(&huart1, &parse);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <main+0x54>)
 80006e8:	f7ff ff00 	bl	80004ec <parse_to_func>
 80006ec:	e7f9      	b.n	80006e2 <main+0x42>
 80006ee:	bf00      	nop
 80006f0:	20000368 	.word	0x20000368
 80006f4:	20000290 	.word	0x20000290

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0ae      	sub	sp, #184	; 0xb8
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000702:	2248      	movs	r2, #72	; 0x48
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 f8ec 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2250      	movs	r2, #80	; 0x50
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f8dc 	bl	80058e4 <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800072c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800073a:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800073c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	f023 0303 	bic.w	r3, r3, #3
 8000746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000750:	f001 f9f4 	bl	8001b3c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000754:	2000      	movs	r0, #0
 8000756:	f7ff fe99 	bl	800048c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075a:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <SystemClock_Config+0x14c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000762:	4a38      	ldr	r2, [pc, #224]	; (8000844 <SystemClock_Config+0x14c>)
 8000764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	4b36      	ldr	r3, [pc, #216]	; (8000844 <SystemClock_Config+0x14c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000776:	2327      	movs	r3, #39	; 0x27
 8000778:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000788:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800078a:	2301      	movs	r3, #1
 800078c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2340      	movs	r3, #64	; 0x40
 8000792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800079c:	2360      	movs	r3, #96	; 0x60
 800079e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fd59 	bl	8002264 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007b8:	f000 f9d4 	bl	8000b64 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007bc:	236f      	movs	r3, #111	; 0x6f
 80007be:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007c0:	2302      	movs	r3, #2
 80007c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f8cc 	bl	800297c <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007ea:	f000 f9bb 	bl	8000b64 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80007ee:	f242 1303 	movw	r3, #8451	; 0x2103
 80007f2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80007f4:	2318      	movs	r3, #24
 80007f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80007f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80007fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000802:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000804:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000808:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800080a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800080e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000818:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800081e:	2300      	movs	r3, #0
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000822:	2300      	movs	r3, #0
 8000824:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fcf5 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x140>
  {
    Error_Handler();
 8000834:	f000 f996 	bl	8000b64 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000838:	f002 fe63 	bl	8003502 <HAL_RCCEx_EnableMSIPLLMode>
}
 800083c:	bf00      	nop
 800083e:	37b8      	adds	r7, #184	; 0xb8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	58000400 	.word	0x58000400

08000848 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_LPUART1_UART_Init+0x94>)
 8000850:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 8000854:	4a22      	ldr	r2, [pc, #136]	; (80008e0 <MX_LPUART1_UART_Init+0x98>)
 8000856:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 800086c:	220c      	movs	r2, #12
 800086e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 8000890:	f003 fc5c 	bl	800414c <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800089a:	f000 f963 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 80008a2:	f004 feba 	bl	800561a <HAL_UARTEx_SetTxFifoThreshold>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80008ac:	f000 f95a 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b0:	2100      	movs	r1, #0
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 80008b4:	f004 feef 	bl	8005696 <HAL_UARTEx_SetRxFifoThreshold>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80008be:	f000 f951 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_LPUART1_UART_Init+0x90>)
 80008c4:	f004 fe70 	bl	80055a8 <HAL_UARTEx_DisableFifoMode>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80008ce:	f000 f949 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000200 	.word	0x20000200
 80008dc:	40008000 	.word	0x40008000
 80008e0:	00033324 	.word	0x00033324

080008e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_USART1_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	; (8000978 <MX_USART1_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_USART1_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_USART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_USART1_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_USART1_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_USART1_UART_Init+0x90>)
 800092e:	f003 fc0d 	bl	800414c <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f914 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000940:	f004 fe6b 	bl	800561a <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f90b 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000952:	f004 fea0 	bl	8005696 <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f902 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_USART1_UART_Init+0x90>)
 8000962:	f004 fe21 	bl	80055a8 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f8fa 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000290 	.word	0x20000290
 8000978:	40013800 	.word	0x40013800

0800097c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000990:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099c:	463b      	mov	r3, r7
 800099e:	2234      	movs	r2, #52	; 0x34
 80009a0:	2100      	movs	r1, #0
 80009a2:	4618      	mov	r0, r3
 80009a4:	f004 ff9e 	bl	80058e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <MX_TIM1_Init+0xd0>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009b0:	f240 123f 	movw	r2, #319	; 0x13f
 80009b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = period;
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_TIM1_Init+0xd4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009c2:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d6:	481c      	ldr	r0, [pc, #112]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009d8:	f002 feaa 	bl	8003730 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f8bf 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009f0:	4619      	mov	r1, r3
 80009f2:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_TIM1_Init+0xcc>)
 80009f4:	f003 f890 	bl	8003b18 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 80009fe:	f000 f8b1 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_TIM1_Init+0xcc>)
 8000a16:	f003 fa6b 	bl	8003ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a20:	f000 f8a0 	bl	8000b64 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_TIM1_Init+0xcc>)
 8000a32:	f003 fabd 	bl	8003fb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a3c:	f000 f892 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	3750      	adds	r7, #80	; 0x50
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000031c 	.word	0x2000031c
 8000a4c:	40012c00 	.word	0x40012c00
 8000a50:	20000004 	.word	0x20000004

08000a54 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <MX_USB_PCD_Init+0x4c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a60:	2208      	movs	r2, #8
 8000a62:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a66:	2202      	movs	r2, #2
 8000a68:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_USB_PCD_Init+0x48>)
 8000a8a:	f000 ff71 	bl	8001970 <HAL_PCD_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a94:	f000 f866 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	200003cc 	.word	0x200003cc
 8000aa0:	40006800 	.word	0x40006800

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	2004      	movs	r0, #4
 8000aba:	f7ff fcfd 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2002      	movs	r0, #2
 8000ac0:	f7ff fcfa 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff fcf7 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	2008      	movs	r0, #8
 8000acc:	f7ff fcf4 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2123      	movs	r1, #35	; 0x23
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <MX_GPIO_Init+0x84>)
 8000ad6:	f000 ff19 	bl	800190c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ada:	2310      	movs	r3, #16
 8000adc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4810      	ldr	r0, [pc, #64]	; (8000b2c <MX_GPIO_Init+0x88>)
 8000aec:	f000 fcc0 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000af0:	2323      	movs	r3, #35	; 0x23
 8000af2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	4808      	ldr	r0, [pc, #32]	; (8000b28 <MX_GPIO_Init+0x84>)
 8000b06:	f000 fcb3 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_GPIO_Init+0x8c>)
 8000b1c:	f000 fca8 	bl	8001470 <HAL_GPIO_Init>

}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	48000c00 	.word	0x48000c00

08000b34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_DeInit(&huart1);
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <HAL_UART_RxCpltCallback+0x28>)
 8000b3e:	f003 fb55 	bl	80041ec <HAL_UART_DeInit>
	HAL_UART_Init(&huart1);
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <HAL_UART_RxCpltCallback+0x28>)
 8000b44:	f003 fb02 	bl	800414c <HAL_UART_Init>
	HAL_UART_Receive_IT(&huart1, (uint8_t*)str, sizeof(str) - 1);
 8000b48:	2263      	movs	r2, #99	; 0x63
 8000b4a:	4905      	ldr	r1, [pc, #20]	; (8000b60 <HAL_UART_RxCpltCallback+0x2c>)
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <HAL_UART_RxCpltCallback+0x28>)
 8000b4e:	f003 fc0b 	bl	8004368 <HAL_UART_Receive_IT>
  UNUSED(huart1);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000290 	.word	0x20000290
 8000b60:	20000368 	.word	0x20000368

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <Error_Handler+0x6>

08000b6c <LL_AHB2_GRP1_EnableClock>:
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b90:	68fb      	ldr	r3, [r7, #12]
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000baa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <LL_APB1_GRP2_DisableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_DisableClock(uint32_t Periphs)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8000c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c18:	4013      	ands	r3, r2
 8000c1a:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c70:	4013      	ands	r3, r2
 8000c72:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <HAL_UART_MspInit+0xb0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d11e      	bne.n	8000cf0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff ff8c 	bl	8000bd0 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f7ff ff57 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	481a      	ldr	r0, [pc, #104]	; (8000d44 <HAL_UART_MspInit+0xb4>)
 8000cda:	f000 fbc9 	bl	8001470 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2025      	movs	r0, #37	; 0x25
 8000ce4:	f000 fb23 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ce8:	2025      	movs	r0, #37	; 0x25
 8000cea:	f000 fb3a 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cee:	e023      	b.n	8000d38 <HAL_UART_MspInit+0xa8>
  else if(huart->Instance==USART1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_UART_MspInit+0xb8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d11e      	bne.n	8000d38 <HAL_UART_MspInit+0xa8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cfe:	f7ff ff93 	bl	8000c28 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2002      	movs	r0, #2
 8000d04:	f7ff ff32 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d08:	23c0      	movs	r3, #192	; 0xc0
 8000d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d18:	2307      	movs	r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	480a      	ldr	r0, [pc, #40]	; (8000d4c <HAL_UART_MspInit+0xbc>)
 8000d24:	f000 fba4 	bl	8001470 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2024      	movs	r0, #36	; 0x24
 8000d2e:	f000 fafe 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d32:	2024      	movs	r0, #36	; 0x24
 8000d34:	f000 fb15 	bl	8001362 <HAL_NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40008000 	.word	0x40008000
 8000d44:	48000800 	.word	0x48000800
 8000d48:	40013800 	.word	0x40013800
 8000d4c:	48000400 	.word	0x48000400

08000d50 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <HAL_UART_MspDeInit+0x50>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d10a      	bne.n	8000d78 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8000d62:	2001      	movs	r0, #1
 8000d64:	f7ff ff4d 	bl	8000c02 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 8000d68:	2103      	movs	r1, #3
 8000d6a:	480e      	ldr	r0, [pc, #56]	; (8000da4 <HAL_UART_MspDeInit+0x54>)
 8000d6c:	f000 fcf0 	bl	8001750 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8000d70:	2025      	movs	r0, #37	; 0x25
 8000d72:	f000 fb04 	bl	800137e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000d76:	e00f      	b.n	8000d98 <HAL_UART_MspDeInit+0x48>
  else if(huart->Instance==USART1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_UART_MspDeInit+0x58>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10a      	bne.n	8000d98 <HAL_UART_MspDeInit+0x48>
    __HAL_RCC_USART1_CLK_DISABLE();
 8000d82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d86:	f7ff ff68 	bl	8000c5a <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOB, STLINK_RX_Pin|STLINK_TX_Pin);
 8000d8a:	21c0      	movs	r1, #192	; 0xc0
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <HAL_UART_MspDeInit+0x5c>)
 8000d8e:	f000 fcdf 	bl	8001750 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000d92:	2024      	movs	r0, #36	; 0x24
 8000d94:	f000 faf3 	bl	800137e <HAL_NVIC_DisableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40008000 	.word	0x40008000
 8000da4:	48000800 	.word	0x48000800
 8000da8:	40013800 	.word	0x40013800
 8000dac:	48000400 	.word	0x48000400

08000db0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <HAL_TIM_Base_MspInit+0x34>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10b      	bne.n	8000dda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000dc6:	f7ff ff2f 	bl	8000c28 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2019      	movs	r0, #25
 8000dd0:	f000 faad 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dd4:	2019      	movs	r0, #25
 8000dd6:	f000 fac4 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40012c00 	.word	0x40012c00

08000de8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_PCD_MspInit+0x5c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d118      	bne.n	8000e3c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f7ff feae 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e22:	230a      	movs	r3, #10
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f000 fb1e 	bl	8001470 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000e38:	f7ff feb1 	bl	8000b9e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40006800 	.word	0x40006800

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f922 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if (led_on == 0)
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <TIM1_UP_TIM16_IRQHandler+0x3c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d104      	bne.n	8000eb2 <TIM1_UP_TIM16_IRQHandler+0x16>
	{
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000eac:	f000 fd46 	bl	800193c <HAL_GPIO_TogglePin>
 8000eb0:	e00c      	b.n	8000ecc <TIM1_UP_TIM16_IRQHandler+0x30>
	}
	else if (led_on == 1)
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <TIM1_UP_TIM16_IRQHandler+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d104      	bne.n	8000ec4 <TIM1_UP_TIM16_IRQHandler+0x28>
	{
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000ebe:	f000 fd3d 	bl	800193c <HAL_GPIO_TogglePin>
 8000ec2:	e003      	b.n	8000ecc <TIM1_UP_TIM16_IRQHandler+0x30>
	}
	else
	{
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000ec8:	f000 fd38 	bl	800193c <HAL_GPIO_TogglePin>
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ecc:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <TIM1_UP_TIM16_IRQHandler+0x44>)
 8000ece:	f002 fd04 	bl	80038da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000028c 	.word	0x2000028c
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	2000031c 	.word	0x2000031c

08000ee4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <USART1_IRQHandler+0x10>)
 8000eea:	f003 fb15 	bl	8004518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000290 	.word	0x20000290

08000ef8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <LPUART1_IRQHandler+0x10>)
 8000efe:	f003 fb0b 	bl	8004518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000200 	.word	0x20000200

08000f0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <SystemInit+0xa0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <SystemInit+0xa0>)
 8000f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1c:	4a23      	ldr	r2, [pc, #140]	; (8000fac <SystemInit+0xa0>)
 8000f1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f3e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <SystemInit+0xa4>)
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f5c:	f023 0305 	bic.w	r3, r3, #5
 8000f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <SystemInit+0xa8>)
 8000f7e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <SystemInit+0xa8>)
 8000f86:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	faf6fefb 	.word	0xfaf6fefb
 8000fb4:	22041000 	.word	0x22041000

08000fb8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000fb8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbc:	3304      	adds	r3, #4

08000fbe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000fc2:	d3f9      	bcc.n	8000fb8 <CopyDataInit>
  bx lr
 8000fc4:	4770      	bx	lr

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000fc6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fc8:	3004      	adds	r0, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000fca:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>
  bx lr
 8000fce:	4770      	bx	lr

08000fd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000fd2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fd4:	f7ff ff9a 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <LoopForever+0x8>)
 8000fda:	490c      	ldr	r1, [pc, #48]	; (800100c <LoopForever+0xc>)
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <LoopForever+0x10>)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f7ff ffed 	bl	8000fbe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopForever+0x14>)
 8000fe6:	490c      	ldr	r1, [pc, #48]	; (8001018 <LoopForever+0x18>)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f7ff ffee 	bl	8000fca <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <LoopForever+0x1c>)
 8000ff0:	490b      	ldr	r1, [pc, #44]	; (8001020 <LoopForever+0x20>)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f7ff ffe9 	bl	8000fca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ff8:	f004 fc50 	bl	800589c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ffc:	f7ff fb50 	bl	80006a0 <main>

08001000 <LoopForever>:

LoopForever:
  b LoopForever
 8001000:	e7fe      	b.n	8001000 <LoopForever>
 8001002:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001004:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001008:	20000004 	.word	0x20000004
 800100c:	200001e4 	.word	0x200001e4
 8001010:	08005cf8 	.word	0x08005cf8
  INIT_BSS _sbss, _ebss
 8001014:	200001e4 	.word	0x200001e4
 8001018:	20000644 	.word	0x20000644
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800101c:	20030000 	.word	0x20030000
 8001020:	20030000 	.word	0x20030000

08001024 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_Init+0x3c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_Init+0x3c>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f96a 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001044:	2000      	movs	r0, #0
 8001046:	f000 f80f 	bl	8001068 <HAL_InitTick>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	e001      	b.n	800105a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001056:	f7ff fe13 	bl	8000c80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800105a:	79fb      	ldrb	r3, [r7, #7]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	58004000 	.word	0x58004000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_InitTick+0x6c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d024      	beq.n	80010c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800107c:	f001 fe28 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8001080:	4602      	mov	r2, r0
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_InitTick+0x6c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001090:	fbb2 f3f3 	udiv	r3, r2, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f980 	bl	800139a <HAL_SYSTICK_Config>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10f      	bne.n	80010c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	d809      	bhi.n	80010ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a6:	2200      	movs	r2, #0
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ae:	f000 f93e 	bl	800132e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_InitTick+0x70>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e007      	b.n	80010ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e004      	b.n	80010ca <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e001      	b.n	80010ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000010 	.word	0x20000010
 80010d8:	2000000c 	.word	0x2000000c

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000010 	.word	0x20000010
 8001100:	20000640 	.word	0x20000640

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000640 	.word	0x20000640

0800111c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTickPrio+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000000c 	.word	0x2000000c

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db10      	blt.n	8001208 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4909      	ldr	r1, [pc, #36]	; (8001214 <__NVIC_DisableIRQ+0x40>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	3320      	adds	r3, #32
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001204:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff07 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff1e 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff90 	bl	800126c <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5f 	bl	8001218 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff11 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff21 	bl	80011d4 <__NVIC_DisableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ff96 	bl	80012d4 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d005      	beq.n	80013d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2204      	movs	r2, #4
 80013ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e047      	b.n	8001466 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 020e 	bic.w	r2, r2, #14
 80013e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0201 	bic.w	r2, r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001404:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	f003 021c 	and.w	r2, r3, #28
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001422:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00c      	beq.n	8001446 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800143a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001444:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	4798      	blx	r3
    }
  }
  return status;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e14c      	b.n	800171a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 813e 	beq.w	8001714 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d00b      	beq.n	80014b8 <HAL_GPIO_Init+0x48>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d007      	beq.n	80014b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ac:	2b11      	cmp	r3, #17
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b12      	cmp	r3, #18
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 0201 	and.w	r2, r3, #1
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	2203      	movs	r2, #3
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0xea>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b12      	cmp	r3, #18
 8001558:	d123      	bne.n	80015a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	08da      	lsrs	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3208      	adds	r2, #8
 8001562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	08da      	lsrs	r2, r3, #3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3208      	adds	r2, #8
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0203 	and.w	r2, r3, #3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8098 	beq.w	8001714 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015e4:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_GPIO_Init+0x2c8>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800160e:	d019      	beq.n	8001644 <HAL_GPIO_Init+0x1d4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a4a      	ldr	r2, [pc, #296]	; (800173c <HAL_GPIO_Init+0x2cc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1d0>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a49      	ldr	r2, [pc, #292]	; (8001740 <HAL_GPIO_Init+0x2d0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1cc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_GPIO_Init+0x2d4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1c8>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a47      	ldr	r2, [pc, #284]	; (8001748 <HAL_GPIO_Init+0x2d8>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1c4>
 8001630:	2304      	movs	r3, #4
 8001632:	e008      	b.n	8001646 <HAL_GPIO_Init+0x1d6>
 8001634:	2307      	movs	r3, #7
 8001636:	e006      	b.n	8001646 <HAL_GPIO_Init+0x1d6>
 8001638:	2303      	movs	r3, #3
 800163a:	e004      	b.n	8001646 <HAL_GPIO_Init+0x1d6>
 800163c:	2302      	movs	r3, #2
 800163e:	e002      	b.n	8001646 <HAL_GPIO_Init+0x1d6>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <HAL_GPIO_Init+0x1d6>
 8001644:	2300      	movs	r3, #0
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	f002 0203 	and.w	r2, r2, #3
 800164c:	0092      	lsls	r2, r2, #2
 800164e:	4093      	lsls	r3, r2
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001656:	4938      	ldr	r1, [pc, #224]	; (8001738 <HAL_GPIO_Init+0x2c8>)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001664:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_GPIO_Init+0x2dc>)
 8001666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43db      	mvns	r3, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800168a:	4a30      	ldr	r2, [pc, #192]	; (800174c <HAL_GPIO_Init+0x2dc>)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_GPIO_Init+0x2dc>)
 8001694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b8:	4a24      	ldr	r2, [pc, #144]	; (800174c <HAL_GPIO_Init+0x2dc>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_GPIO_Init+0x2dc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_GPIO_Init+0x2dc>)
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <HAL_GPIO_Init+0x2dc>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_GPIO_Init+0x2dc>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	3301      	adds	r3, #1
 8001718:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f aeab 	bne.w	8001480 <HAL_GPIO_Init+0x10>
  }
}
 800172a:	bf00      	nop
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40010000 	.word	0x40010000
 800173c:	48000400 	.word	0x48000400
 8001740:	48000800 	.word	0x48000800
 8001744:	48000c00 	.word	0x48000c00
 8001748:	48001000 	.word	0x48001000
 800174c:	58000800 	.word	0x58000800

08001750 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800175e:	e0bb      	b.n	80018d8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001760:	2201      	movs	r2, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80ae 	beq.w	80018d2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001776:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_GPIO_DeInit+0x1a4>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800179e:	d019      	beq.n	80017d4 <HAL_GPIO_DeInit+0x84>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a55      	ldr	r2, [pc, #340]	; (80018f8 <HAL_GPIO_DeInit+0x1a8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d013      	beq.n	80017d0 <HAL_GPIO_DeInit+0x80>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_GPIO_DeInit+0x1ac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00d      	beq.n	80017cc <HAL_GPIO_DeInit+0x7c>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a53      	ldr	r2, [pc, #332]	; (8001900 <HAL_GPIO_DeInit+0x1b0>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_DeInit+0x78>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a52      	ldr	r2, [pc, #328]	; (8001904 <HAL_GPIO_DeInit+0x1b4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d101      	bne.n	80017c4 <HAL_GPIO_DeInit+0x74>
 80017c0:	2304      	movs	r3, #4
 80017c2:	e008      	b.n	80017d6 <HAL_GPIO_DeInit+0x86>
 80017c4:	2307      	movs	r3, #7
 80017c6:	e006      	b.n	80017d6 <HAL_GPIO_DeInit+0x86>
 80017c8:	2303      	movs	r3, #3
 80017ca:	e004      	b.n	80017d6 <HAL_GPIO_DeInit+0x86>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e002      	b.n	80017d6 <HAL_GPIO_DeInit+0x86>
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <HAL_GPIO_DeInit+0x86>
 80017d4:	2300      	movs	r3, #0
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	f002 0203 	and.w	r2, r2, #3
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	4093      	lsls	r3, r2
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d136      	bne.n	8001854 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80017e6:	4b48      	ldr	r3, [pc, #288]	; (8001908 <HAL_GPIO_DeInit+0x1b8>)
 80017e8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4945      	ldr	r1, [pc, #276]	; (8001908 <HAL_GPIO_DeInit+0x1b8>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_GPIO_DeInit+0x1b8>)
 80017fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	4941      	ldr	r1, [pc, #260]	; (8001908 <HAL_GPIO_DeInit+0x1b8>)
 8001804:	4013      	ands	r3, r2
 8001806:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_GPIO_DeInit+0x1b8>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	493d      	ldr	r1, [pc, #244]	; (8001908 <HAL_GPIO_DeInit+0x1b8>)
 8001814:	4013      	ands	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_GPIO_DeInit+0x1b8>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43db      	mvns	r3, r3
 8001820:	4939      	ldr	r1, [pc, #228]	; (8001908 <HAL_GPIO_DeInit+0x1b8>)
 8001822:	4013      	ands	r3, r2
 8001824:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001836:	4a2f      	ldr	r2, [pc, #188]	; (80018f4 <HAL_GPIO_DeInit+0x1a4>)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43da      	mvns	r2, r3
 8001846:	482b      	ldr	r0, [pc, #172]	; (80018f4 <HAL_GPIO_DeInit+0x1a4>)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	400a      	ands	r2, r1
 800184e:	3302      	adds	r3, #2
 8001850:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2103      	movs	r1, #3
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	220f      	movs	r2, #15
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	08d2      	lsrs	r2, r2, #3
 8001888:	4019      	ands	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2103      	movs	r1, #3
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	2101      	movs	r1, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2103      	movs	r1, #3
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	401a      	ands	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	609a      	str	r2, [r3, #8]
    }
    
    position++;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f47f af3d 	bne.w	8001760 <HAL_GPIO_DeInit+0x10>
  }
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	48001000 	.word	0x48001000
 8001908:	58000800 	.word	0x58000800

0800190c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001928:	e002      	b.n	8001930 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43d9      	mvns	r1, r3
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	400b      	ands	r3, r1
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	619a      	str	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b08b      	sub	sp, #44	; 0x2c
 8001974:	af06      	add	r7, sp, #24
 8001976:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0ad      	b.n	8001ade <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fa26 	bl	8000de8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f003 ff34 	bl	8005816 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e035      	b.n	8001a20 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	015b      	lsls	r3, r3, #5
 80019ba:	4413      	add	r3, r2
 80019bc:	3329      	adds	r3, #41	; 0x29
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	015b      	lsls	r3, r3, #5
 80019c8:	4413      	add	r3, r2
 80019ca:	3328      	adds	r3, #40	; 0x28
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	b291      	uxth	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	015b      	lsls	r3, r3, #5
 80019da:	4413      	add	r3, r2
 80019dc:	3336      	adds	r3, #54	; 0x36
 80019de:	460a      	mov	r2, r1
 80019e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	015b      	lsls	r3, r3, #5
 80019e8:	4413      	add	r3, r2
 80019ea:	332b      	adds	r3, #43	; 0x2b
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	015b      	lsls	r3, r3, #5
 80019f6:	4413      	add	r3, r2
 80019f8:	3338      	adds	r3, #56	; 0x38
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	015b      	lsls	r3, r3, #5
 8001a04:	4413      	add	r3, r2
 8001a06:	333c      	adds	r3, #60	; 0x3c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	3302      	adds	r3, #2
 8001a12:	015b      	lsls	r3, r3, #5
 8001a14:	4413      	add	r3, r2
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3c4      	bcc.n	80019b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	e031      	b.n	8001a94 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	015b      	lsls	r3, r3, #5
 8001a36:	4413      	add	r3, r2
 8001a38:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	015b      	lsls	r3, r3, #5
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	4413      	add	r3, r2
 8001a58:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	015b      	lsls	r3, r3, #5
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	4413      	add	r3, r2
 8001a78:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	330a      	adds	r3, #10
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	4413      	add	r3, r2
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	3301      	adds	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3c8      	bcc.n	8001a30 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	687e      	ldr	r6, [r7, #4]
 8001aa6:	466d      	mov	r5, sp
 8001aa8:	f106 0410 	add.w	r4, r6, #16
 8001aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	602b      	str	r3, [r5, #0]
 8001ab4:	1d33      	adds	r3, r6, #4
 8001ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f003 fec7 	bl	800584c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d102      	bne.n	8001adc <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f805 	bl	8001ae6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ae6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	58000400 	.word	0x58000400

08001b5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	58000400 	.word	0x58000400

08001b78 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b8a:	d101      	bne.n	8001b90 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_RCC_HSE_Enable>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <LL_RCC_HSE_Disable>:
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_RCC_HSE_IsReady>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bea:	d101      	bne.n	8001bf0 <LL_RCC_HSE_IsReady+0x18>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <LL_RCC_HSE_IsReady+0x1a>
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_RCC_HSI_Enable>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_RCC_HSI_Disable>:
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_RCC_HSI_IsReady>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4a:	d101      	bne.n	8001c50 <LL_RCC_HSI_IsReady+0x18>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <LL_RCC_HSI_IsReady+0x1a>
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_RCC_HSI_SetCalibTrimming>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_RCC_HSI48_Enable>:
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_RCC_HSI48_Disable>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_RCC_HSI48_IsReady>:
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d101      	bne.n	8001ce2 <LL_RCC_HSI48_IsReady+0x18>
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e000      	b.n	8001ce4 <LL_RCC_HSI48_IsReady+0x1a>
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <LL_RCC_LSE_Enable>:
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_RCC_LSE_Disable>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_RCC_LSE_EnableBypass>:
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d42:	f043 0304 	orr.w	r3, r3, #4
 8001d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_RCC_LSE_DisableBypass>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d64:	f023 0304 	bic.w	r3, r3, #4
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d101      	bne.n	8001d8e <LL_RCC_LSE_IsReady+0x18>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <LL_RCC_LSE_IsReady+0x1a>
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d101      	bne.n	8001df6 <LL_RCC_LSI1_IsReady+0x18>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <LL_RCC_LSI1_IsReady+0x1a>
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d101      	bne.n	8001e5e <LL_RCC_LSI2_IsReady+0x18>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <LL_RCC_LSI2_IsReady+0x1a>
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6013      	str	r3, [r2, #0]
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d101      	bne.n	8001eea <LL_RCC_MSI_IsReady+0x16>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_RCC_MSI_IsReady+0x18>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f2e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2bb0      	cmp	r3, #176	; 0xb0
 8001f34:	d901      	bls.n	8001f3a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001f36:	23b0      	movs	r3, #176	; 0xb0
 8001f38:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001f3a:	687b      	ldr	r3, [r7, #4]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 0203 	bic.w	r2, r3, #3
 8001f84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002016:	f023 020f 	bic.w	r2, r3, #15
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800206e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002114:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002118:	6013      	str	r3, [r2, #0]
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002136:	d101      	bne.n	800213c <LL_RCC_PLL_IsReady+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_RCC_PLL_IsReady+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002162:	b480      	push	{r7}
 8002164:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0303 	and.w	r3, r3, #3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80021ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d101      	bne.n	80021c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80021d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021e2:	d101      	bne.n	80021e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d101      	bne.n	800220e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800222c:	d101      	bne.n	8002232 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002250:	d101      	bne.n	8002256 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b08d      	sub	sp, #52	; 0x34
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e37e      	b.n	8002974 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0320 	and.w	r3, r3, #32
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8092 	beq.w	80023a8 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002284:	f7ff fe89 	bl	8001f9a <LL_RCC_GetSysClkSource>
 8002288:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228a:	f7ff ff82 	bl	8002192 <LL_RCC_PLL_GetMainSource>
 800228e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x3e>
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d14c      	bne.n	8002336 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d149      	bne.n	8002336 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022a2:	f7ff fe17 	bl	8001ed4 <LL_RCC_MSI_IsReady>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_RCC_OscConfig+0x54>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e35d      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80022bc:	f7ff fe2f 	bl	8001f1e <LL_RCC_MSI_GetRange>
 80022c0:	4603      	mov	r3, r0
 80022c2:	429c      	cmp	r4, r3
 80022c4:	d914      	bls.n	80022f0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fd40 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e34c      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe09 	bl	8001ef6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fe2d 	bl	8001f48 <LL_RCC_MSI_SetCalibTrimming>
 80022ee:	e013      	b.n	8002318 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fdfe 	bl	8001ef6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fe22 	bl	8001f48 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fd21 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e32d      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002318:	f000 fcda 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4bb3      	ldr	r3, [pc, #716]	; (80025ec <HAL_RCC_OscConfig+0x388>)
 8002320:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002322:	4bb3      	ldr	r3, [pc, #716]	; (80025f0 <HAL_RCC_OscConfig+0x38c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fe9e 	bl	8001068 <HAL_InitTick>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d039      	beq.n	80023a6 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e31e      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01e      	beq.n	800237c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800233e:	f7ff fdab 	bl	8001e98 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002342:	f7fe fedf 	bl	8001104 <HAL_GetTick>
 8002346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800234a:	f7fe fedb 	bl	8001104 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e30b      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800235c:	f7ff fdba 	bl	8001ed4 <LL_RCC_MSI_IsReady>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f1      	beq.n	800234a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fdc3 	bl	8001ef6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fde7 	bl	8001f48 <LL_RCC_MSI_SetCalibTrimming>
 800237a:	e015      	b.n	80023a8 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800237c:	f7ff fd9b 	bl	8001eb6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002380:	f7fe fec0 	bl	8001104 <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002388:	f7fe febc 	bl	8001104 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e2ec      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800239a:	f7ff fd9b 	bl	8001ed4 <LL_RCC_MSI_IsReady>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f1      	bne.n	8002388 <HAL_RCC_OscConfig+0x124>
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d04e      	beq.n	8002452 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b4:	f7ff fdf1 	bl	8001f9a <LL_RCC_GetSysClkSource>
 80023b8:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ba:	f7ff feea 	bl	8002192 <LL_RCC_PLL_GetMainSource>
 80023be:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d005      	beq.n	80023d2 <HAL_RCC_OscConfig+0x16e>
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d10d      	bne.n	80023e8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d10a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	f7ff fc01 	bl	8001bd8 <LL_RCC_HSE_IsReady>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d039      	beq.n	8002450 <HAL_RCC_OscConfig+0x1ec>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d135      	bne.n	8002450 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e2c5      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d102      	bne.n	80023f8 <HAL_RCC_OscConfig+0x194>
 80023f2:	f7ff fbd3 	bl	8001b9c <LL_RCC_HSE_Enable>
 80023f6:	e001      	b.n	80023fc <HAL_RCC_OscConfig+0x198>
 80023f8:	f7ff fbdf 	bl	8001bba <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d012      	beq.n	800242a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fe7e 	bl	8001104 <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe fe7a 	bl	8001104 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e2aa      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800241e:	f7ff fbdb 	bl	8001bd8 <LL_RCC_HSE_IsReady>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f1      	beq.n	800240c <HAL_RCC_OscConfig+0x1a8>
 8002428:	e013      	b.n	8002452 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7fe fe6b 	bl	8001104 <HAL_GetTick>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002432:	f7fe fe67 	bl	8001104 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b64      	cmp	r3, #100	; 0x64
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e297      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002444:	f7ff fbc8 	bl	8001bd8 <LL_RCC_HSE_IsReady>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f1      	bne.n	8002432 <HAL_RCC_OscConfig+0x1ce>
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d051      	beq.n	8002502 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245e:	f7ff fd9c 	bl	8001f9a <LL_RCC_GetSysClkSource>
 8002462:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002464:	f7ff fe95 	bl	8002192 <LL_RCC_PLL_GetMainSource>
 8002468:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d005      	beq.n	800247c <HAL_RCC_OscConfig+0x218>
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d113      	bne.n	800249e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d110      	bne.n	800249e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247c:	f7ff fbdc 	bl	8001c38 <LL_RCC_HSI_IsReady>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x22e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e270      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fbe0 	bl	8001c5c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800249c:	e031      	b.n	8002502 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d019      	beq.n	80024da <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a6:	f7ff fba9 	bl	8001bfc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe fe2b 	bl	8001104 <HAL_GetTick>
 80024ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe fe27 	bl	8001104 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e257      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80024c4:	f7ff fbb8 	bl	8001c38 <LL_RCC_HSI_IsReady>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f1      	beq.n	80024b2 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fbc2 	bl	8001c5c <LL_RCC_HSI_SetCalibTrimming>
 80024d8:	e013      	b.n	8002502 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	f7ff fb9e 	bl	8001c1a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe fe11 	bl	8001104 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe fe0d 	bl	8001104 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e23d      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80024f8:	f7ff fb9e 	bl	8001c38 <LL_RCC_HSI_IsReady>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f1      	bne.n	80024e6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80a3 	beq.w	8002662 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d076      	beq.n	8002612 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	d046      	beq.n	80025be <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002530:	f7ff fc55 	bl	8001dde <LL_RCC_LSI1_IsReady>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d113      	bne.n	8002562 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800253a:	f7ff fc2e 	bl	8001d9a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800253e:	f7fe fde1 	bl	8001104 <HAL_GetTick>
 8002542:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002546:	f7fe fddd 	bl	8001104 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e20d      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002558:	f7ff fc41 	bl	8001dde <LL_RCC_LSI1_IsReady>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f1      	beq.n	8002546 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002562:	f7ff fc4e 	bl	8001e02 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe fdcd 	bl	8001104 <HAL_GetTick>
 800256a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800256e:	f7fe fdc9 	bl	8001104 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b03      	cmp	r3, #3
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e1f9      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002580:	f7ff fc61 	bl	8001e46 <LL_RCC_LSI2_IsReady>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f1      	beq.n	800256e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fc6b 	bl	8001e6a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002594:	f7ff fc12 	bl	8001dbc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fdb4 	bl	8001104 <HAL_GetTick>
 800259c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025a0:	f7fe fdb0 	bl	8001104 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1e0      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80025b2:	f7ff fc14 	bl	8001dde <LL_RCC_LSI1_IsReady>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f1      	bne.n	80025a0 <HAL_RCC_OscConfig+0x33c>
 80025bc:	e051      	b.n	8002662 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80025be:	f7ff fbec 	bl	8001d9a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fd9f 	bl	8001104 <HAL_GetTick>
 80025c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025ca:	f7fe fd9b 	bl	8001104 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e1cb      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025dc:	f7ff fbff 	bl	8001dde <LL_RCC_LSI1_IsReady>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f1      	beq.n	80025ca <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80025e6:	f7ff fc1d 	bl	8001e24 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025ea:	e00c      	b.n	8002606 <HAL_RCC_OscConfig+0x3a2>
 80025ec:	20000008 	.word	0x20000008
 80025f0:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025f4:	f7fe fd86 	bl	8001104 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1b6      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002606:	f7ff fc1e 	bl	8001e46 <LL_RCC_LSI2_IsReady>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1f1      	bne.n	80025f4 <HAL_RCC_OscConfig+0x390>
 8002610:	e027      	b.n	8002662 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002612:	f7ff fc07 	bl	8001e24 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fd75 	bl	8001104 <HAL_GetTick>
 800261a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800261e:	f7fe fd71 	bl	8001104 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b03      	cmp	r3, #3
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1a1      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002630:	f7ff fc09 	bl	8001e46 <LL_RCC_LSI2_IsReady>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f1      	bne.n	800261e <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800263a:	f7ff fbbf 	bl	8001dbc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f7fe fd61 	bl	8001104 <HAL_GetTick>
 8002642:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002646:	f7fe fd5d 	bl	8001104 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e18d      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002658:	f7ff fbc1 	bl	8001dde <LL_RCC_LSI1_IsReady>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f1      	bne.n	8002646 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d05b      	beq.n	8002726 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266e:	4bb5      	ldr	r3, [pc, #724]	; (8002944 <HAL_RCC_OscConfig+0x6e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d114      	bne.n	80026a4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800267a:	f7ff fa5f 	bl	8001b3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7fe fd41 	bl	8001104 <HAL_GetTick>
 8002682:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7fe fd3d 	bl	8001104 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e16d      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002698:	4baa      	ldr	r3, [pc, #680]	; (8002944 <HAL_RCC_OscConfig+0x6e0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d102      	bne.n	80026b2 <HAL_RCC_OscConfig+0x44e>
 80026ac:	f7ff fb1f 	bl	8001cee <LL_RCC_LSE_Enable>
 80026b0:	e00c      	b.n	80026cc <HAL_RCC_OscConfig+0x468>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d104      	bne.n	80026c4 <HAL_RCC_OscConfig+0x460>
 80026ba:	f7ff fb3a 	bl	8001d32 <LL_RCC_LSE_EnableBypass>
 80026be:	f7ff fb16 	bl	8001cee <LL_RCC_LSE_Enable>
 80026c2:	e003      	b.n	80026cc <HAL_RCC_OscConfig+0x468>
 80026c4:	f7ff fb24 	bl	8001d10 <LL_RCC_LSE_Disable>
 80026c8:	f7ff fb44 	bl	8001d54 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d014      	beq.n	80026fe <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fd16 	bl	8001104 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026da:	e00a      	b.n	80026f2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fd12 	bl	8001104 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e140      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80026f2:	f7ff fb40 	bl	8001d76 <LL_RCC_LSE_IsReady>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ef      	beq.n	80026dc <HAL_RCC_OscConfig+0x478>
 80026fc:	e013      	b.n	8002726 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7fe fd01 	bl	8001104 <HAL_GetTick>
 8002702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fcfd 	bl	8001104 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e12b      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 800271c:	f7ff fb2b 	bl	8001d76 <LL_RCC_LSE_IsReady>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ef      	bne.n	8002706 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d02c      	beq.n	800278c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	d014      	beq.n	8002764 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800273a:	f7ff faa4 	bl	8001c86 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fce1 	bl	8001104 <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002746:	f7fe fcdd 	bl	8001104 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e10d      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002758:	f7ff fab7 	bl	8001cca <LL_RCC_HSI48_IsReady>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f1      	beq.n	8002746 <HAL_RCC_OscConfig+0x4e2>
 8002762:	e013      	b.n	800278c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002764:	f7ff faa0 	bl	8001ca8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fccc 	bl	8001104 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002770:	f7fe fcc8 	bl	8001104 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0f8      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002782:	f7ff faa2 	bl	8001cca <LL_RCC_HSI48_IsReady>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f1      	bne.n	8002770 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80ee 	beq.w	8002972 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002796:	f7ff fc00 	bl	8001f9a <LL_RCC_GetSysClkSource>
 800279a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800279c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f040 80af 	bne.w	800290c <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0203 	and.w	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d123      	bne.n	8002804 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d11c      	bne.n	8002804 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d114      	bne.n	8002804 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d10d      	bne.n	8002804 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d05d      	beq.n	80028c0 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d058      	beq.n	80028bc <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0ab      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800281c:	f7ff fc73 	bl	8002106 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002820:	f7fe fc70 	bl	8001104 <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fc6c 	bl	8001104 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e09c      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ef      	bne.n	8002828 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <HAL_RCC_OscConfig+0x6e4>)
 8002850:	4013      	ands	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800285a:	4311      	orrs	r1, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002860:	0212      	lsls	r2, r2, #8
 8002862:	4311      	orrs	r1, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002868:	4311      	orrs	r1, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800286e:	4311      	orrs	r1, r2
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002874:	430a      	orrs	r2, r1
 8002876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287a:	4313      	orrs	r3, r2
 800287c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800287e:	f7ff fc33 	bl	80020e8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002892:	f7fe fc37 	bl	8001104 <HAL_GetTick>
 8002896:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289a:	f7fe fc33 	bl	8001104 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e063      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0ef      	beq.n	800289a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ba:	e05a      	b.n	8002972 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e059      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d151      	bne.n	8002972 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028ce:	f7ff fc0b 	bl	80020e8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028e2:	f7fe fc0f 	bl	8001104 <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe fc0b 	bl	8001104 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e03b      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0ef      	beq.n	80028ea <HAL_RCC_OscConfig+0x686>
 800290a:	e032      	b.n	8002972 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d02d      	beq.n	800296e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	f7ff fbf8 	bl	8002106 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002920:	f023 0303 	bic.w	r3, r3, #3
 8002924:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002930:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002938:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7fe fbe3 	bl	8001104 <HAL_GetTick>
 800293e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002940:	e00d      	b.n	800295e <HAL_RCC_OscConfig+0x6fa>
 8002942:	bf00      	nop
 8002944:	58000400 	.word	0x58000400
 8002948:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fbda 	bl	8001104 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e00a      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ef      	bne.n	800294c <HAL_RCC_OscConfig+0x6e8>
 800296c:	e001      	b.n	8002972 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3734      	adds	r7, #52	; 0x34
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}

0800297c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e12d      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b98      	ldr	r3, [pc, #608]	; (8002bf4 <HAL_RCC_ClockConfig+0x278>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d91b      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b95      	ldr	r3, [pc, #596]	; (8002bf4 <HAL_RCC_ClockConfig+0x278>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0207 	bic.w	r2, r3, #7
 80029a6:	4993      	ldr	r1, [pc, #588]	; (8002bf4 <HAL_RCC_ClockConfig+0x278>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ae:	f7fe fba9 	bl	8001104 <HAL_GetTick>
 80029b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029b6:	f7fe fba5 	bl	8001104 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e111      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c8:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <HAL_RCC_ClockConfig+0x278>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d1ef      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d016      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fae3 	bl	8001fb2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fb8a 	bl	8001104 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029f4:	f7fe fb86 	bl	8001104 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0f2      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a06:	f7ff fbd0 	bl	80021aa <LL_RCC_IsActiveFlag_HPRE>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f1      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d016      	beq.n	8002a4a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fada 	bl	8001fda <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a26:	f7fe fb6d 	bl	8001104 <HAL_GetTick>
 8002a2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a2e:	f7fe fb69 	bl	8001104 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0d5      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a40:	f7ff fbc5 	bl	80021ce <LL_RCC_IsActiveFlag_C2HPRE>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f1      	beq.n	8002a2e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d016      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff fad3 	bl	8002006 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a60:	f7fe fb50 	bl	8001104 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a68:	f7fe fb4c 	bl	8001104 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0b8      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a7a:	f7ff fbbb 	bl	80021f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f1      	beq.n	8002a68 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d016      	beq.n	8002abe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff facd 	bl	8002034 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a9a:	f7fe fb33 	bl	8001104 <HAL_GetTick>
 8002a9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002aa2:	f7fe fb2f 	bl	8001104 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e09b      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002ab4:	f7ff fbb1 	bl	800221a <LL_RCC_IsActiveFlag_PPRE1>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f1      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d017      	beq.n	8002afa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fac3 	bl	800205c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ad6:	f7fe fb15 	bl	8001104 <HAL_GetTick>
 8002ada:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ade:	f7fe fb11 	bl	8001104 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e07d      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002af0:	f7ff fba5 	bl	800223e <LL_RCC_IsActiveFlag_PPRE2>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f1      	beq.n	8002ade <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d043      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d106      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b0e:	f7ff f863 	bl	8001bd8 <LL_RCC_HSE_IsReady>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d11e      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e067      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d106      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b24:	f7ff fafe 	bl	8002124 <LL_RCC_PLL_IsReady>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d113      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e05c      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b3a:	f7ff f9cb 	bl	8001ed4 <LL_RCC_MSI_IsReady>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d108      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e051      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b48:	f7ff f876 	bl	8001c38 <LL_RCC_HSI_IsReady>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e04a      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fa09 	bl	8001f72 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b60:	f7fe fad0 	bl	8001104 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7fe facc 	bl	8001104 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e036      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	f7ff fa0c 	bl	8001f9a <LL_RCC_GetSysClkSource>
 8002b82:	4602      	mov	r2, r0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d1ec      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_ClockConfig+0x278>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d21b      	bcs.n	8002bd4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_RCC_ClockConfig+0x278>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 0207 	bic.w	r2, r3, #7
 8002ba4:	4913      	ldr	r1, [pc, #76]	; (8002bf4 <HAL_RCC_ClockConfig+0x278>)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fe faaa 	bl	8001104 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bb4:	f7fe faa6 	bl	8001104 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e012      	b.n	8002bec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x278>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d1ef      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bd4:	f000 f87c 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <HAL_RCC_ClockConfig+0x27c>)
 8002bdc:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002bde:	f7fe fa9d 	bl	800111c <HAL_GetTickPrio>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fa3f 	bl	8001068 <HAL_InitTick>
 8002bea:	4603      	mov	r3, r0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	58004000 	.word	0x58004000
 8002bf8:	20000008 	.word	0x20000008

08002bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c02:	f7ff f9ca 	bl	8001f9a <LL_RCC_GetSysClkSource>
 8002c06:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10a      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c0e:	f7ff f986 	bl	8001f1e <LL_RCC_MSI_GetRange>
 8002c12:	4603      	mov	r3, r0
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	e04a      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c2a:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	e044      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d10a      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c36:	f7fe ff9f 	bl	8001b78 <LL_RCC_HSE_IsEnabledDiv2>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e039      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e036      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c4c:	f7ff faa1 	bl	8002192 <LL_RCC_PLL_GetMainSource>
 8002c50:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d002      	beq.n	8002c5e <HAL_RCC_GetSysClockFreq+0x62>
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d003      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x68>
 8002c5c:	e00d      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c60:	60bb      	str	r3, [r7, #8]
        break;
 8002c62:	e015      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c64:	f7fe ff88 	bl	8001b78 <LL_RCC_HSE_IsEnabledDiv2>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d102      	bne.n	8002c74 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c70:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c72:	e00d      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002c74:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c76:	60bb      	str	r3, [r7, #8]
        break;
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c7a:	f7ff f950 	bl	8001f1e <LL_RCC_MSI_GetRange>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8c:	60bb      	str	r3, [r7, #8]
        break;
 8002c8e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002c90:	f7ff fa5a 	bl	8002148 <LL_RCC_PLL_GetN>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	fb03 f402 	mul.w	r4, r3, r2
 8002c9c:	f7ff fa6d 	bl	800217a <LL_RCC_PLL_GetDivider>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	fbb4 f4f3 	udiv	r4, r4, r3
 8002caa:	f7ff fa5a 	bl	8002162 <LL_RCC_PLL_GetR>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	0f5b      	lsrs	r3, r3, #29
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	fbb4 f3f3 	udiv	r3, r4, r3
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	08005b84 	.word	0x08005b84
 8002cc8:	00f42400 	.word	0x00f42400
 8002ccc:	01e84800 	.word	0x01e84800

08002cd0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd0:	b598      	push	{r3, r4, r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002cd4:	f7ff ff92 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8002cd8:	4604      	mov	r4, r0
 8002cda:	f7ff f9d3 	bl	8002084 <LL_RCC_GetAHBPrescaler>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	4a03      	ldr	r2, [pc, #12]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd98      	pop	{r3, r4, r7, pc}
 8002cf4:	08005b24 	.word	0x08005b24

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf8:	b598      	push	{r3, r4, r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cfc:	f7ff ffe8 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d00:	4604      	mov	r4, r0
 8002d02:	f7ff f9d9 	bl	80020b8 <LL_RCC_GetAPB1Prescaler>
 8002d06:	4603      	mov	r3, r0
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd98      	pop	{r3, r4, r7, pc}
 8002d20:	08005b64 	.word	0x08005b64

08002d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d24:	b598      	push	{r3, r4, r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d28:	f7ff ffd2 	bl	8002cd0 <HAL_RCC_GetHCLKFreq>
 8002d2c:	4604      	mov	r4, r0
 8002d2e:	f7ff f9cf 	bl	80020d0 <LL_RCC_GetAPB2Prescaler>
 8002d32:	4603      	mov	r3, r0
 8002d34:	0adb      	lsrs	r3, r3, #11
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd98      	pop	{r3, r4, r7, pc}
 8002d4c:	08005b64 	.word	0x08005b64

08002d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2bb0      	cmp	r3, #176	; 0xb0
 8002d5c:	d903      	bls.n	8002d66 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e007      	b.n	8002d76 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d76:	f7ff f991 	bl	800209c <LL_RCC_GetAHB4Prescaler>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	0c9c      	lsrs	r4, r3, #18
 8002d9a:	f7fe fedf 	bl	8001b5c <HAL_PWREx_GetVoltageRange>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4619      	mov	r1, r3
 8002da2:	4620      	mov	r0, r4
 8002da4:	f000 f80c 	bl	8002dc0 <RCC_SetFlashLatency>
 8002da8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}
 8002db2:	bf00      	nop
 8002db4:	08005b84 	.word	0x08005b84
 8002db8:	08005b24 	.word	0x08005b24
 8002dbc:	431bde83 	.word	0x431bde83

08002dc0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b093      	sub	sp, #76	; 0x4c
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <RCC_SetFlashLatency+0xf0>)
 8002dcc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002dd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002dd6:	4a37      	ldr	r2, [pc, #220]	; (8002eb4 <RCC_SetFlashLatency+0xf4>)
 8002dd8:	f107 031c 	add.w	r3, r7, #28
 8002ddc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002de2:	4b35      	ldr	r3, [pc, #212]	; (8002eb8 <RCC_SetFlashLatency+0xf8>)
 8002de4:	f107 040c 	add.w	r4, r7, #12
 8002de8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002dee:	2300      	movs	r3, #0
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df8:	d11c      	bne.n	8002e34 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfe:	e015      	b.n	8002e2c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e08:	4413      	add	r3, r2
 8002e0a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d808      	bhi.n	8002e26 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e22:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e24:	e022      	b.n	8002e6c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e28:	3301      	adds	r3, #1
 8002e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d9e6      	bls.n	8002e00 <RCC_SetFlashLatency+0x40>
 8002e32:	e01b      	b.n	8002e6c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e38:	e015      	b.n	8002e66 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e42:	4413      	add	r3, r2
 8002e44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d808      	bhi.n	8002e60 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e56:	4413      	add	r3, r2
 8002e58:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e5c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e5e:	e005      	b.n	8002e6c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e62:	3301      	adds	r3, #1
 8002e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d9e6      	bls.n	8002e3a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002e6c:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <RCC_SetFlashLatency+0xfc>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f023 0207 	bic.w	r2, r3, #7
 8002e74:	4911      	ldr	r1, [pc, #68]	; (8002ebc <RCC_SetFlashLatency+0xfc>)
 8002e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e7c:	f7fe f942 	bl	8001104 <HAL_GetTick>
 8002e80:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e82:	e008      	b.n	8002e96 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e84:	f7fe f93e 	bl	8001104 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e007      	b.n	8002ea6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <RCC_SetFlashLatency+0xfc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1ef      	bne.n	8002e84 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	374c      	adds	r7, #76	; 0x4c
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd90      	pop	{r4, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08005ad8 	.word	0x08005ad8
 8002eb4:	08005ae8 	.word	0x08005ae8
 8002eb8:	08005af4 	.word	0x08005af4
 8002ebc:	58004000 	.word	0x58004000

08002ec0 <LL_RCC_LSE_IsEnabled>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <LL_RCC_LSE_IsEnabled+0x18>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <LL_RCC_LSE_IsEnabled+0x1a>
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <LL_RCC_LSE_IsReady>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d101      	bne.n	8002efc <LL_RCC_LSE_IsReady+0x18>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <LL_RCC_LSE_IsReady+0x1a>
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_MSI_EnablePLLMode>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6013      	str	r3, [r2, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_SetRFWKPClockSource>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_SetSMPSClockSource>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f023 0203 	bic.w	r2, r3, #3
 8002f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_SetSMPSPrescaler>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_SetUSARTClockSource>:
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f023 0203 	bic.w	r2, r3, #3
 8002fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_RCC_SetLPUARTClockSource>:
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_SetI2CClockSource>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003012:	43db      	mvns	r3, r3
 8003014:	401a      	ands	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800301e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_RCC_SetLPTIMClockSource>:
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	43db      	mvns	r3, r3
 800304c:	401a      	ands	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_RCC_SetSAIClockSource>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003078:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800307c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_RCC_SetRNGClockSource>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80030a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_SetCLK48ClockSource>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_RCC_SetUSBClockSource>:
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ffe3 	bl	80030c0 <LL_RCC_SetCLK48ClockSource>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <LL_RCC_SetADCClockSource>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_RCC_SetRTCClockSource>:
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_RCC_GetRTCClockSource>:
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_RCC_ForceBackupDomainReset>:
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800319a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_PLLSAI1_Enable>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_RCC_PLLSAI1_Disable>:
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031e8:	6013      	str	r3, [r2, #0]
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_RCC_PLLSAI1_IsReady>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003206:	d101      	bne.n	800320c <LL_RCC_PLLSAI1_IsReady+0x18>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003220:	2300      	movs	r3, #0
 8003222:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003224:	2300      	movs	r3, #0
 8003226:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d033      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800323c:	d00c      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800323e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003242:	d802      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d010      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003248:	e017      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800324a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800324e:	d017      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003250:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003254:	d016      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003256:	e010      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003266:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003268:	e00d      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f94d 	bl	800350e <RCCEx_PLLSAI1_ConfigNP>
 8003274:	4603      	mov	r3, r0
 8003276:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003278:	e005      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	77fb      	strb	r3, [r7, #31]
        break;
 800327e:	e002      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003280:	bf00      	nop
 8003282:	e000      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003286:	7ffb      	ldrb	r3, [r7, #31]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d105      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fee9 	bl	8003068 <LL_RCC_SetSAIClockSource>
 8003296:	e001      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d046      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80032a8:	f7ff ff57 	bl	800315a <LL_RCC_GetRTCClockSource>
 80032ac:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d03c      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80032b8:	f7fe fc40 	bl	8001b3c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ff31 	bl	800312e <LL_RCC_SetRTCClockSource>
 80032cc:	e02e      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80032d8:	f7ff ff4c 	bl	8003174 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80032dc:	f7ff ff5b 	bl	8003196 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80032ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80032f8:	f7ff fde2 	bl	8002ec0 <LL_RCC_LSE_IsEnabled>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d114      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003302:	f7fd feff 	bl	8001104 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003308:	e00b      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fd fefb 	bl	8001104 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d902      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	77fb      	strb	r3, [r7, #31]
              break;
 8003320:	e004      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003322:	f7ff fddf 	bl	8002ee4 <LL_RCC_LSE_IsReady>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d1ee      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800332c:	7ffb      	ldrb	r3, [r7, #31]
 800332e:	77bb      	strb	r3, [r7, #30]
 8003330:	e001      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003332:	7ffb      	ldrb	r3, [r7, #31]
 8003334:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fe2b 	bl	8002fa2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d004      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fe36 	bl	8002fce <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fe5e 	bl	8003034 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fe53 	bl	8003034 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d004      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe2b 	bl	8002ffa <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fe20 	bl	8002ffa <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d022      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7ff fe8e 	bl	80030ec <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d8:	d107      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f2:	d10b      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f8e3 	bl	80035c4 <RCCEx_PLLSAI1_ConfigNQ>
 80033fe:	4603      	mov	r3, r0
 8003400:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003402:	7ffb      	ldrb	r3, [r7, #31]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8003408:	7ffb      	ldrb	r3, [r7, #31]
 800340a:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003414:	2b00      	cmp	r3, #0
 8003416:	d02b      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d008      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800342a:	d003      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fe2b 	bl	8003094 <LL_RCC_SetRNGClockSource>
 800343e:	e00a      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	2000      	movs	r0, #0
 800344c:	f7ff fe22 	bl	8003094 <LL_RCC_SetRNGClockSource>
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff fe35 	bl	80030c0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800345e:	d107      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	2b00      	cmp	r3, #0
 800347a:	d022      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fe3e 	bl	8003102 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348e:	d107      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800349a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034a8:	d10b      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f8e3 	bl	800367a <RCCEx_PLLSAI1_ConfigNR>
 80034b4:	4603      	mov	r3, r0
 80034b6:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80034b8:	7ffb      	ldrb	r3, [r7, #31]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 80034be:	7ffb      	ldrb	r3, [r7, #31]
 80034c0:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d004      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fd27 	bl	8002f26 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d009      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fd46 	bl	8002f7a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7ff fd2d 	bl	8002f52 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80034f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3720      	adds	r7, #32
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003506:	f7ff fcff 	bl	8002f08 <LL_RCC_MSI_EnablePLLMode>
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}

0800350e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800351a:	f7ff fe5c 	bl	80031d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800351e:	f7fd fdf1 	bl	8001104 <HAL_GetTick>
 8003522:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003524:	e009      	b.n	800353a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003526:	f7fd fded 	bl	8001104 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d902      	bls.n	800353a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	73fb      	strb	r3, [r7, #15]
      break;
 8003538:	e004      	b.n	8003544 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800353a:	f7ff fe5b 	bl	80031f4 <LL_RCC_PLLSAI1_IsReady>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d137      	bne.n	80035ba <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	021b      	lsls	r3, r3, #8
 800355a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800355e:	4313      	orrs	r3, r2
 8003560:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003574:	4313      	orrs	r3, r2
 8003576:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003578:	f7ff fe1e 	bl	80031b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800357c:	f7fd fdc2 	bl	8001104 <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003582:	e009      	b.n	8003598 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003584:	f7fd fdbe 	bl	8001104 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	73fb      	strb	r3, [r7, #15]
        break;
 8003596:	e004      	b.n	80035a2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003598:	f7ff fe2c 	bl	80031f4 <LL_RCC_PLLSAI1_IsReady>
 800359c:	4603      	mov	r3, r0
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d1f0      	bne.n	8003584 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d108      	bne.n	80035ba <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b6:	4313      	orrs	r3, r2
 80035b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035d0:	f7ff fe01 	bl	80031d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80035d4:	f7fd fd96 	bl	8001104 <HAL_GetTick>
 80035d8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035da:	e009      	b.n	80035f0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035dc:	f7fd fd92 	bl	8001104 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d902      	bls.n	80035f0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	73fb      	strb	r3, [r7, #15]
      break;
 80035ee:	e004      	b.n	80035fa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80035f0:	f7ff fe00 	bl	80031f4 <LL_RCC_PLLSAI1_IsReady>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d137      	bne.n	8003670 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003614:	4313      	orrs	r3, r2
 8003616:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362a:	4313      	orrs	r3, r2
 800362c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800362e:	f7ff fdc3 	bl	80031b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003632:	f7fd fd67 	bl	8001104 <HAL_GetTick>
 8003636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003638:	e009      	b.n	800364e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800363a:	f7fd fd63 	bl	8001104 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d902      	bls.n	800364e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	73fb      	strb	r3, [r7, #15]
        break;
 800364c:	e004      	b.n	8003658 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800364e:	f7ff fdd1 	bl	80031f4 <LL_RCC_PLLSAI1_IsReady>
 8003652:	4603      	mov	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d1f0      	bne.n	800363a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800365e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800366c:	4313      	orrs	r3, r2
 800366e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003686:	f7ff fda6 	bl	80031d6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800368a:	f7fd fd3b 	bl	8001104 <HAL_GetTick>
 800368e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003690:	e009      	b.n	80036a6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003692:	f7fd fd37 	bl	8001104 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d902      	bls.n	80036a6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e004      	b.n	80036b0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036a6:	f7ff fda5 	bl	80031f4 <LL_RCC_PLLSAI1_IsReady>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f0      	bne.n	8003692 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d137      	bne.n	8003726 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036ca:	4313      	orrs	r3, r2
 80036cc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80036ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036e0:	4313      	orrs	r3, r2
 80036e2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80036e4:	f7ff fd68 	bl	80031b8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036e8:	f7fd fd0c 	bl	8001104 <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036ee:	e009      	b.n	8003704 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036f0:	f7fd fd08 	bl	8001104 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d902      	bls.n	8003704 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	73fb      	strb	r3, [r7, #15]
        break;
 8003702:	e004      	b.n	800370e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003704:	f7ff fd76 	bl	80031f4 <LL_RCC_PLLSAI1_IsReady>
 8003708:	4603      	mov	r3, r0
 800370a:	2b01      	cmp	r3, #1
 800370c:	d1f0      	bne.n	80036f0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d108      	bne.n	8003726 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003722:	4313      	orrs	r3, r2
 8003724:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e049      	b.n	80037d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd fb2a 	bl	8000db0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f000 fabe 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d001      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e036      	b.n	8003866 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <HAL_TIM_Base_Start_IT+0x94>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_TIM_Base_Start_IT+0x44>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d115      	bne.n	8003850 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <HAL_TIM_Base_Start_IT+0x98>)
 800382c:	4013      	ands	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b06      	cmp	r3, #6
 8003834:	d015      	beq.n	8003862 <HAL_TIM_Base_Start_IT+0x82>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800383c:	d011      	beq.n	8003862 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f042 0201 	orr.w	r2, r2, #1
 800384c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	e008      	b.n	8003862 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	e000      	b.n	8003864 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40012c00 	.word	0x40012c00
 8003878:	00010007 	.word	0x00010007

0800387c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a1a      	ldr	r2, [r3, #32]
 800389a:	f241 1311 	movw	r3, #4369	; 0x1111
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10f      	bne.n	80038c4 <HAL_TIM_Base_Stop_IT+0x48>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6a1a      	ldr	r2, [r3, #32]
 80038aa:	f240 4344 	movw	r3, #1092	; 0x444
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d107      	bne.n	80038c4 <HAL_TIM_Base_Stop_IT+0x48>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d122      	bne.n	8003936 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d11b      	bne.n	8003936 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0202 	mvn.w	r2, #2
 8003906:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f9c8 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003922:	e005      	b.n	8003930 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f9ba 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9cb 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b04      	cmp	r3, #4
 8003942:	d122      	bne.n	800398a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b04      	cmp	r3, #4
 8003950:	d11b      	bne.n	800398a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0204 	mvn.w	r2, #4
 800395a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f99e 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003976:	e005      	b.n	8003984 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f990 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f9a1 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b08      	cmp	r3, #8
 8003996:	d122      	bne.n	80039de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d11b      	bne.n	80039de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f06f 0208 	mvn.w	r2, #8
 80039ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2204      	movs	r2, #4
 80039b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f974 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 80039ca:	e005      	b.n	80039d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f966 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f977 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d122      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d11b      	bne.n	8003a32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0210 	mvn.w	r2, #16
 8003a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2208      	movs	r2, #8
 8003a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f94a 	bl	8003cb2 <HAL_TIM_IC_CaptureCallback>
 8003a1e:	e005      	b.n	8003a2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f93c 	bl	8003c9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f94d 	bl	8003cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10e      	bne.n	8003a5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f06f 0201 	mvn.w	r2, #1
 8003a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f916 	bl	8003c8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d10e      	bne.n	8003a8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	d107      	bne.n	8003a8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fb2d 	bl	80040e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b80      	cmp	r3, #128	; 0x80
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fb20 	bl	80040f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8fb 	bl	8003cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0220 	mvn.w	r2, #32
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fae0 	bl	80040d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIM_ConfigClockSource+0x18>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e0a8      	b.n	8003c82 <HAL_TIM_ConfigClockSource+0x16a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003b4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d067      	beq.n	8003c3c <HAL_TIM_ConfigClockSource+0x124>
 8003b6c:	2b40      	cmp	r3, #64	; 0x40
 8003b6e:	d80b      	bhi.n	8003b88 <HAL_TIM_ConfigClockSource+0x70>
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d073      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0x144>
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d802      	bhi.n	8003b7e <HAL_TIM_ConfigClockSource+0x66>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d06f      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b7c:	e078      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d06c      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0x144>
 8003b82:	2b30      	cmp	r3, #48	; 0x30
 8003b84:	d06a      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003b86:	e073      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b88:	2b70      	cmp	r3, #112	; 0x70
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_TIM_ConfigClockSource+0x90>
 8003b8c:	2b70      	cmp	r3, #112	; 0x70
 8003b8e:	d804      	bhi.n	8003b9a <HAL_TIM_ConfigClockSource+0x82>
 8003b90:	2b50      	cmp	r3, #80	; 0x50
 8003b92:	d033      	beq.n	8003bfc <HAL_TIM_ConfigClockSource+0xe4>
 8003b94:	2b60      	cmp	r3, #96	; 0x60
 8003b96:	d041      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003b98:	e06a      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d066      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x156>
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba4:	d017      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003ba6:	e063      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6899      	ldr	r1, [r3, #8]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f000 f97a 	bl	8003eb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	609a      	str	r2, [r3, #8]
      break;
 8003bd4:	e04c      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6899      	ldr	r1, [r3, #8]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f000 f963 	bl	8003eb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf8:	609a      	str	r2, [r3, #8]
      break;
 8003bfa:	e039      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f000 f8d5 	bl	8003db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2150      	movs	r1, #80	; 0x50
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f92e 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 8003c1a:	e029      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f000 f8f4 	bl	8003e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2160      	movs	r1, #96	; 0x60
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 f91e 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 8003c3a:	e019      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f000 f8b5 	bl	8003db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 f90e 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 8003c5a:	e009      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f000 f905 	bl	8003e76 <TIM_ITRx_SetConfig>
        break;
 8003c6c:	e000      	b.n	8003c70 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003c6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a2a      	ldr	r2, [pc, #168]	; (8003dac <TIM_Base_SetConfig+0xbc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0x20>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d108      	bne.n	8003d22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a21      	ldr	r2, [pc, #132]	; (8003dac <TIM_Base_SetConfig+0xbc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0x52>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0x52>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <TIM_Base_SetConfig+0xc0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0x52>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <TIM_Base_SetConfig+0xc4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0c      	ldr	r2, [pc, #48]	; (8003dac <TIM_Base_SetConfig+0xbc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_Base_SetConfig+0xa0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <TIM_Base_SetConfig+0xc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_Base_SetConfig+0xa0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <TIM_Base_SetConfig+0xc4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d103      	bne.n	8003d98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	615a      	str	r2, [r3, #20]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	40014400 	.word	0x40014400
 8003db4:	40014800 	.word	0x40014800

08003db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f023 0201 	bic.w	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f023 030a 	bic.w	r3, r3, #10
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	621a      	str	r2, [r3, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b087      	sub	sp, #28
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0210 	bic.w	r2, r3, #16
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	031b      	lsls	r3, r3, #12
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f043 0307 	orr.w	r3, r3, #7
 8003e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	609a      	str	r2, [r3, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e04a      	b.n	8003f9e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2202      	movs	r2, #2
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d108      	bne.n	8003f44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f70:	d10c      	bne.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00

08003fb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e078      	b.n	80040be <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a20      	ldr	r2, [pc, #128]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d106      	bne.n	800405e <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1a      	ldr	r2, [pc, #104]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d121      	bne.n	80040ac <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	051b      	lsls	r3, r3, #20
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0c      	ldr	r2, [pc, #48]	; (80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d106      	bne.n	80040ac <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00

080040d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_RCC_GetUSARTClockSource>:
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004118:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4013      	ands	r3, r2
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_RCC_GetLPUARTClockSource>:
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004138:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4013      	ands	r3, r2
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e042      	b.n	80041e4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fc fd8d 	bl	8000c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2224      	movs	r2, #36	; 0x24
 800417a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fb56 	bl	8004840 <UART_SetConfig>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e022      	b.n	80041e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fd58 	bl	8004c5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fddf 	bl	8004da0 <UART_CheckIdleState>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e02b      	b.n	8004256 <HAL_UART_DeInit+0x6a>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2224      	movs	r2, #36	; 0x24
 8004202:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc fd8e 	bl	8000d50 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->gState = HAL_UART_STATE_RESET;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_RESET;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004274:	2b20      	cmp	r3, #32
 8004276:	d168      	bne.n	800434a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_UART_Transmit_IT+0x24>
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e061      	b.n	800434c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_UART_Transmit_IT+0x36>
 8004292:	2302      	movs	r3, #2
 8004294:	e05a      	b.n	800434c <HAL_UART_Transmit_IT+0xec>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	88fa      	ldrh	r2, [r7, #6]
 80042a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2221      	movs	r2, #33	; 0x21
 80042c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d2:	d11c      	bne.n	800430e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042dc:	d107      	bne.n	80042ee <HAL_UART_Transmit_IT+0x8e>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_UART_Transmit_IT+0xf8>)
 80042ea:	671a      	str	r2, [r3, #112]	; 0x70
 80042ec:	e002      	b.n	80042f4 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a1a      	ldr	r2, [pc, #104]	; (800435c <HAL_UART_Transmit_IT+0xfc>)
 80042f2:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800430a:	609a      	str	r2, [r3, #8]
 800430c:	e01b      	b.n	8004346 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d107      	bne.n	8004328 <HAL_UART_Transmit_IT+0xc8>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4a0f      	ldr	r2, [pc, #60]	; (8004360 <HAL_UART_Transmit_IT+0x100>)
 8004324:	671a      	str	r2, [r3, #112]	; 0x70
 8004326:	e002      	b.n	800432e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <HAL_UART_Transmit_IT+0x104>)
 800432c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004344:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e000      	b.n	800434c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	0800512f 	.word	0x0800512f
 800435c:	08005095 	.word	0x08005095
 8004360:	08005017 	.word	0x08005017
 8004364:	08004fa3 	.word	0x08004fa3

08004368 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800437c:	2b20      	cmp	r3, #32
 800437e:	f040 80bc 	bne.w	80044fa <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_UART_Receive_IT+0x26>
 8004388:	88fb      	ldrh	r3, [r7, #6]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e0b4      	b.n	80044fc <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_UART_Receive_IT+0x38>
 800439c:	2302      	movs	r3, #2
 800439e:	e0ad      	b.n	80044fc <HAL_UART_Receive_IT+0x194>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	88fa      	ldrh	r2, [r7, #6]
 80043b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	88fa      	ldrh	r2, [r7, #6]
 80043ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d10e      	bne.n	80043ec <HAL_UART_Receive_IT+0x84>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <HAL_UART_Receive_IT+0x7a>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043e0:	e02d      	b.n	800443e <HAL_UART_Receive_IT+0xd6>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	22ff      	movs	r2, #255	; 0xff
 80043e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80043ea:	e028      	b.n	800443e <HAL_UART_Receive_IT+0xd6>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10d      	bne.n	8004410 <HAL_UART_Receive_IT+0xa8>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <HAL_UART_Receive_IT+0x9e>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	22ff      	movs	r2, #255	; 0xff
 8004400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004404:	e01b      	b.n	800443e <HAL_UART_Receive_IT+0xd6>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	227f      	movs	r2, #127	; 0x7f
 800440a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800440e:	e016      	b.n	800443e <HAL_UART_Receive_IT+0xd6>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004418:	d10d      	bne.n	8004436 <HAL_UART_Receive_IT+0xce>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d104      	bne.n	800442c <HAL_UART_Receive_IT+0xc4>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	227f      	movs	r2, #127	; 0x7f
 8004426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800442a:	e008      	b.n	800443e <HAL_UART_Receive_IT+0xd6>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	223f      	movs	r2, #63	; 0x3f
 8004430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004434:	e003      	b.n	800443e <HAL_UART_Receive_IT+0xd6>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2222      	movs	r2, #34	; 0x22
 800444a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0201 	orr.w	r2, r2, #1
 800445c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004466:	d12a      	bne.n	80044be <HAL_UART_Receive_IT+0x156>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	429a      	cmp	r2, r3
 8004472:	d324      	bcc.n	80044be <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447c:	d107      	bne.n	800448e <HAL_UART_Receive_IT+0x126>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_UART_Receive_IT+0x1a0>)
 800448a:	66da      	str	r2, [r3, #108]	; 0x6c
 800448c:	e002      	b.n	8004494 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a1e      	ldr	r2, [pc, #120]	; (800450c <HAL_UART_Receive_IT+0x1a4>)
 8004492:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044aa:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	e01b      	b.n	80044f6 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c6:	d107      	bne.n	80044d8 <HAL_UART_Receive_IT+0x170>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d103      	bne.n	80044d8 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <HAL_UART_Receive_IT+0x1a8>)
 80044d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80044d6:	e002      	b.n	80044de <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a0e      	ldr	r2, [pc, #56]	; (8004514 <HAL_UART_Receive_IT+0x1ac>)
 80044dc:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80044f4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e000      	b.n	80044fc <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
  }
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	08005465 	.word	0x08005465
 800450c:	0800535d 	.word	0x0800535d
 8004510:	080052b1 	.word	0x080052b1
 8004514:	08005207 	.word	0x08005207

08004518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	f640 030f 	movw	r3, #2063	; 0x80f
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d118      	bne.n	800457a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d013      	beq.n	800457a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d104      	bne.n	8004566 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8145 	beq.w	80047fa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
      }
      return;
 8004578:	e13f      	b.n	80047fa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80e8 	beq.w	8004752 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4ba1      	ldr	r3, [pc, #644]	; (800480c <HAL_UART_IRQHandler+0x2f4>)
 8004586:	4013      	ands	r3, r2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4ba0      	ldr	r3, [pc, #640]	; (8004810 <HAL_UART_IRQHandler+0x2f8>)
 8004590:	4013      	ands	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 80dd 	beq.w	8004752 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_UART_IRQHandler+0xac>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00b      	beq.n	80045c4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2201      	movs	r2, #1
 80045b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f043 0201 	orr.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <HAL_UART_IRQHandler+0xd8>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2202      	movs	r2, #2
 80045de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f043 0204 	orr.w	r2, r3, #4
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d010      	beq.n	800461c <HAL_UART_IRQHandler+0x104>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2204      	movs	r2, #4
 800460a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d015      	beq.n	8004652 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4b76      	ldr	r3, [pc, #472]	; (800480c <HAL_UART_IRQHandler+0x2f4>)
 8004634:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00b      	beq.n	8004652 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2208      	movs	r2, #8
 8004640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f043 0208 	orr.w	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004658:	2b00      	cmp	r3, #0
 800465a:	d011      	beq.n	8004680 <HAL_UART_IRQHandler+0x168>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800466e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	f043 0220 	orr.w	r2, r3, #32
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80b9 	beq.w	80047fe <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d011      	beq.n	80046ba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d104      	bne.n	80046aa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046cc:	2b40      	cmp	r3, #64	; 0x40
 80046ce:	d004      	beq.n	80046da <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d031      	beq.n	800473e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fc28 	bl	8004f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b40      	cmp	r3, #64	; 0x40
 80046ec:	d123      	bne.n	8004736 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046fc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004702:	2b00      	cmp	r3, #0
 8004704:	d013      	beq.n	800472e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470a:	4a42      	ldr	r2, [pc, #264]	; (8004814 <HAL_UART_IRQHandler+0x2fc>)
 800470c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004712:	4618      	mov	r0, r3
 8004714:	f7fc fe4d 	bl	80013b2 <HAL_DMA_Abort_IT>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d017      	beq.n	800474e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004728:	4610      	mov	r0, r2
 800472a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472c:	e00f      	b.n	800474e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f87c 	bl	800482c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004734:	e00b      	b.n	800474e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f878 	bl	800482c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473c:	e007      	b.n	800474e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f874 	bl	800482c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800474c:	e057      	b.n	80047fe <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800474e:	bf00      	nop
    return;
 8004750:	e055      	b.n	80047fe <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <HAL_UART_IRQHandler+0x260>
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d008      	beq.n	8004778 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800476e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fefb 	bl	800556c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004776:	e045      	b.n	8004804 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	d012      	beq.n	80047a8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	2b00      	cmp	r3, #0
 800479c:	d031      	beq.n	8004802 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
    }
    return;
 80047a6:	e02c      	b.n	8004802 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_UART_IRQHandler+0x2ac>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fd08 	bl	80051d2 <UART_EndTransmit_IT>
    return;
 80047c2:	e01f      	b.n	8004804 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d008      	beq.n	80047e0 <HAL_UART_IRQHandler+0x2c8>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fedb 	bl	8005594 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047de:	e011      	b.n	8004804 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_UART_IRQHandler+0x2ec>
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	da09      	bge.n	8004804 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fec5 	bl	8005580 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047f6:	bf00      	nop
 80047f8:	e004      	b.n	8004804 <HAL_UART_IRQHandler+0x2ec>
      return;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <HAL_UART_IRQHandler+0x2ec>
    return;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_UART_IRQHandler+0x2ec>
    return;
 8004802:	bf00      	nop
  }
}
 8004804:	3720      	adds	r7, #32
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	10000001 	.word	0x10000001
 8004810:	04000120 	.word	0x04000120
 8004814:	08004f77 	.word	0x08004f77

08004818 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004840:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004844:	b088      	sub	sp, #32
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4313      	orrs	r3, r2
 8004864:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	4313      	orrs	r3, r2
 800486e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4ba4      	ldr	r3, [pc, #656]	; (8004b08 <UART_SetConfig+0x2c8>)
 8004878:	4013      	ands	r3, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	69f9      	ldr	r1, [r7, #28]
 8004880:	430b      	orrs	r3, r1
 8004882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a99      	ldr	r2, [pc, #612]	; (8004b0c <UART_SetConfig+0x2cc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	69fa      	ldr	r2, [r7, #28]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6812      	ldr	r2, [r2, #0]
 80048c6:	69f9      	ldr	r1, [r7, #28]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	f023 010f 	bic.w	r1, r3, #15
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a8a      	ldr	r2, [pc, #552]	; (8004b10 <UART_SetConfig+0x2d0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d121      	bne.n	8004930 <UART_SetConfig+0xf0>
 80048ec:	2003      	movs	r0, #3
 80048ee:	f7ff fc0d 	bl	800410c <LL_RCC_GetUSARTClockSource>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d817      	bhi.n	8004928 <UART_SetConfig+0xe8>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0xc0>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004911 	.word	0x08004911
 8004904:	0800491d 	.word	0x0800491d
 8004908:	08004917 	.word	0x08004917
 800490c:	08004923 	.word	0x08004923
 8004910:	2301      	movs	r3, #1
 8004912:	76fb      	strb	r3, [r7, #27]
 8004914:	e038      	b.n	8004988 <UART_SetConfig+0x148>
 8004916:	2302      	movs	r3, #2
 8004918:	76fb      	strb	r3, [r7, #27]
 800491a:	e035      	b.n	8004988 <UART_SetConfig+0x148>
 800491c:	2304      	movs	r3, #4
 800491e:	76fb      	strb	r3, [r7, #27]
 8004920:	e032      	b.n	8004988 <UART_SetConfig+0x148>
 8004922:	2308      	movs	r3, #8
 8004924:	76fb      	strb	r3, [r7, #27]
 8004926:	e02f      	b.n	8004988 <UART_SetConfig+0x148>
 8004928:	2310      	movs	r3, #16
 800492a:	76fb      	strb	r3, [r7, #27]
 800492c:	bf00      	nop
 800492e:	e02b      	b.n	8004988 <UART_SetConfig+0x148>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a75      	ldr	r2, [pc, #468]	; (8004b0c <UART_SetConfig+0x2cc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d124      	bne.n	8004984 <UART_SetConfig+0x144>
 800493a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800493e:	f7ff fbf5 	bl	800412c <LL_RCC_GetLPUARTClockSource>
 8004942:	4603      	mov	r3, r0
 8004944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004948:	d012      	beq.n	8004970 <UART_SetConfig+0x130>
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494e:	d802      	bhi.n	8004956 <UART_SetConfig+0x116>
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <UART_SetConfig+0x124>
 8004954:	e012      	b.n	800497c <UART_SetConfig+0x13c>
 8004956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495a:	d006      	beq.n	800496a <UART_SetConfig+0x12a>
 800495c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004960:	d009      	beq.n	8004976 <UART_SetConfig+0x136>
 8004962:	e00b      	b.n	800497c <UART_SetConfig+0x13c>
 8004964:	2300      	movs	r3, #0
 8004966:	76fb      	strb	r3, [r7, #27]
 8004968:	e00e      	b.n	8004988 <UART_SetConfig+0x148>
 800496a:	2302      	movs	r3, #2
 800496c:	76fb      	strb	r3, [r7, #27]
 800496e:	e00b      	b.n	8004988 <UART_SetConfig+0x148>
 8004970:	2304      	movs	r3, #4
 8004972:	76fb      	strb	r3, [r7, #27]
 8004974:	e008      	b.n	8004988 <UART_SetConfig+0x148>
 8004976:	2308      	movs	r3, #8
 8004978:	76fb      	strb	r3, [r7, #27]
 800497a:	e005      	b.n	8004988 <UART_SetConfig+0x148>
 800497c:	2310      	movs	r3, #16
 800497e:	76fb      	strb	r3, [r7, #27]
 8004980:	bf00      	nop
 8004982:	e001      	b.n	8004988 <UART_SetConfig+0x148>
 8004984:	2310      	movs	r3, #16
 8004986:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a5f      	ldr	r2, [pc, #380]	; (8004b0c <UART_SetConfig+0x2cc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	f040 808e 	bne.w	8004ab0 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004994:	7efb      	ldrb	r3, [r7, #27]
 8004996:	2b08      	cmp	r3, #8
 8004998:	d823      	bhi.n	80049e2 <UART_SetConfig+0x1a2>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0x160>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049d3 	.word	0x080049d3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049e3 	.word	0x080049e3
 80049bc:	080049e3 	.word	0x080049e3
 80049c0:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7fe f998 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 80049c8:	6178      	str	r0, [r7, #20]
        break;
 80049ca:	e00f      	b.n	80049ec <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b51      	ldr	r3, [pc, #324]	; (8004b14 <UART_SetConfig+0x2d4>)
 80049ce:	617b      	str	r3, [r7, #20]
        break;
 80049d0:	e00c      	b.n	80049ec <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7fe f913 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 80049d6:	6178      	str	r0, [r7, #20]
        break;
 80049d8:	e008      	b.n	80049ec <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	617b      	str	r3, [r7, #20]
        break;
 80049e0:	e004      	b.n	80049ec <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	76bb      	strb	r3, [r7, #26]
        break;
 80049ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 811c 	beq.w	8004c2c <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	4a47      	ldr	r2, [pc, #284]	; (8004b18 <UART_SetConfig+0x2d8>)
 80049fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049fe:	461a      	mov	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4413      	add	r3, r2
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d305      	bcc.n	8004a24 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d902      	bls.n	8004a2a <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	76bb      	strb	r3, [r7, #26]
 8004a28:	e100      	b.n	8004c2c <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f04f 0100 	mov.w	r1, #0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	4a38      	ldr	r2, [pc, #224]	; (8004b18 <UART_SetConfig+0x2d8>)
 8004a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f04f 0400 	mov.w	r4, #0
 8004a42:	461a      	mov	r2, r3
 8004a44:	4623      	mov	r3, r4
 8004a46:	f7fb fba1 	bl	800018c <__aeabi_uldivmod>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4622      	mov	r2, r4
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	f04f 0400 	mov.w	r4, #0
 8004a5a:	0214      	lsls	r4, r2, #8
 8004a5c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a60:	020b      	lsls	r3, r1, #8
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	6852      	ldr	r2, [r2, #4]
 8004a66:	0852      	lsrs	r2, r2, #1
 8004a68:	4611      	mov	r1, r2
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	eb13 0b01 	adds.w	fp, r3, r1
 8004a72:	eb44 0c02 	adc.w	ip, r4, r2
 8004a76:	4658      	mov	r0, fp
 8004a78:	4661      	mov	r1, ip
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f04f 0400 	mov.w	r4, #0
 8004a82:	461a      	mov	r2, r3
 8004a84:	4623      	mov	r3, r4
 8004a86:	f7fb fb81 	bl	800018c <__aeabi_uldivmod>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a96:	d308      	bcc.n	8004aaa <UART_SetConfig+0x26a>
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9e:	d204      	bcs.n	8004aaa <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	60da      	str	r2, [r3, #12]
 8004aa8:	e0c0      	b.n	8004c2c <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	76bb      	strb	r3, [r7, #26]
 8004aae:	e0bd      	b.n	8004c2c <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab8:	d169      	bne.n	8004b8e <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004aba:	7efb      	ldrb	r3, [r7, #27]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	2b07      	cmp	r3, #7
 8004ac0:	d82c      	bhi.n	8004b1c <UART_SetConfig+0x2dc>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x288>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004ae9 	.word	0x08004ae9
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004b1d 	.word	0x08004b1d
 8004ad4:	08004af7 	.word	0x08004af7
 8004ad8:	08004b1d 	.word	0x08004b1d
 8004adc:	08004b1d 	.word	0x08004b1d
 8004ae0:	08004b1d 	.word	0x08004b1d
 8004ae4:	08004aff 	.word	0x08004aff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae8:	f7fe f91c 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 8004aec:	6178      	str	r0, [r7, #20]
        break;
 8004aee:	e01a      	b.n	8004b26 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af0:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <UART_SetConfig+0x2d4>)
 8004af2:	617b      	str	r3, [r7, #20]
        break;
 8004af4:	e017      	b.n	8004b26 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af6:	f7fe f881 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8004afa:	6178      	str	r0, [r7, #20]
        break;
 8004afc:	e013      	b.n	8004b26 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b02:	617b      	str	r3, [r7, #20]
        break;
 8004b04:	e00f      	b.n	8004b26 <UART_SetConfig+0x2e6>
 8004b06:	bf00      	nop
 8004b08:	cfff69f3 	.word	0xcfff69f3
 8004b0c:	40008000 	.word	0x40008000
 8004b10:	40013800 	.word	0x40013800
 8004b14:	00f42400 	.word	0x00f42400
 8004b18:	08005bc4 	.word	0x08005bc4
      default:
        pclk = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	76bb      	strb	r3, [r7, #26]
        break;
 8004b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d07f      	beq.n	8004c2c <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	4a48      	ldr	r2, [pc, #288]	; (8004c54 <UART_SetConfig+0x414>)
 8004b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b36:	461a      	mov	r2, r3
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b3e:	005a      	lsls	r2, r3, #1
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	441a      	add	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b0f      	cmp	r3, #15
 8004b58:	d916      	bls.n	8004b88 <UART_SetConfig+0x348>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b60:	d212      	bcs.n	8004b88 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f023 030f 	bic.w	r3, r3, #15
 8004b6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	89fa      	ldrh	r2, [r7, #14]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	e051      	b.n	8004c2c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	76bb      	strb	r3, [r7, #26]
 8004b8c:	e04e      	b.n	8004c2c <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b8e:	7efb      	ldrb	r3, [r7, #27]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	2b07      	cmp	r3, #7
 8004b94:	d821      	bhi.n	8004bda <UART_SetConfig+0x39a>
 8004b96:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <UART_SetConfig+0x35c>)
 8004b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9c:	08004bbd 	.word	0x08004bbd
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bcb 	.word	0x08004bcb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bdb 	.word	0x08004bdb
 8004bb4:	08004bdb 	.word	0x08004bdb
 8004bb8:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe f8b2 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	6178      	str	r0, [r7, #20]
        break;
 8004bc2:	e00f      	b.n	8004be4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <UART_SetConfig+0x418>)
 8004bc6:	617b      	str	r3, [r7, #20]
        break;
 8004bc8:	e00c      	b.n	8004be4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7fe f817 	bl	8002bfc <HAL_RCC_GetSysClockFreq>
 8004bce:	6178      	str	r0, [r7, #20]
        break;
 8004bd0:	e008      	b.n	8004be4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	617b      	str	r3, [r7, #20]
        break;
 8004bd8:	e004      	b.n	8004be4 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	76bb      	strb	r3, [r7, #26]
        break;
 8004be2:	bf00      	nop
    }

    if (pclk != 0U)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <UART_SetConfig+0x414>)
 8004bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	441a      	add	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	2b0f      	cmp	r3, #15
 8004c14:	d908      	bls.n	8004c28 <UART_SetConfig+0x3e8>
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c1c:	d204      	bcs.n	8004c28 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	e001      	b.n	8004c2c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004c48:	7ebb      	ldrb	r3, [r7, #26]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004c54:	08005bc4 	.word	0x08005bc4
 8004c58:	00f42400 	.word	0x00f42400

08004c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5a:	d10a      	bne.n	8004d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004db0:	f7fc f9a8 	bl	8001104 <HAL_GetTick>
 8004db4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d10e      	bne.n	8004de2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f82c 	bl	8004e30 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e022      	b.n	8004e28 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d10e      	bne.n	8004e0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f816 	bl	8004e30 <UART_WaitOnFlagUntilTimeout>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e00c      	b.n	8004e28 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e40:	e062      	b.n	8004f08 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e48:	d05e      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4a:	f7fc f95b 	bl	8001104 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d302      	bcc.n	8004e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d11d      	bne.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e6e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e045      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d02e      	beq.n	8004f08 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb8:	d126      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ec2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ed2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e00f      	b.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d08d      	beq.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f7ff fc49 	bl	800482c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f9a:	bf00      	nop
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fb0:	2b21      	cmp	r3, #33	; 0x21
 8004fb2:	d12a      	bne.n	800500a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d110      	bne.n	8004fe2 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fce:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fde:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004fe0:	e013      	b.n	800500a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe6:	781a      	ldrb	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005024:	2b21      	cmp	r3, #33	; 0x21
 8005026:	d12f      	bne.n	8005088 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d110      	bne.n	8005056 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005042:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005052:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005054:	e018      	b.n	8005088 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800506a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005070:	1c9a      	adds	r2, r3, #2
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29a      	uxth	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a2:	2b21      	cmp	r3, #33	; 0x21
 80050a4:	d13d      	bne.n	8005122 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80050ac:	81fb      	strh	r3, [r7, #14]
 80050ae:	e035      	b.n	800511c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d111      	bne.n	80050e0 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80050ca:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050da:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80050dc:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80050de:	e020      	b.n	8005122 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d013      	beq.n	8005116 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005116:	89fb      	ldrh	r3, [r7, #14]
 8005118:	3b01      	subs	r3, #1
 800511a:	81fb      	strh	r3, [r7, #14]
 800511c:	89fb      	ldrh	r3, [r7, #14]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1c6      	bne.n	80050b0 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800513c:	2b21      	cmp	r3, #33	; 0x21
 800513e:	d142      	bne.n	80051c6 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005146:	81fb      	strh	r3, [r7, #14]
 8005148:	e03a      	b.n	80051c0 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d111      	bne.n	800517a <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8005164:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005174:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8005176:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8005178:	e025      	b.n	80051c6 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d018      	beq.n	80051ba <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800519c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80051ba:	89fb      	ldrh	r3, [r7, #14]
 80051bc:	3b01      	subs	r3, #1
 80051be:	81fb      	strh	r3, [r7, #14]
 80051c0:	89fb      	ldrh	r3, [r7, #14]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1c1      	bne.n	800514a <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fb0d 	bl	8004818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005214:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521c:	2b22      	cmp	r3, #34	; 0x22
 800521e:	d13b      	bne.n	8005298 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005228:	89bb      	ldrh	r3, [r7, #12]
 800522a:	b2d9      	uxtb	r1, r3
 800522c:	89fb      	ldrh	r3, [r7, #14]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	400a      	ands	r2, r1
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d122      	bne.n	80052a8 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005270:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7fb fc4f 	bl	8000b34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005296:	e007      	b.n	80052a8 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0208 	orr.w	r2, r2, #8
 80052a6:	619a      	str	r2, [r3, #24]
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80052be:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c6:	2b22      	cmp	r3, #34	; 0x22
 80052c8:	d13b      	bne.n	8005342 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80052d8:	89ba      	ldrh	r2, [r7, #12]
 80052da:	89fb      	ldrh	r3, [r7, #14]
 80052dc:	4013      	ands	r3, r2
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e8:	1c9a      	adds	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d122      	bne.n	8005352 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800531a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0201 	bic.w	r2, r2, #1
 800532a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2220      	movs	r2, #32
 8005330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fb fbfa 	bl	8000b34 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005340:	e007      	b.n	8005352 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0208 	orr.w	r2, r2, #8
 8005350:	619a      	str	r2, [r3, #24]
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800536a:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005372:	2b22      	cmp	r3, #34	; 0x22
 8005374:	d168      	bne.n	8005448 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800537c:	81fb      	strh	r3, [r7, #14]
 800537e:	e03f      	b.n	8005400 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005388:	893b      	ldrh	r3, [r7, #8]
 800538a:	b2d9      	uxtb	r1, r3
 800538c:	89bb      	ldrh	r3, [r7, #12]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005394:	400a      	ands	r2, r1
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d11b      	bne.n	80053fa <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053d0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7fb fb9d 	bl	8000b34 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80053fa:	89fb      	ldrh	r3, [r7, #14]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	81fb      	strh	r3, [r7, #14]
 8005400:	89fb      	ldrh	r3, [r7, #14]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1bc      	bne.n	8005380 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800540c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800540e:	897b      	ldrh	r3, [r7, #10]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d021      	beq.n	8005458 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800541a:	897a      	ldrh	r2, [r7, #10]
 800541c:	429a      	cmp	r2, r3
 800541e:	d21b      	bcs.n	8005458 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800542e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a0b      	ldr	r2, [pc, #44]	; (8005460 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8005434:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0220 	orr.w	r2, r2, #32
 8005444:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005446:	e007      	b.n	8005458 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0208 	orr.w	r2, r2, #8
 8005456:	619a      	str	r2, [r3, #24]
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	08005207 	.word	0x08005207

08005464 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005472:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547a:	2b22      	cmp	r3, #34	; 0x22
 800547c:	d168      	bne.n	8005550 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005484:	82fb      	strh	r3, [r7, #22]
 8005486:	e03f      	b.n	8005508 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005494:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005496:	8a3a      	ldrh	r2, [r7, #16]
 8005498:	8abb      	ldrh	r3, [r7, #20]
 800549a:	4013      	ands	r3, r2
 800549c:	b29a      	uxth	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	1c9a      	adds	r2, r3, #2
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d11b      	bne.n	8005502 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054d8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fb fb19 	bl	8000b34 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	3b01      	subs	r3, #1
 8005506:	82fb      	strh	r3, [r7, #22]
 8005508:	8afb      	ldrh	r3, [r7, #22]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1bc      	bne.n	8005488 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005514:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005516:	8a7b      	ldrh	r3, [r7, #18]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d021      	beq.n	8005560 <UART_RxISR_16BIT_FIFOEN+0xfc>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005522:	8a7a      	ldrh	r2, [r7, #18]
 8005524:	429a      	cmp	r2, r3
 8005526:	d21b      	bcs.n	8005560 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005536:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a0b      	ldr	r2, [pc, #44]	; (8005568 <UART_RxISR_16BIT_FIFOEN+0x104>)
 800553c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0220 	orr.w	r2, r2, #32
 800554c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800554e:	e007      	b.n	8005560 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0208 	orr.w	r2, r2, #8
 800555e:	619a      	str	r2, [r3, #24]
}
 8005560:	bf00      	nop
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	080052b1 	.word	0x080052b1

0800556c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d101      	bne.n	80055be <HAL_UARTEx_DisableFifoMode+0x16>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e027      	b.n	800560e <HAL_UARTEx_DisableFifoMode+0x66>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2224      	movs	r2, #36	; 0x24
 80055ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0201 	bic.w	r2, r2, #1
 80055e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800562e:	2302      	movs	r3, #2
 8005630:	e02d      	b.n	800568e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2224      	movs	r2, #36	; 0x24
 800563e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f850 	bl	8005714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e02d      	b.n	800570a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	; 0x24
 80056ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	683a      	ldr	r2, [r7, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f812 	bl	8005714 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800571c:	4a2f      	ldr	r2, [pc, #188]	; (80057dc <UARTEx_SetNbDataToProcess+0xc8>)
 800571e:	f107 0314 	add.w	r3, r7, #20
 8005722:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005726:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800572a:	4a2d      	ldr	r2, [pc, #180]	; (80057e0 <UARTEx_SetNbDataToProcess+0xcc>)
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005734:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800573c:	2b00      	cmp	r3, #0
 800573e:	d108      	bne.n	8005752 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005750:	e03d      	b.n	80057ce <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005752:	2308      	movs	r3, #8
 8005754:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005756:	2308      	movs	r3, #8
 8005758:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	0e5b      	lsrs	r3, r3, #25
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	0f5b      	lsrs	r3, r3, #29
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800577a:	7fbb      	ldrb	r3, [r7, #30]
 800577c:	7f3a      	ldrb	r2, [r7, #28]
 800577e:	f107 0120 	add.w	r1, r7, #32
 8005782:	440a      	add	r2, r1
 8005784:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005788:	fb02 f303 	mul.w	r3, r2, r3
 800578c:	7f3a      	ldrb	r2, [r7, #28]
 800578e:	f107 0120 	add.w	r1, r7, #32
 8005792:	440a      	add	r2, r1
 8005794:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005798:	fb93 f3f2 	sdiv	r3, r3, r2
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80057a4:	7ffb      	ldrb	r3, [r7, #31]
 80057a6:	7f7a      	ldrb	r2, [r7, #29]
 80057a8:	f107 0120 	add.w	r1, r7, #32
 80057ac:	440a      	add	r2, r1
 80057ae:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	7f7a      	ldrb	r2, [r7, #29]
 80057b8:	f107 0120 	add.w	r1, r7, #32
 80057bc:	440a      	add	r2, r1
 80057be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80057c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057ce:	bf00      	nop
 80057d0:	3724      	adds	r7, #36	; 0x24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	08005b04 	.word	0x08005b04
 80057e0:	08005b0c 	.word	0x08005b0c

080057e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005816:	b480      	push	{r7}
 8005818:	b085      	sub	sp, #20
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800581e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005822:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	b29b      	uxth	r3, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	b29b      	uxth	r3, r3
 8005834:	4013      	ands	r3, r2
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800584c:	b084      	sub	sp, #16
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	f107 0014 	add.w	r0, r7, #20
 800585a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff ffb0 	bl	80057e4 <USB_EnableGlobalInt>

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005890:	b004      	add	sp, #16
 8005892:	4770      	bx	lr

08005894 <atoi>:
 8005894:	220a      	movs	r2, #10
 8005896:	2100      	movs	r1, #0
 8005898:	f000 b8c2 	b.w	8005a20 <strtol>

0800589c <__libc_init_array>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4e0d      	ldr	r6, [pc, #52]	; (80058d4 <__libc_init_array+0x38>)
 80058a0:	4c0d      	ldr	r4, [pc, #52]	; (80058d8 <__libc_init_array+0x3c>)
 80058a2:	1ba4      	subs	r4, r4, r6
 80058a4:	10a4      	asrs	r4, r4, #2
 80058a6:	2500      	movs	r5, #0
 80058a8:	42a5      	cmp	r5, r4
 80058aa:	d109      	bne.n	80058c0 <__libc_init_array+0x24>
 80058ac:	4e0b      	ldr	r6, [pc, #44]	; (80058dc <__libc_init_array+0x40>)
 80058ae:	4c0c      	ldr	r4, [pc, #48]	; (80058e0 <__libc_init_array+0x44>)
 80058b0:	f000 f8ee 	bl	8005a90 <_init>
 80058b4:	1ba4      	subs	r4, r4, r6
 80058b6:	10a4      	asrs	r4, r4, #2
 80058b8:	2500      	movs	r5, #0
 80058ba:	42a5      	cmp	r5, r4
 80058bc:	d105      	bne.n	80058ca <__libc_init_array+0x2e>
 80058be:	bd70      	pop	{r4, r5, r6, pc}
 80058c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058c4:	4798      	blx	r3
 80058c6:	3501      	adds	r5, #1
 80058c8:	e7ee      	b.n	80058a8 <__libc_init_array+0xc>
 80058ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058ce:	4798      	blx	r3
 80058d0:	3501      	adds	r5, #1
 80058d2:	e7f2      	b.n	80058ba <__libc_init_array+0x1e>
 80058d4:	08005cf0 	.word	0x08005cf0
 80058d8:	08005cf0 	.word	0x08005cf0
 80058dc:	08005cf0 	.word	0x08005cf0
 80058e0:	08005cf4 	.word	0x08005cf4

080058e4 <memset>:
 80058e4:	4402      	add	r2, r0
 80058e6:	4603      	mov	r3, r0
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	f803 1b01 	strb.w	r1, [r3], #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <strstr>:
 80058f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f6:	7803      	ldrb	r3, [r0, #0]
 80058f8:	b17b      	cbz	r3, 800591a <strstr+0x26>
 80058fa:	4604      	mov	r4, r0
 80058fc:	7823      	ldrb	r3, [r4, #0]
 80058fe:	4620      	mov	r0, r4
 8005900:	1c66      	adds	r6, r4, #1
 8005902:	b17b      	cbz	r3, 8005924 <strstr+0x30>
 8005904:	1e4a      	subs	r2, r1, #1
 8005906:	1e63      	subs	r3, r4, #1
 8005908:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800590c:	b14d      	cbz	r5, 8005922 <strstr+0x2e>
 800590e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005912:	42af      	cmp	r7, r5
 8005914:	4634      	mov	r4, r6
 8005916:	d0f7      	beq.n	8005908 <strstr+0x14>
 8005918:	e7f0      	b.n	80058fc <strstr+0x8>
 800591a:	780b      	ldrb	r3, [r1, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	bf18      	it	ne
 8005920:	2000      	movne	r0, #0
 8005922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005924:	4618      	mov	r0, r3
 8005926:	e7fc      	b.n	8005922 <strstr+0x2e>

08005928 <_strtol_l.isra.0>:
 8005928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	4680      	mov	r8, r0
 800592e:	4689      	mov	r9, r1
 8005930:	4692      	mov	sl, r2
 8005932:	461e      	mov	r6, r3
 8005934:	460f      	mov	r7, r1
 8005936:	463d      	mov	r5, r7
 8005938:	9808      	ldr	r0, [sp, #32]
 800593a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800593e:	f000 f885 	bl	8005a4c <__locale_ctype_ptr_l>
 8005942:	4420      	add	r0, r4
 8005944:	7843      	ldrb	r3, [r0, #1]
 8005946:	f013 0308 	ands.w	r3, r3, #8
 800594a:	d132      	bne.n	80059b2 <_strtol_l.isra.0+0x8a>
 800594c:	2c2d      	cmp	r4, #45	; 0x2d
 800594e:	d132      	bne.n	80059b6 <_strtol_l.isra.0+0x8e>
 8005950:	787c      	ldrb	r4, [r7, #1]
 8005952:	1cbd      	adds	r5, r7, #2
 8005954:	2201      	movs	r2, #1
 8005956:	2e00      	cmp	r6, #0
 8005958:	d05d      	beq.n	8005a16 <_strtol_l.isra.0+0xee>
 800595a:	2e10      	cmp	r6, #16
 800595c:	d109      	bne.n	8005972 <_strtol_l.isra.0+0x4a>
 800595e:	2c30      	cmp	r4, #48	; 0x30
 8005960:	d107      	bne.n	8005972 <_strtol_l.isra.0+0x4a>
 8005962:	782b      	ldrb	r3, [r5, #0]
 8005964:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005968:	2b58      	cmp	r3, #88	; 0x58
 800596a:	d14f      	bne.n	8005a0c <_strtol_l.isra.0+0xe4>
 800596c:	786c      	ldrb	r4, [r5, #1]
 800596e:	2610      	movs	r6, #16
 8005970:	3502      	adds	r5, #2
 8005972:	2a00      	cmp	r2, #0
 8005974:	bf14      	ite	ne
 8005976:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800597a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800597e:	2700      	movs	r7, #0
 8005980:	fbb1 fcf6 	udiv	ip, r1, r6
 8005984:	4638      	mov	r0, r7
 8005986:	fb06 1e1c 	mls	lr, r6, ip, r1
 800598a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800598e:	2b09      	cmp	r3, #9
 8005990:	d817      	bhi.n	80059c2 <_strtol_l.isra.0+0x9a>
 8005992:	461c      	mov	r4, r3
 8005994:	42a6      	cmp	r6, r4
 8005996:	dd23      	ble.n	80059e0 <_strtol_l.isra.0+0xb8>
 8005998:	1c7b      	adds	r3, r7, #1
 800599a:	d007      	beq.n	80059ac <_strtol_l.isra.0+0x84>
 800599c:	4584      	cmp	ip, r0
 800599e:	d31c      	bcc.n	80059da <_strtol_l.isra.0+0xb2>
 80059a0:	d101      	bne.n	80059a6 <_strtol_l.isra.0+0x7e>
 80059a2:	45a6      	cmp	lr, r4
 80059a4:	db19      	blt.n	80059da <_strtol_l.isra.0+0xb2>
 80059a6:	fb00 4006 	mla	r0, r0, r6, r4
 80059aa:	2701      	movs	r7, #1
 80059ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059b0:	e7eb      	b.n	800598a <_strtol_l.isra.0+0x62>
 80059b2:	462f      	mov	r7, r5
 80059b4:	e7bf      	b.n	8005936 <_strtol_l.isra.0+0xe>
 80059b6:	2c2b      	cmp	r4, #43	; 0x2b
 80059b8:	bf04      	itt	eq
 80059ba:	1cbd      	addeq	r5, r7, #2
 80059bc:	787c      	ldrbeq	r4, [r7, #1]
 80059be:	461a      	mov	r2, r3
 80059c0:	e7c9      	b.n	8005956 <_strtol_l.isra.0+0x2e>
 80059c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80059c6:	2b19      	cmp	r3, #25
 80059c8:	d801      	bhi.n	80059ce <_strtol_l.isra.0+0xa6>
 80059ca:	3c37      	subs	r4, #55	; 0x37
 80059cc:	e7e2      	b.n	8005994 <_strtol_l.isra.0+0x6c>
 80059ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80059d2:	2b19      	cmp	r3, #25
 80059d4:	d804      	bhi.n	80059e0 <_strtol_l.isra.0+0xb8>
 80059d6:	3c57      	subs	r4, #87	; 0x57
 80059d8:	e7dc      	b.n	8005994 <_strtol_l.isra.0+0x6c>
 80059da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80059de:	e7e5      	b.n	80059ac <_strtol_l.isra.0+0x84>
 80059e0:	1c7b      	adds	r3, r7, #1
 80059e2:	d108      	bne.n	80059f6 <_strtol_l.isra.0+0xce>
 80059e4:	2322      	movs	r3, #34	; 0x22
 80059e6:	f8c8 3000 	str.w	r3, [r8]
 80059ea:	4608      	mov	r0, r1
 80059ec:	f1ba 0f00 	cmp.w	sl, #0
 80059f0:	d107      	bne.n	8005a02 <_strtol_l.isra.0+0xda>
 80059f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f6:	b102      	cbz	r2, 80059fa <_strtol_l.isra.0+0xd2>
 80059f8:	4240      	negs	r0, r0
 80059fa:	f1ba 0f00 	cmp.w	sl, #0
 80059fe:	d0f8      	beq.n	80059f2 <_strtol_l.isra.0+0xca>
 8005a00:	b10f      	cbz	r7, 8005a06 <_strtol_l.isra.0+0xde>
 8005a02:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8005a06:	f8ca 9000 	str.w	r9, [sl]
 8005a0a:	e7f2      	b.n	80059f2 <_strtol_l.isra.0+0xca>
 8005a0c:	2430      	movs	r4, #48	; 0x30
 8005a0e:	2e00      	cmp	r6, #0
 8005a10:	d1af      	bne.n	8005972 <_strtol_l.isra.0+0x4a>
 8005a12:	2608      	movs	r6, #8
 8005a14:	e7ad      	b.n	8005972 <_strtol_l.isra.0+0x4a>
 8005a16:	2c30      	cmp	r4, #48	; 0x30
 8005a18:	d0a3      	beq.n	8005962 <_strtol_l.isra.0+0x3a>
 8005a1a:	260a      	movs	r6, #10
 8005a1c:	e7a9      	b.n	8005972 <_strtol_l.isra.0+0x4a>
	...

08005a20 <strtol>:
 8005a20:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <strtol+0x24>)
 8005a22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a24:	681c      	ldr	r4, [r3, #0]
 8005a26:	4d08      	ldr	r5, [pc, #32]	; (8005a48 <strtol+0x28>)
 8005a28:	6a23      	ldr	r3, [r4, #32]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf08      	it	eq
 8005a2e:	462b      	moveq	r3, r5
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	460a      	mov	r2, r1
 8005a36:	4601      	mov	r1, r0
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff ff75 	bl	8005928 <_strtol_l.isra.0>
 8005a3e:	b003      	add	sp, #12
 8005a40:	bd30      	pop	{r4, r5, pc}
 8005a42:	bf00      	nop
 8005a44:	20000014 	.word	0x20000014
 8005a48:	20000078 	.word	0x20000078

08005a4c <__locale_ctype_ptr_l>:
 8005a4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005a50:	4770      	bx	lr

08005a52 <__ascii_mbtowc>:
 8005a52:	b082      	sub	sp, #8
 8005a54:	b901      	cbnz	r1, 8005a58 <__ascii_mbtowc+0x6>
 8005a56:	a901      	add	r1, sp, #4
 8005a58:	b142      	cbz	r2, 8005a6c <__ascii_mbtowc+0x1a>
 8005a5a:	b14b      	cbz	r3, 8005a70 <__ascii_mbtowc+0x1e>
 8005a5c:	7813      	ldrb	r3, [r2, #0]
 8005a5e:	600b      	str	r3, [r1, #0]
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	1c10      	adds	r0, r2, #0
 8005a64:	bf18      	it	ne
 8005a66:	2001      	movne	r0, #1
 8005a68:	b002      	add	sp, #8
 8005a6a:	4770      	bx	lr
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	e7fb      	b.n	8005a68 <__ascii_mbtowc+0x16>
 8005a70:	f06f 0001 	mvn.w	r0, #1
 8005a74:	e7f8      	b.n	8005a68 <__ascii_mbtowc+0x16>

08005a76 <__ascii_wctomb>:
 8005a76:	b149      	cbz	r1, 8005a8c <__ascii_wctomb+0x16>
 8005a78:	2aff      	cmp	r2, #255	; 0xff
 8005a7a:	bf85      	ittet	hi
 8005a7c:	238a      	movhi	r3, #138	; 0x8a
 8005a7e:	6003      	strhi	r3, [r0, #0]
 8005a80:	700a      	strbls	r2, [r1, #0]
 8005a82:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005a86:	bf98      	it	ls
 8005a88:	2001      	movls	r0, #1
 8005a8a:	4770      	bx	lr
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4770      	bx	lr

08005a90 <_init>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	bf00      	nop
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr

08005a9c <_fini>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr
