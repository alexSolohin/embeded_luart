
LUART_connect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a5c  08006a5c  00016a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000004  08006a6c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004b0  200001e4  08006c4c  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000694  08006c4c  00020694  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a836  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ee6  00000000  00000000  0003aa4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001d90  00000000  00000000  0003d930  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c38  00000000  00000000  0003f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002349e  00000000  00000000  000412f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00013848  00000000  00000000  00064796  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000e48a7  00000000  00000000  00077fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0015c885  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000080ec  00000000  00000000  0015c900  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e4 	.word	0x200001e4
 8000158:	00000000 	.word	0x00000000
 800015c:	080067e8 	.word	0x080067e8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e8 	.word	0x200001e8
 8000178:	080067e8 	.word	0x080067e8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800019c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	4604      	mov	r4, r0
 80001c4:	4688      	mov	r8, r1
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d14b      	bne.n	8000262 <__udivmoddi4+0xa6>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4615      	mov	r5, r2
 80001ce:	d967      	bls.n	80002a0 <__udivmoddi4+0xe4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x2e>
 80001d6:	f1c2 0720 	rsb	r7, r2, #32
 80001da:	fa01 f302 	lsl.w	r3, r1, r2
 80001de:	fa20 f707 	lsr.w	r7, r0, r7
 80001e2:	4095      	lsls	r5, r2
 80001e4:	ea47 0803 	orr.w	r8, r7, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001f4:	fa1f fc85 	uxth.w	ip, r5
 80001f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000200:	fb07 f10c 	mul.w	r1, r7, ip
 8000204:	4299      	cmp	r1, r3
 8000206:	d909      	bls.n	800021c <__udivmoddi4+0x60>
 8000208:	18eb      	adds	r3, r5, r3
 800020a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800020e:	f080 811b 	bcs.w	8000448 <__udivmoddi4+0x28c>
 8000212:	4299      	cmp	r1, r3
 8000214:	f240 8118 	bls.w	8000448 <__udivmoddi4+0x28c>
 8000218:	3f02      	subs	r7, #2
 800021a:	442b      	add	r3, r5
 800021c:	1a5b      	subs	r3, r3, r1
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0fe 	udiv	r0, r3, lr
 8000224:	fb0e 3310 	mls	r3, lr, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000230:	45a4      	cmp	ip, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x8c>
 8000234:	192c      	adds	r4, r5, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800023a:	f080 8107 	bcs.w	800044c <__udivmoddi4+0x290>
 800023e:	45a4      	cmp	ip, r4
 8000240:	f240 8104 	bls.w	800044c <__udivmoddi4+0x290>
 8000244:	3802      	subs	r0, #2
 8000246:	442c      	add	r4, r5
 8000248:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024c:	eba4 040c 	sub.w	r4, r4, ip
 8000250:	2700      	movs	r7, #0
 8000252:	b11e      	cbz	r6, 800025c <__udivmoddi4+0xa0>
 8000254:	40d4      	lsrs	r4, r2
 8000256:	2300      	movs	r3, #0
 8000258:	e9c6 4300 	strd	r4, r3, [r6]
 800025c:	4639      	mov	r1, r7
 800025e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000262:	428b      	cmp	r3, r1
 8000264:	d909      	bls.n	800027a <__udivmoddi4+0xbe>
 8000266:	2e00      	cmp	r6, #0
 8000268:	f000 80eb 	beq.w	8000442 <__udivmoddi4+0x286>
 800026c:	2700      	movs	r7, #0
 800026e:	e9c6 0100 	strd	r0, r1, [r6]
 8000272:	4638      	mov	r0, r7
 8000274:	4639      	mov	r1, r7
 8000276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027a:	fab3 f783 	clz	r7, r3
 800027e:	2f00      	cmp	r7, #0
 8000280:	d147      	bne.n	8000312 <__udivmoddi4+0x156>
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__udivmoddi4+0xd0>
 8000286:	4282      	cmp	r2, r0
 8000288:	f200 80fa 	bhi.w	8000480 <__udivmoddi4+0x2c4>
 800028c:	1a84      	subs	r4, r0, r2
 800028e:	eb61 0303 	sbc.w	r3, r1, r3
 8000292:	2001      	movs	r0, #1
 8000294:	4698      	mov	r8, r3
 8000296:	2e00      	cmp	r6, #0
 8000298:	d0e0      	beq.n	800025c <__udivmoddi4+0xa0>
 800029a:	e9c6 4800 	strd	r4, r8, [r6]
 800029e:	e7dd      	b.n	800025c <__udivmoddi4+0xa0>
 80002a0:	b902      	cbnz	r2, 80002a4 <__udivmoddi4+0xe8>
 80002a2:	deff      	udf	#255	; 0xff
 80002a4:	fab2 f282 	clz	r2, r2
 80002a8:	2a00      	cmp	r2, #0
 80002aa:	f040 808f 	bne.w	80003cc <__udivmoddi4+0x210>
 80002ae:	1b49      	subs	r1, r1, r5
 80002b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002b4:	fa1f f885 	uxth.w	r8, r5
 80002b8:	2701      	movs	r7, #1
 80002ba:	fbb1 fcfe 	udiv	ip, r1, lr
 80002be:	0c23      	lsrs	r3, r4, #16
 80002c0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c8:	fb08 f10c 	mul.w	r1, r8, ip
 80002cc:	4299      	cmp	r1, r3
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0x124>
 80002d0:	18eb      	adds	r3, r5, r3
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0x122>
 80002d8:	4299      	cmp	r1, r3
 80002da:	f200 80cd 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002de:	4684      	mov	ip, r0
 80002e0:	1a59      	subs	r1, r3, r1
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x14c>
 80002f8:	192c      	adds	r4, r5, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x14a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80b6 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e79f      	b.n	8000252 <__udivmoddi4+0x96>
 8000312:	f1c7 0c20 	rsb	ip, r7, #32
 8000316:	40bb      	lsls	r3, r7
 8000318:	fa22 fe0c 	lsr.w	lr, r2, ip
 800031c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000320:	fa01 f407 	lsl.w	r4, r1, r7
 8000324:	fa20 f50c 	lsr.w	r5, r0, ip
 8000328:	fa21 f30c 	lsr.w	r3, r1, ip
 800032c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000330:	4325      	orrs	r5, r4
 8000332:	fbb3 f9f8 	udiv	r9, r3, r8
 8000336:	0c2c      	lsrs	r4, r5, #16
 8000338:	fb08 3319 	mls	r3, r8, r9, r3
 800033c:	fa1f fa8e 	uxth.w	sl, lr
 8000340:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000344:	fb09 f40a 	mul.w	r4, r9, sl
 8000348:	429c      	cmp	r4, r3
 800034a:	fa02 f207 	lsl.w	r2, r2, r7
 800034e:	fa00 f107 	lsl.w	r1, r0, r7
 8000352:	d90b      	bls.n	800036c <__udivmoddi4+0x1b0>
 8000354:	eb1e 0303 	adds.w	r3, lr, r3
 8000358:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800035c:	f080 8087 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000360:	429c      	cmp	r4, r3
 8000362:	f240 8084 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000366:	f1a9 0902 	sub.w	r9, r9, #2
 800036a:	4473      	add	r3, lr
 800036c:	1b1b      	subs	r3, r3, r4
 800036e:	b2ad      	uxth	r5, r5
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800037c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000380:	45a2      	cmp	sl, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x1da>
 8000384:	eb1e 0404 	adds.w	r4, lr, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038c:	d26b      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 800038e:	45a2      	cmp	sl, r4
 8000390:	d969      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000392:	3802      	subs	r0, #2
 8000394:	4474      	add	r4, lr
 8000396:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800039a:	fba0 8902 	umull	r8, r9, r0, r2
 800039e:	eba4 040a 	sub.w	r4, r4, sl
 80003a2:	454c      	cmp	r4, r9
 80003a4:	46c2      	mov	sl, r8
 80003a6:	464b      	mov	r3, r9
 80003a8:	d354      	bcc.n	8000454 <__udivmoddi4+0x298>
 80003aa:	d051      	beq.n	8000450 <__udivmoddi4+0x294>
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d069      	beq.n	8000484 <__udivmoddi4+0x2c8>
 80003b0:	ebb1 050a 	subs.w	r5, r1, sl
 80003b4:	eb64 0403 	sbc.w	r4, r4, r3
 80003b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003bc:	40fd      	lsrs	r5, r7
 80003be:	40fc      	lsrs	r4, r7
 80003c0:	ea4c 0505 	orr.w	r5, ip, r5
 80003c4:	e9c6 5400 	strd	r5, r4, [r6]
 80003c8:	2700      	movs	r7, #0
 80003ca:	e747      	b.n	800025c <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f703 	lsr.w	r7, r0, r3
 80003d4:	4095      	lsls	r5, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	fa21 f303 	lsr.w	r3, r1, r3
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	4338      	orrs	r0, r7
 80003e4:	0c01      	lsrs	r1, r0, #16
 80003e6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003ea:	fa1f f885 	uxth.w	r8, r5
 80003ee:	fb0e 3317 	mls	r3, lr, r7, r3
 80003f2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f6:	fb07 f308 	mul.w	r3, r7, r8
 80003fa:	428b      	cmp	r3, r1
 80003fc:	fa04 f402 	lsl.w	r4, r4, r2
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x256>
 8000402:	1869      	adds	r1, r5, r1
 8000404:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	428b      	cmp	r3, r1
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3f02      	subs	r7, #2
 8000410:	4429      	add	r1, r5
 8000412:	1acb      	subs	r3, r1, r3
 8000414:	b281      	uxth	r1, r0
 8000416:	fbb3 f0fe 	udiv	r0, r3, lr
 800041a:	fb0e 3310 	mls	r3, lr, r0, r3
 800041e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000422:	fb00 f308 	mul.w	r3, r0, r8
 8000426:	428b      	cmp	r3, r1
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x27e>
 800042a:	1869      	adds	r1, r5, r1
 800042c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000430:	d217      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000432:	428b      	cmp	r3, r1
 8000434:	d915      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000436:	3802      	subs	r0, #2
 8000438:	4429      	add	r1, r5
 800043a:	1ac9      	subs	r1, r1, r3
 800043c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000440:	e73b      	b.n	80002ba <__udivmoddi4+0xfe>
 8000442:	4637      	mov	r7, r6
 8000444:	4630      	mov	r0, r6
 8000446:	e709      	b.n	800025c <__udivmoddi4+0xa0>
 8000448:	4607      	mov	r7, r0
 800044a:	e6e7      	b.n	800021c <__udivmoddi4+0x60>
 800044c:	4618      	mov	r0, r3
 800044e:	e6fb      	b.n	8000248 <__udivmoddi4+0x8c>
 8000450:	4541      	cmp	r1, r8
 8000452:	d2ab      	bcs.n	80003ac <__udivmoddi4+0x1f0>
 8000454:	ebb8 0a02 	subs.w	sl, r8, r2
 8000458:	eb69 020e 	sbc.w	r2, r9, lr
 800045c:	3801      	subs	r0, #1
 800045e:	4613      	mov	r3, r2
 8000460:	e7a4      	b.n	80003ac <__udivmoddi4+0x1f0>
 8000462:	4660      	mov	r0, ip
 8000464:	e7e9      	b.n	800043a <__udivmoddi4+0x27e>
 8000466:	4618      	mov	r0, r3
 8000468:	e795      	b.n	8000396 <__udivmoddi4+0x1da>
 800046a:	4667      	mov	r7, ip
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	4681      	mov	r9, r0
 8000470:	e77c      	b.n	800036c <__udivmoddi4+0x1b0>
 8000472:	3802      	subs	r0, #2
 8000474:	442c      	add	r4, r5
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0x14c>
 8000478:	f1ac 0c02 	sub.w	ip, ip, #2
 800047c:	442b      	add	r3, r5
 800047e:	e72f      	b.n	80002e0 <__udivmoddi4+0x124>
 8000480:	4638      	mov	r0, r7
 8000482:	e708      	b.n	8000296 <__udivmoddi4+0xda>
 8000484:	4637      	mov	r7, r6
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0xa0>

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800049c:	f023 0218 	bic.w	r2, r3, #24
 80004a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004dc:	68fb      	ldr	r3, [r7, #12]
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <parse_I2C_to_func>:
		}
	}
}

void	parse_I2C_to_func(I2C_HandleTypeDef *i2c, parse_t *parse)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
//	parse->Rx_Num_of_Bytes = i2c->XferSize - i2c->XferCount;
//	parse->Processed_Rx_Bytes = parse->Rx_Num_of_Bytes;
//	for (uint8_t idx = 0; idx < parse->Processed_Rx_Bytes; idx++)
//	{
		if ((parse->str1 = strstr(str, "CMD+")) != NULL)
 80004f6:	4947      	ldr	r1, [pc, #284]	; (8000614 <parse_I2C_to_func+0x128>)
 80004f8:	4847      	ldr	r0, [pc, #284]	; (8000618 <parse_I2C_to_func+0x12c>)
 80004fa:	f006 f8a7 	bl	800664c <strstr>
 80004fe:	4602      	mov	r2, r0
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d07f      	beq.n	800060c <parse_I2C_to_func+0x120>
		{
			if ((parse->str2 = strstr(parse->str1, "+END")) != NULL)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4942      	ldr	r1, [pc, #264]	; (800061c <parse_I2C_to_func+0x130>)
 8000512:	4618      	mov	r0, r3
 8000514:	f006 f89a 	bl	800664c <strstr>
 8000518:	4602      	mov	r2, r0
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d072      	beq.n	800060c <parse_I2C_to_func+0x120>
			{
				*(parse->str2) = '\0';
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
				parse->flag = 0;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2200      	movs	r2, #0
 8000532:	731a      	strb	r2, [r3, #12]
				for (uint8_t i = 0; i < sizeof(command_name) / sizeof(command_name[0]); i++)
 8000534:	2300      	movs	r3, #0
 8000536:	73fb      	strb	r3, [r7, #15]
 8000538:	e03a      	b.n	80005b0 <parse_I2C_to_func+0xc4>
				{
					parse->point = &command_name[i];
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	00db      	lsls	r3, r3, #3
 800053e:	4a38      	ldr	r2, [pc, #224]	; (8000620 <parse_I2C_to_func+0x134>)
 8000540:	441a      	add	r2, r3
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	621a      	str	r2, [r3, #32]
					if ((parse->str3 = strstr(parse->str1, parse->point->name)) != NULL)
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	6a1b      	ldr	r3, [r3, #32]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	4610      	mov	r0, r2
 8000554:	f006 f87a 	bl	800664c <strstr>
 8000558:	4602      	mov	r2, r0
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d021      	beq.n	80005aa <parse_I2C_to_func+0xbe>
					{
						parse->ptr = (uint32_t)atoi(parse->str3 + strlen(parse->point->name) + 1);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	689c      	ldr	r4, [r3, #8]
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	6a1b      	ldr	r3, [r3, #32]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff fe03 	bl	800017c <strlen>
 8000576:	4603      	mov	r3, r0
 8000578:	3301      	adds	r3, #1
 800057a:	4423      	add	r3, r4
 800057c:	4618      	mov	r0, r3
 800057e:	f006 f835 	bl	80065ec <atoi>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	611a      	str	r2, [r3, #16]
						if (parse->point->p_func != NULL)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	6a1b      	ldr	r3, [r3, #32]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d006      	beq.n	80005a2 <parse_I2C_to_func+0xb6>
						{
							parse->point->p_func(parse->ptr);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	6a1b      	ldr	r3, [r3, #32]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	6912      	ldr	r2, [r2, #16]
 800059e:	4610      	mov	r0, r2
 80005a0:	4798      	blx	r3
						}
						parse->flag = 1;
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	2201      	movs	r2, #1
 80005a6:	731a      	strb	r2, [r3, #12]
						break ;
 80005a8:	e005      	b.n	80005b6 <parse_I2C_to_func+0xca>
				for (uint8_t i = 0; i < sizeof(command_name) / sizeof(command_name[0]); i++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d9c1      	bls.n	800053a <parse_I2C_to_func+0x4e>
					}
				}
				memset(str, 0x00, sizeof(str));
 80005b6:	2264      	movs	r2, #100	; 0x64
 80005b8:	2100      	movs	r1, #0
 80005ba:	4817      	ldr	r0, [pc, #92]	; (8000618 <parse_I2C_to_func+0x12c>)
 80005bc:	f006 f83e 	bl	800663c <memset>
				HAL_I2C_DeInit(i2c);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f001 faf0 	bl	8001ba6 <HAL_I2C_DeInit>
				HAL_I2C_Init(i2c);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f001 fa5e 	bl	8001a88 <HAL_I2C_Init>
				HAL_I2C_Slave_Receive(i2c, (uint8_t*)str, strlen(str) - 1, 10000);
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <parse_I2C_to_func+0x12c>)
 80005ce:	f7ff fdd5 	bl	800017c <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	3b01      	subs	r3, #1
 80005d8:	b29a      	uxth	r2, r3
 80005da:	f242 7310 	movw	r3, #10000	; 0x2710
 80005de:	490e      	ldr	r1, [pc, #56]	; (8000618 <parse_I2C_to_func+0x12c>)
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fc18 	bl	8001e16 <HAL_I2C_Slave_Receive>
				if (parse->flag == 1)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	7b1b      	ldrb	r3, [r3, #12]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d107      	bne.n	80005fe <parse_I2C_to_func+0x112>
				{
					HAL_I2C_Slave_Transmit(i2c, "OK\n", 3, 10000);
 80005ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80005f2:	2203      	movs	r2, #3
 80005f4:	490b      	ldr	r1, [pc, #44]	; (8000624 <parse_I2C_to_func+0x138>)
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f001 fb04 	bl	8001c04 <HAL_I2C_Slave_Transmit>
					HAL_I2C_Slave_Transmit(i2c, "No Command\n", strlen("No Command"), 10000);
				}
			}
		}
//	}
}
 80005fc:	e006      	b.n	800060c <parse_I2C_to_func+0x120>
					HAL_I2C_Slave_Transmit(i2c, "No Command\n", strlen("No Command"), 10000);
 80005fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8000602:	220a      	movs	r2, #10
 8000604:	4908      	ldr	r1, [pc, #32]	; (8000628 <parse_I2C_to_func+0x13c>)
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f001 fafc 	bl	8001c04 <HAL_I2C_Slave_Transmit>
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	08006810 	.word	0x08006810
 8000618:	200003b8 	.word	0x200003b8
 800061c:	08006818 	.word	0x08006818
 8000620:	08006888 	.word	0x08006888
 8000624:	08006830 	.word	0x08006830
 8000628:	08006834 	.word	0x08006834

0800062c <cmd1_led>:

void	cmd1_led(uint32_t ptr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	led_on = ptr;
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <cmd1_led+0x1c>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim1);
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <cmd1_led+0x20>)
 800063c:	f004 fbde 	bl	8004dfc <HAL_TIM_Base_Start_IT>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200002d8 	.word	0x200002d8
 800064c:	20000368 	.word	0x20000368

08000650 <cmd2_led>:

void	cmd2_led(uint32_t ptr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(&htim1);
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <cmd2_led+0x20>)
 800065a:	f004 fc1d 	bl	8004e98 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2123      	movs	r1, #35	; 0x23
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <cmd2_led+0x24>)
 8000664:	f001 f9de 	bl	8001a24 <HAL_GPIO_WritePin>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000368 	.word	0x20000368
 8000674:	48000400 	.word	0x48000400

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	; 0x58
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fd51 	bl	8001124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f853 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 fa6b 	bl	8000b60 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800068a:	f000 f93b 	bl	8000904 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800068e:	f000 f987 	bl	80009a0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000692:	f000 fa3d 	bl	8000b10 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 8000696:	f000 f9cf 	bl	8000a38 <MX_TIM1_Init>
  MX_I2C1_Init();
 800069a:	f000 f8f3 	bl	8000884 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  time = HAL_GetTick();
 800069e:	f000 fdaf 	bl	8001200 <HAL_GetTick>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <main+0xa0>)
 80006a6:	601a      	str	r2, [r3, #0]
//  HAL_UART_Transmit_IT(&hlpuart1, "asd\n", strlen("asd\n"));
//  HAL_UART_Receive_IT(&huart1, (uint8_t*)str, strlen(str) - 1);
  uint8_t ptr = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if ((HAL_I2C_Slave_Receive(&hi2c1, (uint8_t*)str, strlen(str) - 1, 10000)) != HAL_OK)
 80006ae:	481b      	ldr	r0, [pc, #108]	; (800071c <main+0xa4>)
 80006b0:	f7ff fd64 	bl	800017c <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3b01      	subs	r3, #1
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80006c0:	4916      	ldr	r1, [pc, #88]	; (800071c <main+0xa4>)
 80006c2:	4817      	ldr	r0, [pc, #92]	; (8000720 <main+0xa8>)
 80006c4:	f001 fba7 	bl	8001e16 <HAL_I2C_Slave_Receive>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <main+0x5c>
  {
	  ptr = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  parse_t parse1;
  parse1.next_byte = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  parse1.Processed_Rx_Bytes = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  parse_t parse2;
  parse2.next_byte = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  parse2.Processed_Rx_Bytes = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  char str1[] = "CMD+";
 80006e4:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <main+0xac>)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ec:	6018      	str	r0, [r3, #0]
 80006ee:	3304      	adds	r3, #4
 80006f0:	7019      	strb	r1, [r3, #0]
  while (1)
  {
	 //parse_UART_to_func(&huart1, &parse1);
	  if (ptr)
 80006f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <main+0x90>
	  {
		  HAL_I2C_Slave_Transmit(&hi2c1, "CONNECT\n", 7, 10000);
 80006fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80006fe:	2207      	movs	r2, #7
 8000700:	4909      	ldr	r1, [pc, #36]	; (8000728 <main+0xb0>)
 8000702:	4807      	ldr	r0, [pc, #28]	; (8000720 <main+0xa8>)
 8000704:	f001 fa7e 	bl	8001c04 <HAL_I2C_Slave_Transmit>
	  }
	  parse_I2C_to_func(&hi2c1, &parse2);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <main+0xa8>)
 8000710:	f7ff feec 	bl	80004ec <parse_I2C_to_func>
	  if (ptr)
 8000714:	e7ed      	b.n	80006f2 <main+0x7a>
 8000716:	bf00      	nop
 8000718:	200003b4 	.word	0x200003b4
 800071c:	200003b8 	.word	0x200003b8
 8000720:	20000200 	.word	0x20000200
 8000724:	08006810 	.word	0x08006810
 8000728:	08006840 	.word	0x08006840

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b0ae      	sub	sp, #184	; 0xb8
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000736:	2248      	movs	r2, #72	; 0x48
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f005 ff7e 	bl	800663c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
 8000750:	615a      	str	r2, [r3, #20]
 8000752:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2250      	movs	r2, #80	; 0x50
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f005 ff6e 	bl	800663c <memset>

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800076a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800076e:	60d3      	str	r3, [r2, #12]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	f023 0303 	bic.w	r3, r3, #3
 800077a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	60d3      	str	r3, [r2, #12]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000784:	f002 fce8 	bl	8003158 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fe7f 	bl	800048c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078e:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <SystemClock_Config+0x154>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000796:	4a3a      	ldr	r2, [pc, #232]	; (8000880 <SystemClock_Config+0x154>)
 8000798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <SystemClock_Config+0x154>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80007aa:	2327      	movs	r3, #39	; 0x27
 80007ac:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007be:	2301      	movs	r3, #1
 80007c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007d0:	2360      	movs	r3, #96	; 0x60
 80007d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 f84d 	bl	8003880 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007ec:	f000 fa00 	bl	8000bf0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80007f0:	236f      	movs	r3, #111	; 0x6f
 80007f2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007f4:	2302      	movs	r3, #2
 80007f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800080c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000810:	2101      	movs	r1, #1
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fbc0 	bl	8003f98 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800081e:	f000 f9e7 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000822:	f242 1307 	movw	r3, #8455	; 0x2107
 8000826:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000828:	2318      	movs	r3, #24
 800082a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800082c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000830:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000836:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000838:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800083c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800083e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000842:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800084c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000852:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000856:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800085c:	2300      	movs	r3, #0
 800085e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4618      	mov	r0, r3
 8000864:	f003 ffe6 	bl	8004834 <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x146>
  {
    Error_Handler();
 800086e:	f000 f9bf 	bl	8000bf0 <Error_Handler>
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000872:	f004 f954 	bl	8004b1e <HAL_RCCEx_EnableMSIPLLMode>
}
 8000876:	bf00      	nop
 8000878:	37b8      	adds	r7, #184	; 0xb8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	58000400 	.word	0x58000400

08000884 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_I2C1_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <MX_I2C1_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <MX_I2C1_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <MX_I2C1_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0x48;
 8000894:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_I2C1_Init+0x74>)
 8000896:	2248      	movs	r2, #72	; 0x48
 8000898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_I2C1_Init+0x74>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008c0:	f001 f8e2 	bl	8001a88 <HAL_I2C_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ca:	f000 f991 	bl	8000bf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008d2:	f002 fac5 	bl	8002e60 <HAL_I2CEx_ConfigAnalogFilter>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008dc:	f000 f988 	bl	8000bf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_I2C1_Init+0x74>)
 80008e4:	f002 fb07 	bl	8002ef6 <HAL_I2CEx_ConfigDigitalFilter>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 f97f 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000200 	.word	0x20000200
 80008fc:	40005400 	.word	0x40005400
 8000900:	00707cbb 	.word	0x00707cbb

08000904 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000908:	4b22      	ldr	r3, [pc, #136]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 800090a:	4a23      	ldr	r2, [pc, #140]	; (8000998 <MX_LPUART1_UART_Init+0x94>)
 800090c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000910:	4a22      	ldr	r2, [pc, #136]	; (800099c <MX_LPUART1_UART_Init+0x98>)
 8000912:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800091a:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000926:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000928:	220c      	movs	r2, #12
 800092a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092c:	4b19      	ldr	r3, [pc, #100]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800094a:	4812      	ldr	r0, [pc, #72]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 800094c:	f004 ff0c 	bl	8005768 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8000956:	f000 f94b 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800095a:	2100      	movs	r1, #0
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 800095e:	f005 fd09 	bl	8006374 <HAL_UARTEx_SetTxFifoThreshold>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8000968:	f000 f942 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000970:	f005 fd3e 	bl	80063f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800097a:	f000 f939 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_LPUART1_UART_Init+0x90>)
 8000980:	f005 fcbf 	bl	8006302 <HAL_UARTEx_DisableFifoMode>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800098a:	f000 f931 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000024c 	.word	0x2000024c
 8000998:	40008000 	.word	0x40008000
 800099c:	00033324 	.word	0x00033324

080009a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <MX_USART1_UART_Init+0x94>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009ea:	f004 febd 	bl	8005768 <HAL_UART_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 f8fc 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 80009fc:	f005 fcba 	bl	8006374 <HAL_UARTEx_SetTxFifoThreshold>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f000 f8f3 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 8000a0e:	f005 fcef 	bl	80063f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f000 f8ea 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_USART1_UART_Init+0x90>)
 8000a1e:	f005 fc70 	bl	8006302 <HAL_UARTEx_DisableFifoMode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f000 f8e2 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200002dc 	.word	0x200002dc
 8000a34:	40013800 	.word	0x40013800

08000a38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2234      	movs	r2, #52	; 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f005 fdec 	bl	800663c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000a66:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <MX_TIM1_Init+0xd0>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000a6c:	f240 123f 	movw	r2, #319	; 0x13f
 8000a70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = period;
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <MX_TIM1_Init+0xd4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000a7e:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a92:	481c      	ldr	r0, [pc, #112]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000a94:	f004 f95a 	bl	8004d4c <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000a9e:	f000 f8a7 	bl	8000bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000aac:	4619      	mov	r1, r3
 8000aae:	4815      	ldr	r0, [pc, #84]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000ab0:	f004 fb40 	bl	8005134 <HAL_TIM_ConfigClockSource>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000aba:	f000 f899 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000ad2:	f004 fd1b 	bl	800550c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000adc:	f000 f888 	bl	8000bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_TIM1_Init+0xcc>)
 8000aee:	f004 fd6d 	bl	80055cc <HAL_TIMEx_ConfigBreakDeadTime>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000af8:	f000 f87a 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	; 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000368 	.word	0x20000368
 8000b08:	40012c00 	.word	0x40012c00
 8000b0c:	20000004 	.word	0x20000004

08000b10 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b16:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <MX_USB_PCD_Init+0x4c>)
 8000b18:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b22:	2202      	movs	r2, #2
 8000b24:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b28:	2202      	movs	r2, #2
 8000b2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <MX_USB_PCD_Init+0x48>)
 8000b46:	f002 fa22 	bl	8002f8e <HAL_PCD_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000b50:	f000 f84e 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000041c 	.word	0x2000041c
 8000b5c:	40006800 	.word	0x40006800

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2004      	movs	r0, #4
 8000b76:	f7ff fc9f 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff fc9c 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	2001      	movs	r0, #1
 8000b82:	f7ff fc99 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2008      	movs	r0, #8
 8000b88:	f7ff fc96 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2123      	movs	r1, #35	; 0x23
 8000b90:	4814      	ldr	r0, [pc, #80]	; (8000be4 <MX_GPIO_Init+0x84>)
 8000b92:	f000 ff47 	bl	8001a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b96:	2310      	movs	r3, #16
 8000b98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4810      	ldr	r0, [pc, #64]	; (8000be8 <MX_GPIO_Init+0x88>)
 8000ba8:	f000 fcee 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000bac:	2323      	movs	r3, #35	; 0x23
 8000bae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4808      	ldr	r0, [pc, #32]	; (8000be4 <MX_GPIO_Init+0x84>)
 8000bc2:	f000 fce1 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0x8c>)
 8000bd8:	f000 fcd6 	bl	8001588 <HAL_GPIO_Init>

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	48000400 	.word	0x48000400
 8000be8:	48000800 	.word	0x48000800
 8000bec:	48000c00 	.word	0x48000c00

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <Error_Handler+0x6>

08000bf8 <LL_AHB2_GRP1_EnableClock>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c80:	68fb      	ldr	r3, [r7, #12]
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0x7c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d127      	bne.n	8000d66 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2002      	movs	r0, #2
 8000d18:	f7ff ff6e 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d22:	2312      	movs	r3, #18
 8000d24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d2e:	2304      	movs	r3, #4
 8000d30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 030c 	add.w	r3, r7, #12
 8000d36:	4619      	mov	r1, r3
 8000d38:	480e      	ldr	r0, [pc, #56]	; (8000d74 <HAL_I2C_MspInit+0x80>)
 8000d3a:	f000 fc25 	bl	8001588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d42:	f7ff ff72 	bl	8000c2a <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	201e      	movs	r0, #30
 8000d4c:	f000 fb6d 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d50:	201e      	movs	r0, #30
 8000d52:	f000 fb84 	bl	800145e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	201f      	movs	r0, #31
 8000d5c:	f000 fb65 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d60:	201f      	movs	r0, #31
 8000d62:	f000 fb7c 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40005400 	.word	0x40005400
 8000d74:	48000400 	.word	0x48000400

08000d78 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <HAL_I2C_MspDeInit+0x44>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d113      	bne.n	8000db2 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000d8a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d8e:	f7ff ff7e 	bl	8000c8e <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <HAL_I2C_MspDeInit+0x48>)
 8000d98:	f000 fd66 	bl	8001868 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <HAL_I2C_MspDeInit+0x48>)
 8000da2:	f000 fd61 	bl	8001868 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000da6:	201e      	movs	r0, #30
 8000da8:	f000 fb67 	bl	800147a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000dac:	201f      	movs	r0, #31
 8000dae:	f000 fb64 	bl	800147a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <HAL_UART_MspInit+0xb0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d11e      	bne.n	8000e24 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff ff38 	bl	8000c5c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	2004      	movs	r0, #4
 8000dee:	f7ff ff03 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df2:	2303      	movs	r3, #3
 8000df4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e02:	2308      	movs	r3, #8
 8000e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481a      	ldr	r0, [pc, #104]	; (8000e78 <HAL_UART_MspInit+0xb4>)
 8000e0e:	f000 fbbb 	bl	8001588 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2025      	movs	r0, #37	; 0x25
 8000e18:	f000 fb07 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e1c:	2025      	movs	r0, #37	; 0x25
 8000e1e:	f000 fb1e 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e22:	e023      	b.n	8000e6c <HAL_UART_MspInit+0xa8>
  else if(huart->Instance==USART1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_UART_MspInit+0xb8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d11e      	bne.n	8000e6c <HAL_UART_MspInit+0xa8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e32:	f7ff ff3f 	bl	8000cb4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff fede 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e3c:	23c0      	movs	r3, #192	; 0xc0
 8000e3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	4619      	mov	r1, r3
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <HAL_UART_MspInit+0xbc>)
 8000e58:	f000 fb96 	bl	8001588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2024      	movs	r0, #36	; 0x24
 8000e62:	f000 fae2 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e66:	2024      	movs	r0, #36	; 0x24
 8000e68:	f000 faf9 	bl	800145e <HAL_NVIC_EnableIRQ>
}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40008000 	.word	0x40008000
 8000e78:	48000800 	.word	0x48000800
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	48000400 	.word	0x48000400

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_TIM_Base_MspInit+0x34>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10b      	bne.n	8000eae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e96:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e9a:	f7ff ff0b 	bl	8000cb4 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2019      	movs	r0, #25
 8000ea4:	f000 fac1 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ea8:	2019      	movs	r0, #25
 8000eaa:	f000 fad8 	bl	800145e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40012c00 	.word	0x40012c00

08000ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0f      	ldr	r2, [pc, #60]	; (8000f18 <HAL_PCD_MspInit+0x5c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d118      	bne.n	8000f10 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff fe8a 	bl	8000bf8 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ee4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ee8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ef6:	230a      	movs	r3, #10
 8000ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f000 fb40 	bl	8001588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f08:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000f0c:	f7ff fe8d 	bl	8000c2a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40006800 	.word	0x40006800

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 f936 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if (led_on == 0)
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <TIM1_UP_TIM16_IRQHandler+0x3c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d104      	bne.n	8000f86 <TIM1_UP_TIM16_IRQHandler+0x16>
	{
		HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000f7c:	2120      	movs	r1, #32
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000f80:	f000 fd68 	bl	8001a54 <HAL_GPIO_TogglePin>
 8000f84:	e00c      	b.n	8000fa0 <TIM1_UP_TIM16_IRQHandler+0x30>
	}
	else if (led_on == 1)
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <TIM1_UP_TIM16_IRQHandler+0x3c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d104      	bne.n	8000f98 <TIM1_UP_TIM16_IRQHandler+0x28>
	{
		HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000f92:	f000 fd5f 	bl	8001a54 <HAL_GPIO_TogglePin>
 8000f96:	e003      	b.n	8000fa0 <TIM1_UP_TIM16_IRQHandler+0x30>
	}
	else
	{
		HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <TIM1_UP_TIM16_IRQHandler+0x40>)
 8000f9c:	f000 fd5a 	bl	8001a54 <HAL_GPIO_TogglePin>
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <TIM1_UP_TIM16_IRQHandler+0x44>)
 8000fa2:	f003 ffa8 	bl	8004ef6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200002d8 	.word	0x200002d8
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	20000368 	.word	0x20000368

08000fb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <I2C1_EV_IRQHandler+0x10>)
 8000fbe:	f001 f829 	bl	8002014 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000200 	.word	0x20000200

08000fcc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <I2C1_ER_IRQHandler+0x10>)
 8000fd2:	f001 f839 	bl	8002048 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000200 	.word	0x20000200

08000fe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <USART1_IRQHandler+0x10>)
 8000fe6:	f004 fc0f 	bl	8005808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200002dc 	.word	0x200002dc

08000ff4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <LPUART1_IRQHandler+0x10>)
 8000ffa:	f004 fc05 	bl	8005808 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000024c 	.word	0x2000024c

08001008 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <SystemInit+0xa0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <SystemInit+0xa0>)
 8001014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001018:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <SystemInit+0xa0>)
 800101a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800103a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <SystemInit+0xa4>)
 8001048:	4013      	ands	r3, r2
 800104a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800104c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001058:	f023 0305 	bic.w	r3, r3, #5
 800105c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <SystemInit+0xa8>)
 800107a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800107c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <SystemInit+0xa8>)
 8001082:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800108e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001092:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	faf6fefb 	.word	0xfaf6fefb
 80010b0:	22041000 	.word	0x22041000

080010b4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80010b4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b8:	3304      	adds	r3, #4

080010ba <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010ba:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010bc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80010be:	d3f9      	bcc.n	80010b4 <CopyDataInit>
  bx lr
 80010c0:	4770      	bx	lr

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80010c2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80010c4:	3004      	adds	r0, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80010c6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>
  bx lr
 80010ca:	4770      	bx	lr

080010cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80010ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010d0:	f7ff ff9a 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <LoopForever+0x8>)
 80010d6:	490c      	ldr	r1, [pc, #48]	; (8001108 <LoopForever+0xc>)
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <LoopForever+0x10>)
 80010da:	2300      	movs	r3, #0
 80010dc:	f7ff ffed 	bl	80010ba <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80010e0:	480b      	ldr	r0, [pc, #44]	; (8001110 <LoopForever+0x14>)
 80010e2:	490c      	ldr	r1, [pc, #48]	; (8001114 <LoopForever+0x18>)
 80010e4:	2300      	movs	r3, #0
 80010e6:	f7ff ffee 	bl	80010c6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80010ea:	480b      	ldr	r0, [pc, #44]	; (8001118 <LoopForever+0x1c>)
 80010ec:	490b      	ldr	r1, [pc, #44]	; (800111c <LoopForever+0x20>)
 80010ee:	2300      	movs	r3, #0
 80010f0:	f7ff ffe9 	bl	80010c6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010f4:	f005 fa7e 	bl	80065f4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80010f8:	f7ff fabe 	bl	8000678 <main>

080010fc <LoopForever>:

LoopForever:
  b LoopForever
 80010fc:	e7fe      	b.n	80010fc <LoopForever>
 80010fe:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001100:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001104:	20000004 	.word	0x20000004
 8001108:	200001e4 	.word	0x200001e4
 800110c:	08006a6c 	.word	0x08006a6c
  INIT_BSS _sbss, _ebss
 8001110:	200001e4 	.word	0x200001e4
 8001114:	20000694 	.word	0x20000694
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001118:	20030000 	.word	0x20030000
 800111c:	20030000 	.word	0x20030000

08001120 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001120:	e7fe      	b.n	8001120 <ADC1_IRQHandler>
	...

08001124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_Init+0x3c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_Init+0x3c>)
 8001134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001138:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113a:	2003      	movs	r0, #3
 800113c:	f000 f96a 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001140:	2000      	movs	r0, #0
 8001142:	f000 f80f 	bl	8001164 <HAL_InitTick>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	e001      	b.n	8001156 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001152:	f7ff fdc8 	bl	8000ce6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001156:	79fb      	ldrb	r3, [r7, #7]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	58004000 	.word	0x58004000

08001164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_InitTick+0x6c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d024      	beq.n	80011c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001178:	f003 f8b8 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800117c:	4602      	mov	r2, r0
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_InitTick+0x6c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	fbb3 f3f1 	udiv	r3, r3, r1
 800118c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f980 	bl	8001496 <HAL_SYSTICK_Config>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10f      	bne.n	80011bc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b0f      	cmp	r3, #15
 80011a0:	d809      	bhi.n	80011b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a2:	2200      	movs	r2, #0
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011aa:	f000 f93e 	bl	800142a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_InitTick+0x70>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	e007      	b.n	80011c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e004      	b.n	80011c6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e001      	b.n	80011c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000010 	.word	0x20000010
 80011d4:	2000000c 	.word	0x2000000c

080011d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x20>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_IncTick+0x24>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <HAL_IncTick+0x24>)
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000010 	.word	0x20000010
 80011fc:	20000690 	.word	0x20000690

08001200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return uwTick;
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_GetTick+0x14>)
 8001206:	681b      	ldr	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000690 	.word	0x20000690

08001218 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTickPrio+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	2000000c 	.word	0x2000000c

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db10      	blt.n	8001304 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4909      	ldr	r1, [pc, #36]	; (8001310 <__NVIC_DisableIRQ+0x40>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	3320      	adds	r3, #32
 80012f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001300:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001304:	bf00      	nop
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	2b00      	cmp	r3, #0
 8001326:	db0a      	blt.n	800133e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	b2da      	uxtb	r2, r3
 800132c:	490c      	ldr	r1, [pc, #48]	; (8001360 <__NVIC_SetPriority+0x4c>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	440b      	add	r3, r1
 8001338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800133c:	e00a      	b.n	8001354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4908      	ldr	r1, [pc, #32]	; (8001364 <__NVIC_SetPriority+0x50>)
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	3b04      	subs	r3, #4
 800134c:	0112      	lsls	r2, r2, #4
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	440b      	add	r3, r1
 8001352:	761a      	strb	r2, [r3, #24]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001368:	b480      	push	{r7}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f1c3 0307 	rsb	r3, r3, #7
 8001382:	2b04      	cmp	r3, #4
 8001384:	bf28      	it	cs
 8001386:	2304      	movcs	r3, #4
 8001388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3304      	adds	r3, #4
 800138e:	2b06      	cmp	r3, #6
 8001390:	d902      	bls.n	8001398 <NVIC_EncodePriority+0x30>
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3b03      	subs	r3, #3
 8001396:	e000      	b.n	800139a <NVIC_EncodePriority+0x32>
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43da      	mvns	r2, r3
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	401a      	ands	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	43d9      	mvns	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	4313      	orrs	r3, r2
         );
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3724      	adds	r7, #36	; 0x24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f4:	f7ff ff8e 	bl	8001314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff07 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001438:	f7ff ff1e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 800143c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	68b9      	ldr	r1, [r7, #8]
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f7ff ff90 	bl	8001368 <NVIC_EncodePriority>
 8001448:	4602      	mov	r2, r0
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5f 	bl	8001314 <__NVIC_SetPriority>
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff11 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff21 	bl	80012d0 <__NVIC_DisableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff96 	bl	80013d0 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d005      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2204      	movs	r2, #4
 80014ca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e047      	b.n	8001562 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 020e 	bic.w	r2, r2, #14
 80014e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0201 	bic.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001500:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 021c 	and.w	r2, r3, #28
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800151e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00c      	beq.n	8001542 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001536:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001540:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
    }
  }
  return status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800157a:	b2db      	uxtb	r3, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	e14c      	b.n	8001832 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2101      	movs	r1, #1
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 813e 	beq.w	800182c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d00b      	beq.n	80015d0 <HAL_GPIO_Init+0x48>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d007      	beq.n	80015d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c4:	2b11      	cmp	r3, #17
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b12      	cmp	r3, #18
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 0201 	and.w	r2, r3, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	2203      	movs	r2, #3
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0xea>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b12      	cmp	r3, #18
 8001670:	d123      	bne.n	80016ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	08da      	lsrs	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3208      	adds	r2, #8
 800167a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	08da      	lsrs	r2, r3, #3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3208      	adds	r2, #8
 80016b4:	6939      	ldr	r1, [r7, #16]
 80016b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	2203      	movs	r2, #3
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0203 	and.w	r2, r3, #3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8098 	beq.w	800182c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80016fc:	4a54      	ldr	r2, [pc, #336]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001726:	d019      	beq.n	800175c <HAL_GPIO_Init+0x1d4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <HAL_GPIO_Init+0x2cc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d013      	beq.n	8001758 <HAL_GPIO_Init+0x1d0>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a49      	ldr	r2, [pc, #292]	; (8001858 <HAL_GPIO_Init+0x2d0>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d00d      	beq.n	8001754 <HAL_GPIO_Init+0x1cc>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	4a48      	ldr	r2, [pc, #288]	; (800185c <HAL_GPIO_Init+0x2d4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x1c8>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a47      	ldr	r2, [pc, #284]	; (8001860 <HAL_GPIO_Init+0x2d8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_GPIO_Init+0x1c4>
 8001748:	2304      	movs	r3, #4
 800174a:	e008      	b.n	800175e <HAL_GPIO_Init+0x1d6>
 800174c:	2307      	movs	r3, #7
 800174e:	e006      	b.n	800175e <HAL_GPIO_Init+0x1d6>
 8001750:	2303      	movs	r3, #3
 8001752:	e004      	b.n	800175e <HAL_GPIO_Init+0x1d6>
 8001754:	2302      	movs	r3, #2
 8001756:	e002      	b.n	800175e <HAL_GPIO_Init+0x1d6>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <HAL_GPIO_Init+0x1d6>
 800175c:	2300      	movs	r3, #0
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	f002 0203 	and.w	r2, r2, #3
 8001764:	0092      	lsls	r2, r2, #2
 8001766:	4093      	lsls	r3, r2
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800176e:	4938      	ldr	r1, [pc, #224]	; (8001850 <HAL_GPIO_Init+0x2c8>)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	3302      	adds	r3, #2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_GPIO_Init+0x2dc>)
 800177e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017a2:	4a30      	ldr	r2, [pc, #192]	; (8001864 <HAL_GPIO_Init+0x2dc>)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_GPIO_Init+0x2dc>)
 80017ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017d0:	4a24      	ldr	r2, [pc, #144]	; (8001864 <HAL_GPIO_Init+0x2dc>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <HAL_GPIO_Init+0x2dc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017fc:	4a19      	ldr	r2, [pc, #100]	; (8001864 <HAL_GPIO_Init+0x2dc>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_GPIO_Init+0x2dc>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001826:	4a0f      	ldr	r2, [pc, #60]	; (8001864 <HAL_GPIO_Init+0x2dc>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f47f aeab 	bne.w	8001598 <HAL_GPIO_Init+0x10>
  }
}
 8001842:	bf00      	nop
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40010000 	.word	0x40010000
 8001854:	48000400 	.word	0x48000400
 8001858:	48000800 	.word	0x48000800
 800185c:	48000c00 	.word	0x48000c00
 8001860:	48001000 	.word	0x48001000
 8001864:	58000800 	.word	0x58000800

08001868 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001876:	e0bb      	b.n	80019f0 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001878:	2201      	movs	r2, #1
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80ae 	beq.w	80019ea <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2u];
 800188e:	4a5f      	ldr	r2, [pc, #380]	; (8001a0c <HAL_GPIO_DeInit+0x1a4>)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b6:	d019      	beq.n	80018ec <HAL_GPIO_DeInit+0x84>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a55      	ldr	r2, [pc, #340]	; (8001a10 <HAL_GPIO_DeInit+0x1a8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d013      	beq.n	80018e8 <HAL_GPIO_DeInit+0x80>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <HAL_GPIO_DeInit+0x1ac>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d00d      	beq.n	80018e4 <HAL_GPIO_DeInit+0x7c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_GPIO_DeInit+0x1b0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d007      	beq.n	80018e0 <HAL_GPIO_DeInit+0x78>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_GPIO_DeInit+0x1b4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d101      	bne.n	80018dc <HAL_GPIO_DeInit+0x74>
 80018d8:	2304      	movs	r3, #4
 80018da:	e008      	b.n	80018ee <HAL_GPIO_DeInit+0x86>
 80018dc:	2307      	movs	r3, #7
 80018de:	e006      	b.n	80018ee <HAL_GPIO_DeInit+0x86>
 80018e0:	2303      	movs	r3, #3
 80018e2:	e004      	b.n	80018ee <HAL_GPIO_DeInit+0x86>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_DeInit+0x86>
 80018e8:	2301      	movs	r3, #1
 80018ea:	e000      	b.n	80018ee <HAL_GPIO_DeInit+0x86>
 80018ec:	2300      	movs	r3, #0
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d136      	bne.n	800196c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80018fe:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <HAL_GPIO_DeInit+0x1b8>)
 8001900:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	4945      	ldr	r1, [pc, #276]	; (8001a20 <HAL_GPIO_DeInit+0x1b8>)
 800190a:	4013      	ands	r3, r2
 800190c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_GPIO_DeInit+0x1b8>)
 8001912:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	4941      	ldr	r1, [pc, #260]	; (8001a20 <HAL_GPIO_DeInit+0x1b8>)
 800191c:	4013      	ands	r3, r2
 800191e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <HAL_GPIO_DeInit+0x1b8>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	493d      	ldr	r1, [pc, #244]	; (8001a20 <HAL_GPIO_DeInit+0x1b8>)
 800192c:	4013      	ands	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_GPIO_DeInit+0x1b8>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	4939      	ldr	r1, [pc, #228]	; (8001a20 <HAL_GPIO_DeInit+0x1b8>)
 800193a:	4013      	ands	r3, r2
 800193c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800194e:	4a2f      	ldr	r2, [pc, #188]	; (8001a0c <HAL_GPIO_DeInit+0x1a4>)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43da      	mvns	r2, r3
 800195e:	482b      	ldr	r0, [pc, #172]	; (8001a0c <HAL_GPIO_DeInit+0x1a4>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	400a      	ands	r2, r1
 8001966:	3302      	adds	r3, #2
 8001968:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2103      	movs	r1, #3
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	08d2      	lsrs	r2, r2, #3
 80019a0:	4019      	ands	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2103      	movs	r1, #3
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2101      	movs	r1, #1
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2103      	movs	r1, #3
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	401a      	ands	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	609a      	str	r2, [r3, #8]
    }
    
    position++;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f af3d 	bne.w	8001878 <HAL_GPIO_DeInit+0x10>
  }
}
 80019fe:	bf00      	nop
 8001a00:	371c      	adds	r7, #28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	48000800 	.word	0x48000800
 8001a18:	48000c00 	.word	0x48000c00
 8001a1c:	48001000 	.word	0x48001000
 8001a20:	58000800 	.word	0x58000800

08001a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a34:	787b      	ldrb	r3, [r7, #1]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	041a      	lsls	r2, r3, #16
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	43d9      	mvns	r1, r3
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	400b      	ands	r3, r1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e081      	b.n	8001b9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff f920 	bl	8000cf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	; 0x24
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	e006      	b.n	8001b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d104      	bne.n	8001b22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	ea42 0103 	orr.w	r1, r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	021a      	lsls	r2, r3, #8
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69d9      	ldr	r1, [r3, #28]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e021      	b.n	8001bfc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2224      	movs	r2, #36	; 0x24
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff f8d1 	bl	8000d78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	f040 80f5 	bne.w	8001e0c <HAL_I2C_Slave_Transmit+0x208>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_I2C_Slave_Transmit+0x2a>
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d105      	bne.n	8001c3a <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0e9      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_I2C_Slave_Transmit+0x44>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e0e2      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c50:	f7ff fad6 	bl	8001200 <HAL_GetTick>
 8001c54:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2221      	movs	r2, #33	; 0x21
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2220      	movs	r2, #32
 8001c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	88fa      	ldrh	r2, [r7, #6]
 8001c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c8c:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	2108      	movs	r1, #8
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 fef4 	bl	8002a86 <I2C_WaitOnFlagUntilTimeout>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cb2:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0aa      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d118      	bne.n	8001cfa <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2108      	movs	r1, #8
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fed7 	bl	8002a86 <I2C_WaitOnFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d009      	beq.n	8001cf2 <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cec:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e08d      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 febd 	bl	8002a86 <I2C_WaitOnFlagUntilTimeout>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d02d      	beq.n	8001d6e <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d20:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e073      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	6839      	ldr	r1, [r7, #0]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 feeb 	bl	8002b06 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d44:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e061      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1d6      	bne.n	8001d26 <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	6839      	ldr	r1, [r7, #0]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 ff02 	bl	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d011      	beq.n	8001dac <HAL_I2C_Slave_Transmit+0x1a8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d96:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d103      	bne.n	8001da8 <HAL_I2C_Slave_Transmit+0x1a4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
 8001da6:	e001      	b.n	8001dac <HAL_I2C_Slave_Transmit+0x1a8>
      }
      else
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e030      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2220      	movs	r2, #32
 8001db2:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fe60 	bl	8002a86 <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_I2C_Slave_Transmit+0x1dc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dda:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e016      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <HAL_I2C_Slave_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001e0c:	2302      	movs	r3, #2
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af02      	add	r7, sp, #8
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	f040 80eb 	bne.w	800200a <HAL_I2C_Slave_Receive+0x1f4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <HAL_I2C_Slave_Receive+0x2a>
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0df      	b.n	800200c <HAL_I2C_Slave_Receive+0x1f6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_I2C_Slave_Receive+0x44>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0d8      	b.n	800200c <HAL_I2C_Slave_Receive+0x1f6>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e62:	f7ff f9cd 	bl	8001200 <HAL_GetTick>
 8001e66:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2222      	movs	r2, #34	; 0x22
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	88fa      	ldrh	r2, [r7, #6]
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9e:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2108      	movs	r1, #8
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fdeb 	bl	8002a86 <I2C_WaitOnFlagUntilTimeout>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_I2C_Slave_Receive+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0a0      	b.n	800200c <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2208      	movs	r2, #8
 8001ed0:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fdd1 	bl	8002a86 <I2C_WaitOnFlagUntilTimeout>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d048      	beq.n	8001f7c <HAL_I2C_Slave_Receive+0x166>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e086      	b.n	800200c <HAL_I2C_Slave_Receive+0x1f6>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fe7c 	bl	8002c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d023      	beq.n	8001f56 <HAL_I2C_Slave_Receive+0x140>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1c:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d112      	bne.n	8001f52 <HAL_I2C_Slave_Receive+0x13c>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	855a      	strh	r2, [r3, #42]	; 0x2a
        }

        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e05a      	b.n	800200c <HAL_I2C_Slave_Receive+0x1f6>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1bb      	bne.n	8001efe <HAL_I2C_Slave_Receive+0xe8>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fdfb 	bl	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_I2C_Slave_Receive+0x194>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e030      	b.n	800200c <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fd61 	bl	8002a86 <I2C_WaitOnFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_I2C_Slave_Receive+0x1c8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fd8:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e016      	b.n	800200c <HAL_I2C_Slave_Receive+0x1f6>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e000      	b.n	800200c <HAL_I2C_Slave_Receive+0x1f6>
  }
  else
  {
    return HAL_BUSY;
 800200a:	2302      	movs	r3, #2
  }
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
  }
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d010      	beq.n	800208e <HAL_I2C_ER_IRQHandler+0x46>
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	09db      	lsrs	r3, r3, #7
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d00a      	beq.n	800208e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	f043 0201 	orr.w	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	0a9b      	lsrs	r3, r3, #10
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <HAL_I2C_ER_IRQHandler+0x74>
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	09db      	lsrs	r3, r3, #7
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f043 0208 	orr.w	r2, r3, #8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	0a5b      	lsrs	r3, r3, #9
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d010      	beq.n	80020ea <HAL_I2C_ER_IRQHandler+0xa2>
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	09db      	lsrs	r3, r3, #7
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f043 0202 	orr.w	r2, r3, #2
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 030b 	and.w	r3, r3, #11
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80020fa:	68f9      	ldr	r1, [r7, #12]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fb89 	bl	8002814 <I2C_ITError>
  }
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
 800213e:	4613      	mov	r3, r2
 8002140:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <I2C_Slave_ISR_IT+0x24>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e0ec      	b.n	8002388 <I2C_Slave_ISR_IT+0x1fe>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <I2C_Slave_ISR_IT+0x4c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	095b      	lsrs	r3, r3, #5
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80021ce:	6939      	ldr	r1, [r7, #16]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f9bf 	bl	8002554 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04d      	beq.n	800227e <I2C_Slave_ISR_IT+0xf4>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d047      	beq.n	800227e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d128      	bne.n	800224a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b28      	cmp	r3, #40	; 0x28
 8002202:	d108      	bne.n	8002216 <I2C_Slave_ISR_IT+0x8c>
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800220a:	d104      	bne.n	8002216 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800220c:	6939      	ldr	r1, [r7, #16]
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 faaa 	bl	8002768 <I2C_ITListenCplt>
 8002214:	e032      	b.n	800227c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b29      	cmp	r3, #41	; 0x29
 8002220:	d10e      	bne.n	8002240 <I2C_Slave_ISR_IT+0xb6>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002228:	d00a      	beq.n	8002240 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2210      	movs	r2, #16
 8002230:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fbe5 	bl	8002a02 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f92d 	bl	8002498 <I2C_ITSlaveSeqCplt>
 800223e:	e01d      	b.n	800227c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2210      	movs	r2, #16
 8002246:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002248:	e096      	b.n	8002378 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2210      	movs	r2, #16
 8002250:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0204 	orr.w	r2, r3, #4
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <I2C_Slave_ISR_IT+0xe4>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226a:	f040 8085 	bne.w	8002378 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 facd 	bl	8002814 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800227a:	e07d      	b.n	8002378 <I2C_Slave_ISR_IT+0x1ee>
 800227c:	e07c      	b.n	8002378 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d030      	beq.n	80022ec <I2C_Slave_ISR_IT+0x162>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d02a      	beq.n	80022ec <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d018      	beq.n	80022d2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d14f      	bne.n	800237c <I2C_Slave_ISR_IT+0x1f2>
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e2:	d04b      	beq.n	800237c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f8d7 	bl	8002498 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80022ea:	e047      	b.n	800237c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00a      	beq.n	800230e <I2C_Slave_ISR_IT+0x184>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	08db      	lsrs	r3, r3, #3
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002304:	6939      	ldr	r1, [r7, #16]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 f842 	bl	8002390 <I2C_ITAddrCplt>
 800230c:	e037      	b.n	800237e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d031      	beq.n	800237e <I2C_Slave_ISR_IT+0x1f4>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d02b      	beq.n	800237e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d018      	beq.n	8002362 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	; 0x28
 8002360:	e00d      	b.n	800237e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002368:	d002      	beq.n	8002370 <I2C_Slave_ISR_IT+0x1e6>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d106      	bne.n	800237e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f891 	bl	8002498 <I2C_ITSlaveSeqCplt>
 8002376:	e002      	b.n	800237e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002378:	bf00      	nop
 800237a:	e000      	b.n	800237e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800237c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80023a6:	2b28      	cmp	r3, #40	; 0x28
 80023a8:	d16a      	bne.n	8002480 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	0c1b      	lsrs	r3, r3, #16
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80023c8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80023e4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d138      	bne.n	8002460 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80023ee:	897b      	ldrh	r3, [r7, #10]
 80023f0:	09db      	lsrs	r3, r3, #7
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	89bb      	ldrh	r3, [r7, #12]
 80023f6:	4053      	eors	r3, r2
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f003 0306 	and.w	r3, r3, #6
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11c      	bne.n	800243c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002414:	2b02      	cmp	r3, #2
 8002416:	d13b      	bne.n	8002490 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2208      	movs	r2, #8
 8002424:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800242e:	89ba      	ldrh	r2, [r7, #12]
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff fe7c 	bl	8002132 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800243a:	e029      	b.n	8002490 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800243c:	893b      	ldrh	r3, [r7, #8]
 800243e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fcad 	bl	8002da4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002452:	89ba      	ldrh	r2, [r7, #12]
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff fe6a 	bl	8002132 <HAL_I2C_AddrCallback>
}
 800245e:	e017      	b.n	8002490 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fc9d 	bl	8002da4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002472:	89ba      	ldrh	r2, [r7, #12]
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	4619      	mov	r1, r3
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fe5a 	bl	8002132 <HAL_I2C_AddrCallback>
}
 800247e:	e007      	b.n	8002490 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2208      	movs	r2, #8
 8002486:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	0b9b      	lsrs	r3, r3, #14
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e00d      	b.n	80024ea <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	0bdb      	lsrs	r3, r3, #15
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b29      	cmp	r3, #41	; 0x29
 80024f4:	d112      	bne.n	800251c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2228      	movs	r2, #40	; 0x28
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2221      	movs	r2, #33	; 0x21
 8002502:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002504:	2101      	movs	r1, #1
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fc4c 	bl	8002da4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff fdf8 	bl	800210a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800251a:	e017      	b.n	800254c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b2a      	cmp	r3, #42	; 0x2a
 8002526:	d111      	bne.n	800254c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2228      	movs	r2, #40	; 0x28
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2222      	movs	r2, #34	; 0x22
 8002534:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002536:	2102      	movs	r1, #2
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fc33 	bl	8002da4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fde9 	bl	800211e <HAL_I2C_SlaveRxCpltCallback>
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002570:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2220      	movs	r2, #32
 8002578:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b21      	cmp	r3, #33	; 0x21
 800257e:	d002      	beq.n	8002586 <I2C_ITSlaveCplt+0x32>
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2b29      	cmp	r3, #41	; 0x29
 8002584:	d108      	bne.n	8002598 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002586:	f248 0101 	movw	r1, #32769	; 0x8001
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fc0a 	bl	8002da4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2221      	movs	r2, #33	; 0x21
 8002594:	631a      	str	r2, [r3, #48]	; 0x30
 8002596:	e00d      	b.n	80025b4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b22      	cmp	r3, #34	; 0x22
 800259c:	d002      	beq.n	80025a4 <I2C_ITSlaveCplt+0x50>
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	2b2a      	cmp	r3, #42	; 0x2a
 80025a2:	d107      	bne.n	80025b4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80025a4:	f248 0102 	movw	r1, #32770	; 0x8002
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fbfb 	bl	8002da4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2222      	movs	r2, #34	; 0x22
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025c2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6859      	ldr	r1, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b64      	ldr	r3, [pc, #400]	; (8002760 <I2C_ITSlaveCplt+0x20c>)
 80025d0:	400b      	ands	r3, r1
 80025d2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fa14 	bl	8002a02 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	0b9b      	lsrs	r3, r3, #14
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d013      	beq.n	800260e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80025f4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d020      	beq.n	8002640 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	b29a      	uxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800260c:	e018      	b.n	8002640 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	0bdb      	lsrs	r3, r3, #15
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002628:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0304 	bic.w	r3, r3, #4
 8002652:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00c      	beq.n	800268e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	f043 0204 	orr.w	r2, r3, #4
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d010      	beq.n	80026dc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8a7 	bl	8002814 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b28      	cmp	r3, #40	; 0x28
 80026d0:	d141      	bne.n	8002756 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80026d2:	6979      	ldr	r1, [r7, #20]
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f847 	bl	8002768 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80026da:	e03c      	b.n	8002756 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e4:	d014      	beq.n	8002710 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff fed6 	bl	8002498 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <I2C_ITSlaveCplt+0x210>)
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fd20 	bl	800214e <HAL_I2C_ListenCpltCallback>
}
 800270e:	e022      	b.n	8002756 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b22      	cmp	r3, #34	; 0x22
 800271a:	d10e      	bne.n	800273a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff fcf3 	bl	800211e <HAL_I2C_SlaveRxCpltCallback>
}
 8002738:	e00d      	b.n	8002756 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fcda 	bl	800210a <HAL_I2C_SlaveTxCpltCallback>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	fe00e800 	.word	0xfe00e800
 8002764:	ffff0000 	.word	0xffff0000

08002768 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a26      	ldr	r2, [pc, #152]	; (8002810 <I2C_ITListenCplt+0xa8>)
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d022      	beq.n	80027e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d012      	beq.n	80027e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f043 0204 	orr.w	r2, r3, #4
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80027e6:	f248 0103 	movw	r1, #32771	; 0x8003
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fada 	bl	8002da4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2210      	movs	r2, #16
 80027f6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fca4 	bl	800214e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	ffff0000 	.word	0xffff0000

08002814 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <I2C_ITError+0x194>)
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b28      	cmp	r3, #40	; 0x28
 800284a:	d005      	beq.n	8002858 <I2C_ITError+0x44>
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b29      	cmp	r3, #41	; 0x29
 8002850:	d002      	beq.n	8002858 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b2a      	cmp	r3, #42	; 0x2a
 8002856:	d10b      	bne.n	8002870 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002858:	2103      	movs	r1, #3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 faa2 	bl	8002da4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2228      	movs	r2, #40	; 0x28
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a50      	ldr	r2, [pc, #320]	; (80029ac <I2C_ITError+0x198>)
 800286c:	635a      	str	r2, [r3, #52]	; 0x34
 800286e:	e011      	b.n	8002894 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002870:	f248 0103 	movw	r1, #32771	; 0x8003
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fa95 	bl	8002da4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b60      	cmp	r3, #96	; 0x60
 8002884:	d003      	beq.n	800288e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2220      	movs	r2, #32
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d039      	beq.n	8002916 <I2C_ITError+0x102>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b11      	cmp	r3, #17
 80028a6:	d002      	beq.n	80028ae <I2C_ITError+0x9a>
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b21      	cmp	r3, #33	; 0x21
 80028ac:	d133      	bne.n	8002916 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028bc:	d107      	bne.n	80028ce <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fe4a 	bl	800156c <HAL_DMA_GetState>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d017      	beq.n	800290e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	4a33      	ldr	r2, [pc, #204]	; (80029b0 <I2C_ITError+0x19c>)
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fddb 	bl	80014ae <HAL_DMA_Abort_IT>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d04d      	beq.n	800299a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002908:	4610      	mov	r0, r2
 800290a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800290c:	e045      	b.n	800299a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f850 	bl	80029b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002914:	e041      	b.n	800299a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d039      	beq.n	8002992 <I2C_ITError+0x17e>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b12      	cmp	r3, #18
 8002922:	d002      	beq.n	800292a <I2C_ITError+0x116>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b22      	cmp	r3, #34	; 0x22
 8002928:	d133      	bne.n	8002992 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002938:	d107      	bne.n	800294a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002948:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fe0c 	bl	800156c <HAL_DMA_GetState>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d017      	beq.n	800298a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <I2C_ITError+0x19c>)
 8002960:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fd9d 	bl	80014ae <HAL_DMA_Abort_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d011      	beq.n	800299e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002984:	4610      	mov	r0, r2
 8002986:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002988:	e009      	b.n	800299e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f812 	bl	80029b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002990:	e005      	b.n	800299e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f80e 	bl	80029b4 <I2C_TreatErrorCallback>
  }
}
 8002998:	e002      	b.n	80029a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800299e:	bf00      	nop
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	ffff0000 	.word	0xffff0000
 80029ac:	0800218b 	.word	0x0800218b
 80029b0:	08002a4b 	.word	0x08002a4b

080029b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b60      	cmp	r3, #96	; 0x60
 80029c6:	d10e      	bne.n	80029e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fbc9 	bl	8002176 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029e4:	e009      	b.n	80029fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fbb4 	bl	8002162 <HAL_I2C_ErrorCallback>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d103      	bne.n	8002a20 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d007      	beq.n	8002a3e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	619a      	str	r2, [r3, #24]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	2200      	movs	r2, #0
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a74:	2200      	movs	r2, #0
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7ff ff9b 	bl	80029b4 <I2C_TreatErrorCallback>
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	603b      	str	r3, [r7, #0]
 8002a92:	4613      	mov	r3, r2
 8002a94:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a96:	e022      	b.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9e:	d01e      	beq.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fbae 	bl	8001200 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f043 0220 	orr.w	r2, r3, #32
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00f      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d0cd      	beq.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b12:	e02c      	b.n	8002b6e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f8dd 	bl	8002cd8 <I2C_IsAcknowledgeFailed>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e02a      	b.n	8002b7e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2e:	d01e      	beq.n	8002b6e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b30:	f7fe fb66 	bl	8001200 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d302      	bcc.n	8002b46 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e007      	b.n	8002b7e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d1cb      	bne.n	8002b14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b92:	e028      	b.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f89d 	bl	8002cd8 <I2C_IsAcknowledgeFailed>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e026      	b.n	8002bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba8:	f7fe fb2a 	bl	8001200 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d113      	bne.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e007      	b.n	8002bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	d1cf      	bne.n	8002b94 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
	...

08002c00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c0c:	e055      	b.n	8002cba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f860 	bl	8002cd8 <I2C_IsAcknowledgeFailed>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e053      	b.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d129      	bne.n	8002c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d105      	bne.n	8002c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e03f      	b.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002c5e:	400b      	ands	r3, r1
 8002c60:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e022      	b.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c84:	f7fe fabc 	bl	8001200 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f043 0220 	orr.w	r2, r3, #32
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e007      	b.n	8002cca <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d1a2      	bne.n	8002c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	fe00e800 	.word	0xfe00e800

08002cd8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d151      	bne.n	8002d96 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf2:	e022      	b.n	8002d3a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cfa:	d01e      	beq.n	8002d3a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7fe fa80 	bl	8001200 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <I2C_IsAcknowledgeFailed+0x3a>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d113      	bne.n	8002d3a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e02e      	b.n	8002d98 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d1d5      	bne.n	8002cf4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2220      	movs	r2, #32
 8002d56:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fe52 	bl	8002a02 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <I2C_IsAcknowledgeFailed+0xc8>)
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	fe00e800 	.word	0xfe00e800

08002da4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00f      	beq.n	8002dde <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002dc4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dd2:	2b28      	cmp	r3, #40	; 0x28
 8002dd4:	d003      	beq.n	8002dde <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002ddc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00f      	beq.n	8002e08 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002dee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dfc:	2b28      	cmp	r3, #40	; 0x28
 8002dfe:	d003      	beq.n	8002e08 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002e06:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da03      	bge.n	8002e18 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002e16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d103      	bne.n	8002e26 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002e26:	887b      	ldrh	r3, [r7, #2]
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d103      	bne.n	8002e34 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f043 0320 	orr.w	r3, r3, #32
 8002e32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e34:	887b      	ldrh	r3, [r7, #2]
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d103      	bne.n	8002e42 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6819      	ldr	r1, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	400a      	ands	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d138      	bne.n	8002ee8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e032      	b.n	8002eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2224      	movs	r2, #36	; 0x24
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6819      	ldr	r1, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e000      	b.n	8002eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d139      	bne.n	8002f80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e033      	b.n	8002f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2224      	movs	r2, #36	; 0x24
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0201 	bic.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e000      	b.n	8002f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f80:	2302      	movs	r3, #2
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f90:	b08b      	sub	sp, #44	; 0x2c
 8002f92:	af06      	add	r7, sp, #24
 8002f94:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0ad      	b.n	80030fc <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7fd ff81 	bl	8000ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f003 fad1 	bl	800656e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]
 8002fd0:	e035      	b.n	800303e <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	015b      	lsls	r3, r3, #5
 8002fd8:	4413      	add	r3, r2
 8002fda:	3329      	adds	r3, #41	; 0x29
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	015b      	lsls	r3, r3, #5
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3328      	adds	r3, #40	; 0x28
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	b291      	uxth	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	015b      	lsls	r3, r3, #5
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3336      	adds	r3, #54	; 0x36
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	015b      	lsls	r3, r3, #5
 8003006:	4413      	add	r3, r2
 8003008:	332b      	adds	r3, #43	; 0x2b
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	015b      	lsls	r3, r3, #5
 8003014:	4413      	add	r3, r2
 8003016:	3338      	adds	r3, #56	; 0x38
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	015b      	lsls	r3, r3, #5
 8003022:	4413      	add	r3, r2
 8003024:	333c      	adds	r3, #60	; 0x3c
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	3302      	adds	r3, #2
 8003030:	015b      	lsls	r3, r3, #5
 8003032:	4413      	add	r3, r2
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	3301      	adds	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d3c4      	bcc.n	8002fd2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e031      	b.n	80030b2 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	015b      	lsls	r3, r3, #5
 8003054:	4413      	add	r3, r2
 8003056:	f203 1329 	addw	r3, r3, #297	; 0x129
 800305a:	2200      	movs	r2, #0
 800305c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	4413      	add	r3, r2
 8003066:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	015b      	lsls	r3, r3, #5
 8003074:	4413      	add	r3, r2
 8003076:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	015b      	lsls	r3, r3, #5
 8003084:	4413      	add	r3, r2
 8003086:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	015b      	lsls	r3, r3, #5
 8003094:	4413      	add	r3, r2
 8003096:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	330a      	adds	r3, #10
 80030a4:	015b      	lsls	r3, r3, #5
 80030a6:	4413      	add	r3, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	3301      	adds	r3, #1
 80030b0:	73fb      	strb	r3, [r7, #15]
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d3c8      	bcc.n	800304e <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	687e      	ldr	r6, [r7, #4]
 80030c4:	466d      	mov	r5, sp
 80030c6:	f106 0410 	add.w	r4, r6, #16
 80030ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	602b      	str	r3, [r5, #0]
 80030d2:	1d33      	adds	r3, r6, #4
 80030d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	f003 fa64 	bl	80065a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d102      	bne.n	80030fa <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f805 	bl	8003104 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003104 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003128:	b29b      	uxth	r3, r3
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800313c:	b29b      	uxth	r3, r3
 800313e:	f043 0302 	orr.w	r3, r3, #2
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	58000400 	.word	0x58000400

08003178 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800317c:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_PWREx_GetVoltageRange+0x18>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	58000400 	.word	0x58000400

08003194 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031a6:	d101      	bne.n	80031ac <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_HSE_Enable>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_RCC_HSE_Disable>:
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_RCC_HSE_IsReady>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003206:	d101      	bne.n	800320c <LL_RCC_HSE_IsReady+0x18>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <LL_RCC_HSE_IsReady+0x1a>
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_HSI_Enable>:
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322a:	6013      	str	r3, [r2, #0]
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_RCC_HSI_Disable>:
{
 8003236:	b480      	push	{r7}
 8003238:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003248:	6013      	str	r3, [r2, #0]
}
 800324a:	bf00      	nop
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_RCC_HSI_IsReady>:
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d101      	bne.n	800326c <LL_RCC_HSI_IsReady+0x18>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <LL_RCC_HSI_IsReady+0x1a>
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_RCC_HSI48_Enable>:
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_RCC_HSI48_Disable>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d4:	f023 0301 	bic.w	r3, r3, #1
 80032d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_RCC_HSI48_IsReady>:
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d101      	bne.n	80032fe <LL_RCC_HSI48_IsReady+0x18>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <LL_RCC_HSI48_IsReady+0x1a>
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_RCC_LSE_Enable>:
{
 800330a:	b480      	push	{r7}
 800330c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800330e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_RCC_LSE_Disable>:
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <LL_RCC_LSE_EnableBypass>:
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_RCC_LSE_DisableBypass>:
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d101      	bne.n	80033aa <LL_RCC_LSE_IsReady+0x18>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <LL_RCC_LSE_IsReady+0x1a>
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80033ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80033fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d101      	bne.n	8003412 <LL_RCC_LSI1_IsReady+0x18>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <LL_RCC_LSI1_IsReady+0x1a>
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800341e:	b480      	push	{r7}
 8003420:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800342e:	f043 0304 	orr.w	r3, r3, #4
 8003432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800344c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003450:	f023 0304 	bic.w	r3, r3, #4
 8003454:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b08      	cmp	r3, #8
 8003474:	d101      	bne.n	800347a <LL_RCC_LSI2_IsReady+0x18>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <LL_RCC_LSI2_IsReady+0x1a>
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003496:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034a2:	4313      	orrs	r3, r2
 80034a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80034d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6013      	str	r3, [r2, #0]
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80034f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d101      	bne.n	8003506 <LL_RCC_MSI_IsReady+0x16>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <LL_RCC_MSI_IsReady+0x18>
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800351a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003524:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800354a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2bb0      	cmp	r3, #176	; 0xb0
 8003550:	d901      	bls.n	8003556 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003552:	23b0      	movs	r3, #176	; 0xb0
 8003554:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003556:	687b      	ldr	r3, [r7, #4]
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 0203 	bic.w	r2, r3, #3
 80035a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80035b6:	b480      	push	{r7}
 80035b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80035ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80035d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80035fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003602:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003606:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800362a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003632:	f023 020f 	bic.w	r2, r3, #15
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4313      	orrs	r3, r2
 800366a:	608b      	str	r3, [r1, #8]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800368a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4313      	orrs	r3, r2
 8003692:	608b      	str	r3, [r1, #8]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80036a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80036bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80036f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003730:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003734:	6013      	str	r3, [r2, #0]
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003752:	d101      	bne.n	8003758 <LL_RCC_PLL_IsReady+0x18>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <LL_RCC_PLL_IsReady+0x1a>
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800378c:	4618      	mov	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003796:	b480      	push	{r7}
 8003798:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f003 0303 	and.w	r3, r3, #3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d101      	bne.n	80037de <LL_RCC_IsActiveFlag_HPRE+0x18>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80037ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037fe:	d101      	bne.n	8003804 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003818:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d101      	bne.n	800382a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800383a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003848:	d101      	bne.n	800384e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003868:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800386c:	d101      	bne.n	8003872 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b08d      	sub	sp, #52	; 0x34
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e37e      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8092 	beq.w	80039c4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038a0:	f7ff fe89 	bl	80035b6 <LL_RCC_GetSysClkSource>
 80038a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038a6:	f7ff ff82 	bl	80037ae <LL_RCC_PLL_GetMainSource>
 80038aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_RCC_OscConfig+0x3e>
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d14c      	bne.n	8003952 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d149      	bne.n	8003952 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038be:	f7ff fe17 	bl	80034f0 <LL_RCC_MSI_IsReady>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_OscConfig+0x54>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e35d      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80038d8:	f7ff fe2f 	bl	800353a <LL_RCC_MSI_GetRange>
 80038dc:	4603      	mov	r3, r0
 80038de:	429c      	cmp	r4, r3
 80038e0:	d914      	bls.n	800390c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fd40 	bl	800436c <RCC_SetFlashLatencyFromMSIRange>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e34c      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fe09 	bl	8003512 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff fe2d 	bl	8003564 <LL_RCC_MSI_SetCalibTrimming>
 800390a:	e013      	b.n	8003934 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff fdfe 	bl	8003512 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fe22 	bl	8003564 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fd21 	bl	800436c <RCC_SetFlashLatencyFromMSIRange>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e32d      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003934:	f000 fcda 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4bb3      	ldr	r3, [pc, #716]	; (8003c08 <HAL_RCC_OscConfig+0x388>)
 800393c:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800393e:	4bb3      	ldr	r3, [pc, #716]	; (8003c0c <HAL_RCC_OscConfig+0x38c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fc0e 	bl	8001164 <HAL_InitTick>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d039      	beq.n	80039c2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e31e      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01e      	beq.n	8003998 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800395a:	f7ff fdab 	bl	80034b4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800395e:	f7fd fc4f 	bl	8001200 <HAL_GetTick>
 8003962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003966:	f7fd fc4b 	bl	8001200 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e30b      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003978:	f7ff fdba 	bl	80034f0 <LL_RCC_MSI_IsReady>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f1      	beq.n	8003966 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fdc3 	bl	8003512 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fde7 	bl	8003564 <LL_RCC_MSI_SetCalibTrimming>
 8003996:	e015      	b.n	80039c4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003998:	f7ff fd9b 	bl	80034d2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800399c:	f7fd fc30 	bl	8001200 <HAL_GetTick>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039a4:	f7fd fc2c 	bl	8001200 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e2ec      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80039b6:	f7ff fd9b 	bl	80034f0 <LL_RCC_MSI_IsReady>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f1      	bne.n	80039a4 <HAL_RCC_OscConfig+0x124>
 80039c0:	e000      	b.n	80039c4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d04e      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d0:	f7ff fdf1 	bl	80035b6 <LL_RCC_GetSysClkSource>
 80039d4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d6:	f7ff feea 	bl	80037ae <LL_RCC_PLL_GetMainSource>
 80039da:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d005      	beq.n	80039ee <HAL_RCC_OscConfig+0x16e>
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	2b0c      	cmp	r3, #12
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d10a      	bne.n	8003a04 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ee:	f7ff fc01 	bl	80031f4 <LL_RCC_HSE_IsReady>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d039      	beq.n	8003a6c <HAL_RCC_OscConfig+0x1ec>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d135      	bne.n	8003a6c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e2c5      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d102      	bne.n	8003a14 <HAL_RCC_OscConfig+0x194>
 8003a0e:	f7ff fbd3 	bl	80031b8 <LL_RCC_HSE_Enable>
 8003a12:	e001      	b.n	8003a18 <HAL_RCC_OscConfig+0x198>
 8003a14:	f7ff fbdf 	bl	80031d6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fd fbee 	bl	8001200 <HAL_GetTick>
 8003a24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fd fbea 	bl	8001200 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e2aa      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003a3a:	f7ff fbdb 	bl	80031f4 <LL_RCC_HSE_IsReady>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d0f1      	beq.n	8003a28 <HAL_RCC_OscConfig+0x1a8>
 8003a44:	e013      	b.n	8003a6e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fd fbdb 	bl	8001200 <HAL_GetTick>
 8003a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a4e:	f7fd fbd7 	bl	8001200 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	; 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e297      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003a60:	f7ff fbc8 	bl	80031f4 <LL_RCC_HSE_IsReady>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f1      	bne.n	8003a4e <HAL_RCC_OscConfig+0x1ce>
 8003a6a:	e000      	b.n	8003a6e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d051      	beq.n	8003b1e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a7a:	f7ff fd9c 	bl	80035b6 <LL_RCC_GetSysClkSource>
 8003a7e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a80:	f7ff fe95 	bl	80037ae <LL_RCC_PLL_GetMainSource>
 8003a84:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_OscConfig+0x218>
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d113      	bne.n	8003aba <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d110      	bne.n	8003aba <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a98:	f7ff fbdc 	bl	8003254 <LL_RCC_HSI_IsReady>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_RCC_OscConfig+0x22e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e270      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fbe0 	bl	8003278 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab8:	e031      	b.n	8003b1e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d019      	beq.n	8003af6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac2:	f7ff fba9 	bl	8003218 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fd fb9b 	bl	8001200 <HAL_GetTick>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fd fb97 	bl	8001200 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e257      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003ae0:	f7ff fbb8 	bl	8003254 <LL_RCC_HSI_IsReady>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f1      	beq.n	8003ace <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fbc2 	bl	8003278 <LL_RCC_HSI_SetCalibTrimming>
 8003af4:	e013      	b.n	8003b1e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	f7ff fb9e 	bl	8003236 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afa:	f7fd fb81 	bl	8001200 <HAL_GetTick>
 8003afe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b02:	f7fd fb7d 	bl	8001200 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e23d      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003b14:	f7ff fb9e 	bl	8003254 <LL_RCC_HSI_IsReady>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f1      	bne.n	8003b02 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 80a3 	beq.w	8003c7e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d076      	beq.n	8003c2e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d046      	beq.n	8003bda <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003b4c:	f7ff fc55 	bl	80033fa <LL_RCC_LSI1_IsReady>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d113      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003b56:	f7ff fc2e 	bl	80033b6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b5a:	f7fd fb51 	bl	8001200 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003b62:	f7fd fb4d 	bl	8001200 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e20d      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003b74:	f7ff fc41 	bl	80033fa <LL_RCC_LSI1_IsReady>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f1      	beq.n	8003b62 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003b7e:	f7ff fc4e 	bl	800341e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fd fb3d 	bl	8001200 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003b8a:	f7fd fb39 	bl	8001200 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e1f9      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003b9c:	f7ff fc61 	bl	8003462 <LL_RCC_LSI2_IsReady>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f1      	beq.n	8003b8a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fc6b 	bl	8003486 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003bb0:	f7ff fc12 	bl	80033d8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fd fb24 	bl	8001200 <HAL_GetTick>
 8003bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003bbc:	f7fd fb20 	bl	8001200 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e1e0      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003bce:	f7ff fc14 	bl	80033fa <LL_RCC_LSI1_IsReady>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f1      	bne.n	8003bbc <HAL_RCC_OscConfig+0x33c>
 8003bd8:	e051      	b.n	8003c7e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003bda:	f7ff fbec 	bl	80033b6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd fb0f 	bl	8001200 <HAL_GetTick>
 8003be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003be6:	f7fd fb0b 	bl	8001200 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1cb      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003bf8:	f7ff fbff 	bl	80033fa <LL_RCC_LSI1_IsReady>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f1      	beq.n	8003be6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003c02:	f7ff fc1d 	bl	8003440 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003c06:	e00c      	b.n	8003c22 <HAL_RCC_OscConfig+0x3a2>
 8003c08:	20000008 	.word	0x20000008
 8003c0c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003c10:	f7fd faf6 	bl	8001200 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1b6      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003c22:	f7ff fc1e 	bl	8003462 <LL_RCC_LSI2_IsReady>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f1      	bne.n	8003c10 <HAL_RCC_OscConfig+0x390>
 8003c2c:	e027      	b.n	8003c7e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003c2e:	f7ff fc07 	bl	8003440 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd fae5 	bl	8001200 <HAL_GetTick>
 8003c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003c3a:	f7fd fae1 	bl	8001200 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1a1      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003c4c:	f7ff fc09 	bl	8003462 <LL_RCC_LSI2_IsReady>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f1      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003c56:	f7ff fbbf 	bl	80033d8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fd fad1 	bl	8001200 <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003c62:	f7fd facd 	bl	8001200 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e18d      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003c74:	f7ff fbc1 	bl	80033fa <LL_RCC_LSI1_IsReady>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f1      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d05b      	beq.n	8003d42 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c8a:	4bb5      	ldr	r3, [pc, #724]	; (8003f60 <HAL_RCC_OscConfig+0x6e0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d114      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003c96:	f7ff fa5f 	bl	8003158 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7fd fab1 	bl	8001200 <HAL_GetTick>
 8003c9e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca2:	f7fd faad 	bl	8001200 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e16d      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb4:	4baa      	ldr	r3, [pc, #680]	; (8003f60 <HAL_RCC_OscConfig+0x6e0>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d102      	bne.n	8003cce <HAL_RCC_OscConfig+0x44e>
 8003cc8:	f7ff fb1f 	bl	800330a <LL_RCC_LSE_Enable>
 8003ccc:	e00c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x468>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	d104      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x460>
 8003cd6:	f7ff fb3a 	bl	800334e <LL_RCC_LSE_EnableBypass>
 8003cda:	f7ff fb16 	bl	800330a <LL_RCC_LSE_Enable>
 8003cde:	e003      	b.n	8003ce8 <HAL_RCC_OscConfig+0x468>
 8003ce0:	f7ff fb24 	bl	800332c <LL_RCC_LSE_Disable>
 8003ce4:	f7ff fb44 	bl	8003370 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d014      	beq.n	8003d1a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf0:	f7fd fa86 	bl	8001200 <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003cf6:	e00a      	b.n	8003d0e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf8:	f7fd fa82 	bl	8001200 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e140      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003d0e:	f7ff fb40 	bl	8003392 <LL_RCC_LSE_IsReady>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0ef      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x478>
 8003d18:	e013      	b.n	8003d42 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d1a:	f7fd fa71 	bl	8001200 <HAL_GetTick>
 8003d1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fd fa6d 	bl	8001200 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e12b      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003d38:	f7ff fb2b 	bl	8003392 <LL_RCC_LSE_IsReady>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ef      	bne.n	8003d22 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d02c      	beq.n	8003da8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d014      	beq.n	8003d80 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d56:	f7ff faa4 	bl	80032a2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fd fa51 	bl	8001200 <HAL_GetTick>
 8003d5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d62:	f7fd fa4d 	bl	8001200 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e10d      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003d74:	f7ff fab7 	bl	80032e6 <LL_RCC_HSI48_IsReady>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f1      	beq.n	8003d62 <HAL_RCC_OscConfig+0x4e2>
 8003d7e:	e013      	b.n	8003da8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d80:	f7ff faa0 	bl	80032c4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd fa3c 	bl	8001200 <HAL_GetTick>
 8003d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d8c:	f7fd fa38 	bl	8001200 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0f8      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003d9e:	f7ff faa2 	bl	80032e6 <LL_RCC_HSI48_IsReady>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f1      	bne.n	8003d8c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80ee 	beq.w	8003f8e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db2:	f7ff fc00 	bl	80035b6 <LL_RCC_GetSysClkSource>
 8003db6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	f040 80af 	bne.w	8003f28 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f003 0203 	and.w	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d123      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d11c      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d114      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d10d      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d106      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d05d      	beq.n	8003edc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	2b0c      	cmp	r3, #12
 8003e24:	d058      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0ab      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e38:	f7ff fc73 	bl	8003722 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e3c:	f7fd f9e0 	bl	8001200 <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fd f9dc 	bl	8001200 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e09c      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ef      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	4b3e      	ldr	r3, [pc, #248]	; (8003f64 <HAL_RCC_OscConfig+0x6e4>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e76:	4311      	orrs	r1, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e7c:	0212      	lsls	r2, r2, #8
 8003e7e:	4311      	orrs	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e84:	4311      	orrs	r1, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e8a:	4311      	orrs	r1, r2
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e90:	430a      	orrs	r2, r1
 8003e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e96:	4313      	orrs	r3, r2
 8003e98:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e9a:	f7ff fc33 	bl	8003704 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eac:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003eae:	f7fd f9a7 	bl	8001200 <HAL_GetTick>
 8003eb2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb6:	f7fd f9a3 	bl	8001200 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e063      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0ef      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ed6:	e05a      	b.n	8003f8e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e059      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d151      	bne.n	8003f8e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003eea:	f7ff fc0b 	bl	8003704 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ef8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003efe:	f7fd f97f 	bl	8001200 <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fd f97b 	bl	8001200 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e03b      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ef      	beq.n	8003f06 <HAL_RCC_OscConfig+0x686>
 8003f26:	e032      	b.n	8003f8e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d02d      	beq.n	8003f8a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	f7ff fbf8 	bl	8003722 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f3c:	f023 0303 	bic.w	r3, r3, #3
 8003f40:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f4c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f56:	f7fd f953 	bl	8001200 <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f5c:	e00d      	b.n	8003f7a <HAL_RCC_OscConfig+0x6fa>
 8003f5e:	bf00      	nop
 8003f60:	58000400 	.word	0x58000400
 8003f64:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fd f94a 	bl	8001200 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e00a      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ef      	bne.n	8003f68 <HAL_RCC_OscConfig+0x6e8>
 8003f88:	e001      	b.n	8003f8e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3734      	adds	r7, #52	; 0x34
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd90      	pop	{r4, r7, pc}

08003f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e12d      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fac:	4b98      	ldr	r3, [pc, #608]	; (8004210 <HAL_RCC_ClockConfig+0x278>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d91b      	bls.n	8003ff2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b95      	ldr	r3, [pc, #596]	; (8004210 <HAL_RCC_ClockConfig+0x278>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 0207 	bic.w	r2, r3, #7
 8003fc2:	4993      	ldr	r1, [pc, #588]	; (8004210 <HAL_RCC_ClockConfig+0x278>)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fca:	f7fd f919 	bl	8001200 <HAL_GetTick>
 8003fce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fd2:	f7fd f915 	bl	8001200 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e111      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe4:	4b8a      	ldr	r3, [pc, #552]	; (8004210 <HAL_RCC_ClockConfig+0x278>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d1ef      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fae3 	bl	80035ce <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004008:	f7fd f8fa 	bl	8001200 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004010:	f7fd f8f6 	bl	8001200 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e0f2      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004022:	f7ff fbd0 	bl	80037c6 <LL_RCC_IsActiveFlag_HPRE>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f1      	beq.n	8004010 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d016      	beq.n	8004066 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fada 	bl	80035f6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004042:	f7fd f8dd 	bl	8001200 <HAL_GetTick>
 8004046:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004048:	e008      	b.n	800405c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800404a:	f7fd f8d9 	bl	8001200 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0d5      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800405c:	f7ff fbc5 	bl	80037ea <LL_RCC_IsActiveFlag_C2HPRE>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f1      	beq.n	800404a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fad3 	bl	8003622 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800407c:	f7fd f8c0 	bl	8001200 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004084:	f7fd f8bc 	bl	8001200 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e0b8      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004096:	f7ff fbbb 	bl	8003810 <LL_RCC_IsActiveFlag_SHDHPRE>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f1      	beq.n	8004084 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d016      	beq.n	80040da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff facd 	bl	8003650 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80040b6:	f7fd f8a3 	bl	8001200 <HAL_GetTick>
 80040ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80040be:	f7fd f89f 	bl	8001200 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e09b      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80040d0:	f7ff fbb1 	bl	8003836 <LL_RCC_IsActiveFlag_PPRE1>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f1      	beq.n	80040be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d017      	beq.n	8004116 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff fac3 	bl	8003678 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80040f2:	f7fd f885 	bl	8001200 <HAL_GetTick>
 80040f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80040fa:	f7fd f881 	bl	8001200 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e07d      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800410c:	f7ff fba5 	bl	800385a <LL_RCC_IsActiveFlag_PPRE2>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f1      	beq.n	80040fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d043      	beq.n	80041aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d106      	bne.n	8004138 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800412a:	f7ff f863 	bl	80031f4 <LL_RCC_HSE_IsReady>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11e      	bne.n	8004172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e067      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d106      	bne.n	800414e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004140:	f7ff fafe 	bl	8003740 <LL_RCC_PLL_IsReady>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d113      	bne.n	8004172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e05c      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004156:	f7ff f9cb 	bl	80034f0 <LL_RCC_MSI_IsReady>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e051      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004164:	f7ff f876 	bl	8003254 <LL_RCC_HSI_IsReady>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e04a      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fa09 	bl	800358e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417c:	f7fd f840 	bl	8001200 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004182:	e00a      	b.n	800419a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004184:	f7fd f83c 	bl	8001200 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e036      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	f7ff fa0c 	bl	80035b6 <LL_RCC_GetSysClkSource>
 800419e:	4602      	mov	r2, r0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d1ec      	bne.n	8004184 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <HAL_RCC_ClockConfig+0x278>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d21b      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <HAL_RCC_ClockConfig+0x278>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 0207 	bic.w	r2, r3, #7
 80041c0:	4913      	ldr	r1, [pc, #76]	; (8004210 <HAL_RCC_ClockConfig+0x278>)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7fd f81a 	bl	8001200 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80041d0:	f7fd f816 	bl	8001200 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e012      	b.n	8004208 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_ClockConfig+0x278>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d1ef      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041f0:	f000 f87c 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <HAL_RCC_ClockConfig+0x27c>)
 80041f8:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80041fa:	f7fd f80d 	bl	8001218 <HAL_GetTickPrio>
 80041fe:	4603      	mov	r3, r0
 8004200:	4618      	mov	r0, r3
 8004202:	f7fc ffaf 	bl	8001164 <HAL_InitTick>
 8004206:	4603      	mov	r3, r0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	58004000 	.word	0x58004000
 8004214:	20000008 	.word	0x20000008

08004218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421e:	f7ff f9ca 	bl	80035b6 <LL_RCC_GetSysClkSource>
 8004222:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800422a:	f7ff f986 	bl	800353a <LL_RCC_MSI_GetRange>
 800422e:	4603      	mov	r3, r0
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e04a      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b04      	cmp	r3, #4
 8004244:	d102      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004246:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e044      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b08      	cmp	r3, #8
 8004250:	d10a      	bne.n	8004268 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004252:	f7fe ff9f 	bl	8003194 <LL_RCC_HSE_IsEnabledDiv2>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e039      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e036      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004268:	f7ff faa1 	bl	80037ae <LL_RCC_PLL_GetMainSource>
 800426c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b02      	cmp	r3, #2
 8004272:	d002      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x62>
 8004274:	2b03      	cmp	r3, #3
 8004276:	d003      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x68>
 8004278:	e00d      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800427c:	60bb      	str	r3, [r7, #8]
        break;
 800427e:	e015      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004280:	f7fe ff88 	bl	8003194 <LL_RCC_HSE_IsEnabledDiv2>
 8004284:	4603      	mov	r3, r0
 8004286:	2b01      	cmp	r3, #1
 8004288:	d102      	bne.n	8004290 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800428c:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800428e:	e00d      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004290:	4b15      	ldr	r3, [pc, #84]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004292:	60bb      	str	r3, [r7, #8]
        break;
 8004294:	e00a      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004296:	f7ff f950 	bl	800353a <LL_RCC_MSI_GetRange>
 800429a:	4603      	mov	r3, r0
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	4a0f      	ldr	r2, [pc, #60]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80042a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a8:	60bb      	str	r3, [r7, #8]
        break;
 80042aa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80042ac:	f7ff fa5a 	bl	8003764 <LL_RCC_PLL_GetN>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	fb03 f402 	mul.w	r4, r3, r2
 80042b8:	f7ff fa6d 	bl	8003796 <LL_RCC_PLL_GetDivider>
 80042bc:	4603      	mov	r3, r0
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	3301      	adds	r3, #1
 80042c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80042c6:	f7ff fa5a 	bl	800377e <LL_RCC_PLL_GetR>
 80042ca:	4603      	mov	r3, r0
 80042cc:	0f5b      	lsrs	r3, r3, #29
 80042ce:	3301      	adds	r3, #1
 80042d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80042d4:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd90      	pop	{r4, r7, pc}
 80042e0:	080068f8 	.word	0x080068f8
 80042e4:	00f42400 	.word	0x00f42400
 80042e8:	01e84800 	.word	0x01e84800

080042ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042ec:	b598      	push	{r3, r4, r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80042f0:	f7ff ff92 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 80042f4:	4604      	mov	r4, r0
 80042f6:	f7ff f9d3 	bl	80036a0 <LL_RCC_GetAHBPrescaler>
 80042fa:	4603      	mov	r3, r0
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	4a03      	ldr	r2, [pc, #12]	; (8004310 <HAL_RCC_GetHCLKFreq+0x24>)
 8004304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004308:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800430c:	4618      	mov	r0, r3
 800430e:	bd98      	pop	{r3, r4, r7, pc}
 8004310:	08006898 	.word	0x08006898

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b598      	push	{r3, r4, r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004318:	f7ff ffe8 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 800431c:	4604      	mov	r4, r0
 800431e:	f7ff f9d9 	bl	80036d4 <LL_RCC_GetAPB1Prescaler>
 8004322:	4603      	mov	r3, r0
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	4a04      	ldr	r2, [pc, #16]	; (800433c <HAL_RCC_GetPCLK1Freq+0x28>)
 800432c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004330:	f003 031f 	and.w	r3, r3, #31
 8004334:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	bd98      	pop	{r3, r4, r7, pc}
 800433c:	080068d8 	.word	0x080068d8

08004340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004340:	b598      	push	{r3, r4, r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004344:	f7ff ffd2 	bl	80042ec <HAL_RCC_GetHCLKFreq>
 8004348:	4604      	mov	r4, r0
 800434a:	f7ff f9cf 	bl	80036ec <LL_RCC_GetAPB2Prescaler>
 800434e:	4603      	mov	r3, r0
 8004350:	0adb      	lsrs	r3, r3, #11
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd98      	pop	{r3, r4, r7, pc}
 8004368:	080068d8 	.word	0x080068d8

0800436c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2bb0      	cmp	r3, #176	; 0xb0
 8004378:	d903      	bls.n	8004382 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e007      	b.n	8004392 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800438c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004390:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004392:	f7ff f991 	bl	80036b8 <LL_RCC_GetAHB4Prescaler>
 8004396:	4603      	mov	r3, r0
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	4a0d      	ldr	r2, [pc, #52]	; (80043d4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80043a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80043b0:	fba2 2303 	umull	r2, r3, r2, r3
 80043b4:	0c9c      	lsrs	r4, r3, #18
 80043b6:	f7fe fedf 	bl	8003178 <HAL_PWREx_GetVoltageRange>
 80043ba:	4603      	mov	r3, r0
 80043bc:	4619      	mov	r1, r3
 80043be:	4620      	mov	r0, r4
 80043c0:	f000 f80c 	bl	80043dc <RCC_SetFlashLatency>
 80043c4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd90      	pop	{r4, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	080068f8 	.word	0x080068f8
 80043d4:	08006898 	.word	0x08006898
 80043d8:	431bde83 	.word	0x431bde83

080043dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80043dc:	b590      	push	{r4, r7, lr}
 80043de:	b093      	sub	sp, #76	; 0x4c
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80043e6:	4b39      	ldr	r3, [pc, #228]	; (80044cc <RCC_SetFlashLatency+0xf0>)
 80043e8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80043ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80043f2:	4a37      	ldr	r2, [pc, #220]	; (80044d0 <RCC_SetFlashLatency+0xf4>)
 80043f4:	f107 031c 	add.w	r3, r7, #28
 80043f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80043fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80043fe:	4b35      	ldr	r3, [pc, #212]	; (80044d4 <RCC_SetFlashLatency+0xf8>)
 8004400:	f107 040c 	add.w	r4, r7, #12
 8004404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800440a:	2300      	movs	r3, #0
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004414:	d11c      	bne.n	8004450 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004416:	2300      	movs	r3, #0
 8004418:	643b      	str	r3, [r7, #64]	; 0x40
 800441a:	e015      	b.n	8004448 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800441c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004424:	4413      	add	r3, r2
 8004426:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	429a      	cmp	r2, r3
 800442e:	d808      	bhi.n	8004442 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004438:	4413      	add	r3, r2
 800443a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800443e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004440:	e022      	b.n	8004488 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004444:	3301      	adds	r3, #1
 8004446:	643b      	str	r3, [r7, #64]	; 0x40
 8004448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444a:	2b03      	cmp	r3, #3
 800444c:	d9e6      	bls.n	800441c <RCC_SetFlashLatency+0x40>
 800444e:	e01b      	b.n	8004488 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004450:	2300      	movs	r3, #0
 8004452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004454:	e015      	b.n	8004482 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800445e:	4413      	add	r3, r2
 8004460:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	429a      	cmp	r2, r3
 8004468:	d808      	bhi.n	800447c <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800446a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004472:	4413      	add	r3, r2
 8004474:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004478:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800447a:	e005      	b.n	8004488 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800447c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800447e:	3301      	adds	r3, #1
 8004480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004484:	2b02      	cmp	r3, #2
 8004486:	d9e6      	bls.n	8004456 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <RCC_SetFlashLatency+0xfc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f023 0207 	bic.w	r2, r3, #7
 8004490:	4911      	ldr	r1, [pc, #68]	; (80044d8 <RCC_SetFlashLatency+0xfc>)
 8004492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004498:	f7fc feb2 	bl	8001200 <HAL_GetTick>
 800449c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800449e:	e008      	b.n	80044b2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80044a0:	f7fc feae 	bl	8001200 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e007      	b.n	80044c2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <RCC_SetFlashLatency+0xfc>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044bc:	429a      	cmp	r2, r3
 80044be:	d1ef      	bne.n	80044a0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	374c      	adds	r7, #76	; 0x4c
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd90      	pop	{r4, r7, pc}
 80044ca:	bf00      	nop
 80044cc:	0800684c 	.word	0x0800684c
 80044d0:	0800685c 	.word	0x0800685c
 80044d4:	08006868 	.word	0x08006868
 80044d8:	58004000 	.word	0x58004000

080044dc <LL_RCC_LSE_IsEnabled>:
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80044e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <LL_RCC_LSE_IsEnabled+0x18>
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <LL_RCC_LSE_IsEnabled+0x1a>
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_RCC_LSE_IsReady>:
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b02      	cmp	r3, #2
 8004512:	d101      	bne.n	8004518 <LL_RCC_LSE_IsReady+0x18>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <LL_RCC_LSE_IsReady+0x1a>
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_RCC_MSI_EnablePLLMode>:
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004532:	f043 0304 	orr.w	r3, r3, #4
 8004536:	6013      	str	r3, [r2, #0]
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_SetRFWKPClockSource>:
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800454a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_RCC_SetSMPSClockSource>:
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f023 0203 	bic.w	r2, r3, #3
 8004580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4313      	orrs	r3, r2
 8004588:	624b      	str	r3, [r1, #36]	; 0x24
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_RCC_SetSMPSPrescaler>:
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800459e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <LL_RCC_SetUSARTClockSource>:
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ce:	f023 0203 	bic.w	r2, r3, #3
 80045d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <LL_RCC_SetLPUARTClockSource>:
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_RCC_SetI2CClockSource>:
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004622:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800462e:	43db      	mvns	r3, r3
 8004630:	401a      	ands	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800463a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <LL_RCC_SetLPTIMClockSource>:
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	041b      	lsls	r3, r3, #16
 8004666:	43db      	mvns	r3, r3
 8004668:	401a      	ands	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004672:	4313      	orrs	r3, r2
 8004674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_RCC_SetSAIClockSource>:
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800468c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <LL_RCC_SetRNGClockSource>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80046c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <LL_RCC_SetCLK48ClockSource>:
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <LL_RCC_SetUSBClockSource>:
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ffe3 	bl	80046dc <LL_RCC_SetCLK48ClockSource>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <LL_RCC_SetADCClockSource>:
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_RCC_SetRTCClockSource>:
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800475e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <LL_RCC_GetRTCClockSource>:
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004786:	4618      	mov	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <LL_RCC_ForceBackupDomainReset>:
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80047b2:	b480      	push	{r7}
 80047b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80047ca:	bf00      	nop
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <LL_RCC_PLLSAI1_Enable>:
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80047d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047e6:	6013      	str	r3, [r2, #0]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <LL_RCC_PLLSAI1_Disable>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80047f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004800:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004804:	6013      	str	r3, [r2, #0]
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <LL_RCC_PLLSAI1_IsReady>:
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004822:	d101      	bne.n	8004828 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800483c:	2300      	movs	r3, #0
 800483e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004840:	2300      	movs	r3, #0
 8004842:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d033      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004858:	d00c      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800485a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485e:	d802      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d010      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004864:	e017      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800486a:	d017      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x68>
 800486c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004870:	d016      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004872:	e010      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800487e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004882:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004884:	e00d      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f000 f94d 	bl	8004b2a <RCCEx_PLLSAI1_ConfigNP>
 8004890:	4603      	mov	r3, r0
 8004892:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004894:	e005      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	77fb      	strb	r3, [r7, #31]
        break;
 800489a:	e002      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 80048a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fee9 	bl	8004684 <LL_RCC_SetSAIClockSource>
 80048b2:	e001      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b4:	7ffb      	ldrb	r3, [r7, #31]
 80048b6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d046      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80048c4:	f7ff ff57 	bl	8004776 <LL_RCC_GetRTCClockSource>
 80048c8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d03c      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80048d4:	f7fe fc40 	bl	8003158 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d105      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff ff31 	bl	800474a <LL_RCC_SetRTCClockSource>
 80048e8:	e02e      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80048ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80048f4:	f7ff ff4c 	bl	8004790 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80048f8:	f7ff ff5b 	bl	80047b2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	4313      	orrs	r3, r2
 8004908:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800490a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004914:	f7ff fde2 	bl	80044dc <LL_RCC_LSE_IsEnabled>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d114      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800491e:	f7fc fc6f 	bl	8001200 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004924:	e00b      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fc fc6b 	bl	8001200 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d902      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	77fb      	strb	r3, [r7, #31]
              break;
 800493c:	e004      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800493e:	f7ff fddf 	bl	8004500 <LL_RCC_LSE_IsReady>
 8004942:	4603      	mov	r3, r0
 8004944:	2b01      	cmp	r3, #1
 8004946:	d1ee      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004948:	7ffb      	ldrb	r3, [r7, #31]
 800494a:	77bb      	strb	r3, [r7, #30]
 800494c:	e001      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494e:	7ffb      	ldrb	r3, [r7, #31]
 8004950:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fe2b 	bl	80045be <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d004      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fe36 	bl	80045ea <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	d004      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fe5e 	bl	8004650 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d004      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fe53 	bl	8004650 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fe2b 	bl	8004616 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fe20 	bl	8004616 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d022      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fe8e 	bl	8004708 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049f4:	d107      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a04:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a0e:	d10b      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 f8e3 	bl	8004be0 <RCCEx_PLLSAI1_ConfigNQ>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004a1e:	7ffb      	ldrb	r3, [r7, #31]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8004a24:	7ffb      	ldrb	r3, [r7, #31]
 8004a26:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d02b      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a46:	d003      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fe2b 	bl	80046b0 <LL_RCC_SetRNGClockSource>
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	2000      	movs	r0, #0
 8004a68:	f7ff fe22 	bl	80046b0 <LL_RCC_SetRNGClockSource>
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fe35 	bl	80046dc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004a7a:	d107      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d022      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fe3e 	bl	800471e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aaa:	d107      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aba:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ac4:	d10b      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f8e3 	bl	8004c96 <RCCEx_PLLSAI1_ConfigNR>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004ad4:	7ffb      	ldrb	r3, [r7, #31]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d004      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fd27 	bl	8004542 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fd46 	bl	8004596 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff fd2d 	bl	800456e <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004b14:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3720      	adds	r7, #32
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004b22:	f7ff fcff 	bl	8004524 <LL_RCC_MSI_EnablePLLMode>
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004b36:	f7ff fe5c 	bl	80047f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b3a:	f7fc fb61 	bl	8001200 <HAL_GetTick>
 8004b3e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b40:	e009      	b.n	8004b56 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b42:	f7fc fb5d 	bl	8001200 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d902      	bls.n	8004b56 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	73fb      	strb	r3, [r7, #15]
      break;
 8004b54:	e004      	b.n	8004b60 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b56:	f7ff fe5b 	bl	8004810 <LL_RCC_PLLSAI1_IsReady>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f0      	bne.n	8004b42 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d137      	bne.n	8004bd6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b90:	4313      	orrs	r3, r2
 8004b92:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004b94:	f7ff fe1e 	bl	80047d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fc fb32 	bl	8001200 <HAL_GetTick>
 8004b9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b9e:	e009      	b.n	8004bb4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ba0:	f7fc fb2e 	bl	8001200 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d902      	bls.n	8004bb4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bb2:	e004      	b.n	8004bbe <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004bb4:	f7ff fe2c 	bl	8004810 <LL_RCC_PLLSAI1_IsReady>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d1f0      	bne.n	8004ba0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004bbe:	7bfb      	ldrb	r3, [r7, #15]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d108      	bne.n	8004bd6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004bec:	f7ff fe01 	bl	80047f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bf0:	f7fc fb06 	bl	8001200 <HAL_GetTick>
 8004bf4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004bf6:	e009      	b.n	8004c0c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf8:	f7fc fb02 	bl	8001200 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d902      	bls.n	8004c0c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0a:	e004      	b.n	8004c16 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004c0c:	f7ff fe00 	bl	8004810 <LL_RCC_PLLSAI1_IsReady>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d137      	bne.n	8004c8c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c30:	4313      	orrs	r3, r2
 8004c32:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c46:	4313      	orrs	r3, r2
 8004c48:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004c4a:	f7ff fdc3 	bl	80047d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4e:	f7fc fad7 	bl	8001200 <HAL_GetTick>
 8004c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004c54:	e009      	b.n	8004c6a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c56:	f7fc fad3 	bl	8001200 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d902      	bls.n	8004c6a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	73fb      	strb	r3, [r7, #15]
        break;
 8004c68:	e004      	b.n	8004c74 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004c6a:	f7ff fdd1 	bl	8004810 <LL_RCC_PLLSAI1_IsReady>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d1f0      	bne.n	8004c56 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d108      	bne.n	8004c8c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ca2:	f7ff fda6 	bl	80047f2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ca6:	f7fc faab 	bl	8001200 <HAL_GetTick>
 8004caa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004cac:	e009      	b.n	8004cc2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cae:	f7fc faa7 	bl	8001200 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d902      	bls.n	8004cc2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc0:	e004      	b.n	8004ccc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004cc2:	f7ff fda5 	bl	8004810 <LL_RCC_PLLSAI1_IsReady>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d137      	bne.n	8004d42 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004d00:	f7ff fd68 	bl	80047d4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d04:	f7fc fa7c 	bl	8001200 <HAL_GetTick>
 8004d08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d0a:	e009      	b.n	8004d20 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d0c:	f7fc fa78 	bl	8001200 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d902      	bls.n	8004d20 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d1e:	e004      	b.n	8004d2a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d20:	f7ff fd76 	bl	8004810 <LL_RCC_PLLSAI1_IsReady>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d1f0      	bne.n	8004d0c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d108      	bne.n	8004d42 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e049      	b.n	8004df2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7fc f886 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f000 fabe 	bl	800530c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d001      	beq.n	8004e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e036      	b.n	8004e82 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <HAL_TIM_Base_Start_IT+0x94>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d004      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x44>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d115      	bne.n	8004e6c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_TIM_Base_Start_IT+0x98>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b06      	cmp	r3, #6
 8004e50:	d015      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x82>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d011      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	e008      	b.n	8004e7e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	e000      	b.n	8004e80 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40012c00 	.word	0x40012c00
 8004e94:	00010007 	.word	0x00010007

08004e98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_TIM_Base_Stop_IT+0x48>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	f240 4344 	movw	r3, #1092	; 0x444
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_Base_Stop_IT+0x48>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0201 	bic.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b082      	sub	sp, #8
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d122      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d11b      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0202 	mvn.w	r2, #2
 8004f22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9c8 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 8004f3e:	e005      	b.n	8004f4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f9ba 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f9cb 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d122      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d11b      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f06f 0204 	mvn.w	r2, #4
 8004f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f99e 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 8004f92:	e005      	b.n	8004fa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f990 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f9a1 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d122      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d11b      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f06f 0208 	mvn.w	r2, #8
 8004fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f974 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 8004fe6:	e005      	b.n	8004ff4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f966 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f977 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b10      	cmp	r3, #16
 8005006:	d122      	bne.n	800504e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b10      	cmp	r3, #16
 8005014:	d11b      	bne.n	800504e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f06f 0210 	mvn.w	r2, #16
 800501e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2208      	movs	r2, #8
 8005024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f94a 	bl	80052ce <HAL_TIM_IC_CaptureCallback>
 800503a:	e005      	b.n	8005048 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f93c 	bl	80052ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f94d 	bl	80052e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d10e      	bne.n	800507a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0201 	mvn.w	r2, #1
 8005072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f916 	bl	80052a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005084:	2b80      	cmp	r3, #128	; 0x80
 8005086:	d10e      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d107      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800509e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fb2d 	bl	8005700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b4:	d10e      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c0:	2b80      	cmp	r3, #128	; 0x80
 80050c2:	d107      	bne.n	80050d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fb20 	bl	8005714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d10e      	bne.n	8005100 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d107      	bne.n	8005100 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f8fb 	bl	80052f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b20      	cmp	r3, #32
 800510c:	d10e      	bne.n	800512c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b20      	cmp	r3, #32
 800511a:	d107      	bne.n	800512c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0220 	mvn.w	r2, #32
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fae0 	bl	80056ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800512c:	bf00      	nop
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_TIM_ConfigClockSource+0x18>
 8005148:	2302      	movs	r3, #2
 800514a:	e0a8      	b.n	800529e <HAL_TIM_ConfigClockSource+0x16a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800516a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800516e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005176:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d067      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0x124>
 8005188:	2b40      	cmp	r3, #64	; 0x40
 800518a:	d80b      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x70>
 800518c:	2b10      	cmp	r3, #16
 800518e:	d073      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0x144>
 8005190:	2b10      	cmp	r3, #16
 8005192:	d802      	bhi.n	800519a <HAL_TIM_ConfigClockSource+0x66>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d06f      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005198:	e078      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800519a:	2b20      	cmp	r3, #32
 800519c:	d06c      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0x144>
 800519e:	2b30      	cmp	r3, #48	; 0x30
 80051a0:	d06a      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80051a2:	e073      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80051a4:	2b70      	cmp	r3, #112	; 0x70
 80051a6:	d00d      	beq.n	80051c4 <HAL_TIM_ConfigClockSource+0x90>
 80051a8:	2b70      	cmp	r3, #112	; 0x70
 80051aa:	d804      	bhi.n	80051b6 <HAL_TIM_ConfigClockSource+0x82>
 80051ac:	2b50      	cmp	r3, #80	; 0x50
 80051ae:	d033      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0xe4>
 80051b0:	2b60      	cmp	r3, #96	; 0x60
 80051b2:	d041      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80051b4:	e06a      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80051b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ba:	d066      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x156>
 80051bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c0:	d017      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80051c2:	e063      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	6899      	ldr	r1, [r3, #8]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f000 f97a 	bl	80054cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]
      break;
 80051f0:	e04c      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6899      	ldr	r1, [r3, #8]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f000 f963 	bl	80054cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005214:	609a      	str	r2, [r3, #8]
      break;
 8005216:	e039      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	461a      	mov	r2, r3
 8005226:	f000 f8d5 	bl	80053d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2150      	movs	r1, #80	; 0x50
 8005230:	4618      	mov	r0, r3
 8005232:	f000 f92e 	bl	8005492 <TIM_ITRx_SetConfig>
      break;
 8005236:	e029      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6859      	ldr	r1, [r3, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	461a      	mov	r2, r3
 8005246:	f000 f8f4 	bl	8005432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2160      	movs	r1, #96	; 0x60
 8005250:	4618      	mov	r0, r3
 8005252:	f000 f91e 	bl	8005492 <TIM_ITRx_SetConfig>
      break;
 8005256:	e019      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	6859      	ldr	r1, [r3, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	461a      	mov	r2, r3
 8005266:	f000 f8b5 	bl	80053d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2140      	movs	r1, #64	; 0x40
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f90e 	bl	8005492 <TIM_ITRx_SetConfig>
      break;
 8005276:	e009      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f000 f905 	bl	8005492 <TIM_ITRx_SetConfig>
        break;
 8005288:	e000      	b.n	800528c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800528a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c2:	bf00      	nop
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
	...

0800530c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <TIM_Base_SetConfig+0xbc>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_Base_SetConfig+0x20>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800532a:	d108      	bne.n	800533e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <TIM_Base_SetConfig+0xbc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00b      	beq.n	800535e <TIM_Base_SetConfig+0x52>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d007      	beq.n	800535e <TIM_Base_SetConfig+0x52>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1e      	ldr	r2, [pc, #120]	; (80053cc <TIM_Base_SetConfig+0xc0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_Base_SetConfig+0x52>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <TIM_Base_SetConfig+0xc4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d108      	bne.n	8005370 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <TIM_Base_SetConfig+0xbc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0xa0>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a0b      	ldr	r2, [pc, #44]	; (80053cc <TIM_Base_SetConfig+0xc0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0xa0>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <TIM_Base_SetConfig+0xc4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	f023 0201 	bic.w	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 030a 	bic.w	r3, r3, #10
 8005410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005432:	b480      	push	{r7}
 8005434:	b087      	sub	sp, #28
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0210 	bic.w	r2, r3, #16
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800545c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800546e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80054a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f043 0307 	orr.w	r3, r3, #7
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	609a      	str	r2, [r3, #8]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	697a      	ldr	r2, [r7, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e04a      	b.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d108      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005554:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a12      	ldr	r2, [pc, #72]	; (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d10c      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4313      	orrs	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40012c00 	.word	0x40012c00

080055cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e078      	b.n	80056da <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4313      	orrs	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	041b      	lsls	r3, r3, #16
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a20      	ldr	r2, [pc, #128]	; (80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d106      	bne.n	800567a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d121      	bne.n	80056c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	051b      	lsls	r3, r3, #20
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a0c      	ldr	r2, [pc, #48]	; (80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d106      	bne.n	80056c8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40012c00 	.word	0x40012c00

080056ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <LL_RCC_GetUSARTClockSource>:
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005734:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4013      	ands	r3, r2
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <LL_RCC_GetLPUARTClockSource>:
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005754:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4013      	ands	r3, r2
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e042      	b.n	8005800 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7fb fb19 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2224      	movs	r2, #36	; 0x24
 8005796:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f9c0 	bl	8005b30 <UART_SetConfig>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e022      	b.n	8005800 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fbc2 	bl	8005f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fc49 	bl	8006090 <UART_CheckIdleState>
 80057fe:	4603      	mov	r3, r0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005828:	69fa      	ldr	r2, [r7, #28]
 800582a:	f640 030f 	movw	r3, #2063	; 0x80f
 800582e:	4013      	ands	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d118      	bne.n	800586a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d013      	beq.n	800586a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8145 	beq.w	8005aea <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
      }
      return;
 8005868:	e13f      	b.n	8005aea <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80e8 	beq.w	8005a42 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4ba1      	ldr	r3, [pc, #644]	; (8005afc <HAL_UART_IRQHandler+0x2f4>)
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d105      	bne.n	8005888 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4ba0      	ldr	r3, [pc, #640]	; (8005b00 <HAL_UART_IRQHandler+0x2f8>)
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80dd 	beq.w	8005a42 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d010      	beq.n	80058b4 <HAL_UART_IRQHandler+0xac>
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f043 0201 	orr.w	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d010      	beq.n	80058e0 <HAL_UART_IRQHandler+0xd8>
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00b      	beq.n	80058e0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2202      	movs	r2, #2
 80058ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	f043 0204 	orr.w	r2, r3, #4
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d010      	beq.n	800590c <HAL_UART_IRQHandler+0x104>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00b      	beq.n	800590c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2204      	movs	r2, #4
 80058fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f043 0202 	orr.w	r2, r3, #2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 0308 	and.w	r3, r3, #8
 8005912:	2b00      	cmp	r3, #0
 8005914:	d015      	beq.n	8005942 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f003 0320 	and.w	r3, r3, #32
 800591c:	2b00      	cmp	r3, #0
 800591e:	d104      	bne.n	800592a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4b76      	ldr	r3, [pc, #472]	; (8005afc <HAL_UART_IRQHandler+0x2f4>)
 8005924:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2208      	movs	r2, #8
 8005930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f043 0208 	orr.w	r2, r3, #8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <HAL_UART_IRQHandler+0x168>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800595e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	f043 0220 	orr.w	r2, r3, #32
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 80b9 	beq.w	8005aee <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d011      	beq.n	80059aa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d004      	beq.n	80059ca <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d031      	beq.n	8005a2e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fc28 	bl	8006220 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d123      	bne.n	8005a26 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d013      	beq.n	8005a1e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fa:	4a42      	ldr	r2, [pc, #264]	; (8005b04 <HAL_UART_IRQHandler+0x2fc>)
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fb fd53 	bl	80014ae <HAL_DMA_Abort_IT>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d017      	beq.n	8005a3e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1c:	e00f      	b.n	8005a3e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f87c 	bl	8005b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a24:	e00b      	b.n	8005a3e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f878 	bl	8005b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	e007      	b.n	8005a3e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f874 	bl	8005b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005a3c:	e057      	b.n	8005aee <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3e:	bf00      	nop
    return;
 8005a40:	e055      	b.n	8005aee <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <HAL_UART_IRQHandler+0x260>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d008      	beq.n	8005a68 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fc30 	bl	80062c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a66:	e045      	b.n	8005af4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d012      	beq.n	8005a98 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d008      	beq.n	8005a98 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d031      	beq.n	8005af2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	4798      	blx	r3
    }
    return;
 8005a96:	e02c      	b.n	8005af2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x2ac>
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fbf0 	bl	8006292 <UART_EndTransmit_IT>
    return;
 8005ab2:	e01f      	b.n	8005af4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x2c8>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fc10 	bl	80062ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ace:	e011      	b.n	8005af4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <HAL_UART_IRQHandler+0x2ec>
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	da09      	bge.n	8005af4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fbfa 	bl	80062da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ae6:	bf00      	nop
 8005ae8:	e004      	b.n	8005af4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005aea:	bf00      	nop
 8005aec:	e002      	b.n	8005af4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005aee:	bf00      	nop
 8005af0:	e000      	b.n	8005af4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005af2:	bf00      	nop
  }
}
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	10000001 	.word	0x10000001
 8005b00:	04000120 	.word	0x04000120
 8005b04:	08006267 	.word	0x08006267

08005b08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b30:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005b34:	b088      	sub	sp, #32
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4ba4      	ldr	r3, [pc, #656]	; (8005df8 <UART_SetConfig+0x2c8>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	69f9      	ldr	r1, [r7, #28]
 8005b70:	430b      	orrs	r3, r1
 8005b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a99      	ldr	r2, [pc, #612]	; (8005dfc <UART_SetConfig+0x2cc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6812      	ldr	r2, [r2, #0]
 8005bb6:	69f9      	ldr	r1, [r7, #28]
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	f023 010f 	bic.w	r1, r3, #15
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a8a      	ldr	r2, [pc, #552]	; (8005e00 <UART_SetConfig+0x2d0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d121      	bne.n	8005c20 <UART_SetConfig+0xf0>
 8005bdc:	2003      	movs	r0, #3
 8005bde:	f7ff fda3 	bl	8005728 <LL_RCC_GetUSARTClockSource>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d817      	bhi.n	8005c18 <UART_SetConfig+0xe8>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0xc0>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c0d 	.word	0x08005c0d
 8005bf8:	08005c07 	.word	0x08005c07
 8005bfc:	08005c13 	.word	0x08005c13
 8005c00:	2301      	movs	r3, #1
 8005c02:	76fb      	strb	r3, [r7, #27]
 8005c04:	e038      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c06:	2302      	movs	r3, #2
 8005c08:	76fb      	strb	r3, [r7, #27]
 8005c0a:	e035      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	76fb      	strb	r3, [r7, #27]
 8005c10:	e032      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c12:	2308      	movs	r3, #8
 8005c14:	76fb      	strb	r3, [r7, #27]
 8005c16:	e02f      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	76fb      	strb	r3, [r7, #27]
 8005c1c:	bf00      	nop
 8005c1e:	e02b      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a75      	ldr	r2, [pc, #468]	; (8005dfc <UART_SetConfig+0x2cc>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d124      	bne.n	8005c74 <UART_SetConfig+0x144>
 8005c2a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005c2e:	f7ff fd8b 	bl	8005748 <LL_RCC_GetLPUARTClockSource>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c38:	d012      	beq.n	8005c60 <UART_SetConfig+0x130>
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3e:	d802      	bhi.n	8005c46 <UART_SetConfig+0x116>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <UART_SetConfig+0x124>
 8005c44:	e012      	b.n	8005c6c <UART_SetConfig+0x13c>
 8005c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4a:	d006      	beq.n	8005c5a <UART_SetConfig+0x12a>
 8005c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c50:	d009      	beq.n	8005c66 <UART_SetConfig+0x136>
 8005c52:	e00b      	b.n	8005c6c <UART_SetConfig+0x13c>
 8005c54:	2300      	movs	r3, #0
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e00e      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	76fb      	strb	r3, [r7, #27]
 8005c5e:	e00b      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c60:	2304      	movs	r3, #4
 8005c62:	76fb      	strb	r3, [r7, #27]
 8005c64:	e008      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c66:	2308      	movs	r3, #8
 8005c68:	76fb      	strb	r3, [r7, #27]
 8005c6a:	e005      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	76fb      	strb	r3, [r7, #27]
 8005c70:	bf00      	nop
 8005c72:	e001      	b.n	8005c78 <UART_SetConfig+0x148>
 8005c74:	2310      	movs	r3, #16
 8005c76:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a5f      	ldr	r2, [pc, #380]	; (8005dfc <UART_SetConfig+0x2cc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f040 808e 	bne.w	8005da0 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c84:	7efb      	ldrb	r3, [r7, #27]
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d823      	bhi.n	8005cd2 <UART_SetConfig+0x1a2>
 8005c8a:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <UART_SetConfig+0x160>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005cd3 	.word	0x08005cd3
 8005c98:	08005cbd 	.word	0x08005cbd
 8005c9c:	08005cd3 	.word	0x08005cd3
 8005ca0:	08005cc3 	.word	0x08005cc3
 8005ca4:	08005cd3 	.word	0x08005cd3
 8005ca8:	08005cd3 	.word	0x08005cd3
 8005cac:	08005cd3 	.word	0x08005cd3
 8005cb0:	08005ccb 	.word	0x08005ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cb4:	f7fe fb2e 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8005cb8:	6178      	str	r0, [r7, #20]
        break;
 8005cba:	e00f      	b.n	8005cdc <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cbc:	4b51      	ldr	r3, [pc, #324]	; (8005e04 <UART_SetConfig+0x2d4>)
 8005cbe:	617b      	str	r3, [r7, #20]
        break;
 8005cc0:	e00c      	b.n	8005cdc <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc2:	f7fe faa9 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 8005cc6:	6178      	str	r0, [r7, #20]
        break;
 8005cc8:	e008      	b.n	8005cdc <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cce:	617b      	str	r3, [r7, #20]
        break;
 8005cd0:	e004      	b.n	8005cdc <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	76bb      	strb	r3, [r7, #26]
        break;
 8005cda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 811c 	beq.w	8005f1c <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	4a47      	ldr	r2, [pc, #284]	; (8005e08 <UART_SetConfig+0x2d8>)
 8005cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	4413      	add	r3, r2
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d305      	bcc.n	8005d14 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d902      	bls.n	8005d1a <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	76bb      	strb	r3, [r7, #26]
 8005d18:	e100      	b.n	8005f1c <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f04f 0100 	mov.w	r1, #0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	4a38      	ldr	r2, [pc, #224]	; (8005e08 <UART_SetConfig+0x2d8>)
 8005d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f04f 0400 	mov.w	r4, #0
 8005d32:	461a      	mov	r2, r3
 8005d34:	4623      	mov	r3, r4
 8005d36:	f7fa fa29 	bl	800018c <__aeabi_uldivmod>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4622      	mov	r2, r4
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	f04f 0400 	mov.w	r4, #0
 8005d4a:	0214      	lsls	r4, r2, #8
 8005d4c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005d50:	020b      	lsls	r3, r1, #8
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	6852      	ldr	r2, [r2, #4]
 8005d56:	0852      	lsrs	r2, r2, #1
 8005d58:	4611      	mov	r1, r2
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	eb13 0b01 	adds.w	fp, r3, r1
 8005d62:	eb44 0c02 	adc.w	ip, r4, r2
 8005d66:	4658      	mov	r0, fp
 8005d68:	4661      	mov	r1, ip
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f04f 0400 	mov.w	r4, #0
 8005d72:	461a      	mov	r2, r3
 8005d74:	4623      	mov	r3, r4
 8005d76:	f7fa fa09 	bl	800018c <__aeabi_uldivmod>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d86:	d308      	bcc.n	8005d9a <UART_SetConfig+0x26a>
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8e:	d204      	bcs.n	8005d9a <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	60da      	str	r2, [r3, #12]
 8005d98:	e0c0      	b.n	8005f1c <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	76bb      	strb	r3, [r7, #26]
 8005d9e:	e0bd      	b.n	8005f1c <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da8:	d169      	bne.n	8005e7e <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005daa:	7efb      	ldrb	r3, [r7, #27]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	2b07      	cmp	r3, #7
 8005db0:	d82c      	bhi.n	8005e0c <UART_SetConfig+0x2dc>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x288>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005dd9 	.word	0x08005dd9
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005e0d 	.word	0x08005e0d
 8005dc4:	08005de7 	.word	0x08005de7
 8005dc8:	08005e0d 	.word	0x08005e0d
 8005dcc:	08005e0d 	.word	0x08005e0d
 8005dd0:	08005e0d 	.word	0x08005e0d
 8005dd4:	08005def 	.word	0x08005def
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dd8:	f7fe fab2 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005ddc:	6178      	str	r0, [r7, #20]
        break;
 8005dde:	e01a      	b.n	8005e16 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de0:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <UART_SetConfig+0x2d4>)
 8005de2:	617b      	str	r3, [r7, #20]
        break;
 8005de4:	e017      	b.n	8005e16 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005de6:	f7fe fa17 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 8005dea:	6178      	str	r0, [r7, #20]
        break;
 8005dec:	e013      	b.n	8005e16 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df2:	617b      	str	r3, [r7, #20]
        break;
 8005df4:	e00f      	b.n	8005e16 <UART_SetConfig+0x2e6>
 8005df6:	bf00      	nop
 8005df8:	cfff69f3 	.word	0xcfff69f3
 8005dfc:	40008000 	.word	0x40008000
 8005e00:	40013800 	.word	0x40013800
 8005e04:	00f42400 	.word	0x00f42400
 8005e08:	08006938 	.word	0x08006938
      default:
        pclk = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	76bb      	strb	r3, [r7, #26]
        break;
 8005e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d07f      	beq.n	8005f1c <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	4a48      	ldr	r2, [pc, #288]	; (8005f44 <UART_SetConfig+0x414>)
 8005e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e26:	461a      	mov	r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e2e:	005a      	lsls	r2, r3, #1
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	441a      	add	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d916      	bls.n	8005e78 <UART_SetConfig+0x348>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e50:	d212      	bcs.n	8005e78 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f023 030f 	bic.w	r3, r3, #15
 8005e5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	89fb      	ldrh	r3, [r7, #14]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	89fa      	ldrh	r2, [r7, #14]
 8005e74:	60da      	str	r2, [r3, #12]
 8005e76:	e051      	b.n	8005f1c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	76bb      	strb	r3, [r7, #26]
 8005e7c:	e04e      	b.n	8005f1c <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e7e:	7efb      	ldrb	r3, [r7, #27]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	2b07      	cmp	r3, #7
 8005e84:	d821      	bhi.n	8005eca <UART_SetConfig+0x39a>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <UART_SetConfig+0x35c>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005ead 	.word	0x08005ead
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ecb 	.word	0x08005ecb
 8005e98:	08005ebb 	.word	0x08005ebb
 8005e9c:	08005ecb 	.word	0x08005ecb
 8005ea0:	08005ecb 	.word	0x08005ecb
 8005ea4:	08005ecb 	.word	0x08005ecb
 8005ea8:	08005ec3 	.word	0x08005ec3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eac:	f7fe fa48 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005eb0:	6178      	str	r0, [r7, #20]
        break;
 8005eb2:	e00f      	b.n	8005ed4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb4:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <UART_SetConfig+0x418>)
 8005eb6:	617b      	str	r3, [r7, #20]
        break;
 8005eb8:	e00c      	b.n	8005ed4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eba:	f7fe f9ad 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 8005ebe:	6178      	str	r0, [r7, #20]
        break;
 8005ec0:	e008      	b.n	8005ed4 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec6:	617b      	str	r3, [r7, #20]
        break;
 8005ec8:	e004      	b.n	8005ed4 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	76bb      	strb	r3, [r7, #26]
        break;
 8005ed2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	4a19      	ldr	r2, [pc, #100]	; (8005f44 <UART_SetConfig+0x414>)
 8005ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	085b      	lsrs	r3, r3, #1
 8005ef2:	441a      	add	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b0f      	cmp	r3, #15
 8005f04:	d908      	bls.n	8005f18 <UART_SetConfig+0x3e8>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0c:	d204      	bcs.n	8005f18 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	e001      	b.n	8005f1c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005f38:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005f44:	08006938 	.word	0x08006938
 8005f48:	00f42400 	.word	0x00f42400

08005f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01a      	beq.n	8006062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604a:	d10a      	bne.n	8006062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  }
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af02      	add	r7, sp, #8
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060a0:	f7fb f8ae 	bl	8001200 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d10e      	bne.n	80060d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f82c 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e022      	b.n	8006118 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d10e      	bne.n	80060fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f816 	bl	8006120 <UART_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e00c      	b.n	8006118 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006130:	e062      	b.n	80061f8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006138:	d05e      	beq.n	80061f8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613a:	f7fb f861 	bl	8001200 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <UART_WaitOnFlagUntilTimeout+0x30>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d11d      	bne.n	800618c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800615e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e045      	b.n	8006218 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	d02e      	beq.n	80061f8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a8:	d126      	bne.n	80061f8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e00f      	b.n	8006218 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4013      	ands	r3, r2
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	429a      	cmp	r2, r3
 8006214:	d08d      	beq.n	8006132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006236:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fc49 	bl	8005b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff fc25 	bl	8005b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_UARTEx_DisableFifoMode+0x16>
 8006314:	2302      	movs	r3, #2
 8006316:	e027      	b.n	8006368 <HAL_UARTEx_DisableFifoMode+0x66>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2224      	movs	r2, #36	; 0x24
 8006324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006346:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006388:	2302      	movs	r3, #2
 800638a:	e02d      	b.n	80063e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2224      	movs	r2, #36	; 0x24
 8006398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f84f 	bl	800646c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006404:	2302      	movs	r3, #2
 8006406:	e02d      	b.n	8006464 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2224      	movs	r2, #36	; 0x24
 8006414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0201 	bic.w	r2, r2, #1
 800642e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f811 	bl	800646c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b089      	sub	sp, #36	; 0x24
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006474:	4a2f      	ldr	r2, [pc, #188]	; (8006534 <UARTEx_SetNbDataToProcess+0xc8>)
 8006476:	f107 0314 	add.w	r3, r7, #20
 800647a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800647e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006482:	4a2d      	ldr	r2, [pc, #180]	; (8006538 <UARTEx_SetNbDataToProcess+0xcc>)
 8006484:	f107 030c 	add.w	r3, r7, #12
 8006488:	e892 0003 	ldmia.w	r2, {r0, r1}
 800648c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006494:	2b00      	cmp	r3, #0
 8006496:	d108      	bne.n	80064aa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064a8:	e03d      	b.n	8006526 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064aa:	2308      	movs	r3, #8
 80064ac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ae:	2308      	movs	r3, #8
 80064b0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	0e5b      	lsrs	r3, r3, #25
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	0f5b      	lsrs	r3, r3, #29
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80064d2:	7fbb      	ldrb	r3, [r7, #30]
 80064d4:	7f3a      	ldrb	r2, [r7, #28]
 80064d6:	f107 0120 	add.w	r1, r7, #32
 80064da:	440a      	add	r2, r1
 80064dc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	7f3a      	ldrb	r2, [r7, #28]
 80064e6:	f107 0120 	add.w	r1, r7, #32
 80064ea:	440a      	add	r2, r1
 80064ec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80064f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80064fc:	7ffb      	ldrb	r3, [r7, #31]
 80064fe:	7f7a      	ldrb	r2, [r7, #29]
 8006500:	f107 0120 	add.w	r1, r7, #32
 8006504:	440a      	add	r2, r1
 8006506:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800650a:	fb02 f303 	mul.w	r3, r2, r3
 800650e:	7f7a      	ldrb	r2, [r7, #29]
 8006510:	f107 0120 	add.w	r1, r7, #32
 8006514:	440a      	add	r2, r1
 8006516:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800651a:	fb93 f3f2 	sdiv	r3, r3, r2
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006526:	bf00      	nop
 8006528:	3724      	adds	r7, #36	; 0x24
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	08006878 	.word	0x08006878
 8006538:	08006880 	.word	0x08006880

0800653c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006544:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006548:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	b29b      	uxth	r3, r3
 8006556:	4313      	orrs	r3, r2
 8006558:	b29a      	uxth	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006576:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800657a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	b29b      	uxth	r3, r3
 8006588:	43db      	mvns	r3, r3
 800658a:	b29b      	uxth	r3, r3
 800658c:	4013      	ands	r3, r2
 800658e:	b29a      	uxth	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065a4:	b084      	sub	sp, #16
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b082      	sub	sp, #8
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	f107 0014 	add.w	r0, r7, #20
 80065b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff ffb0 	bl	800653c <USB_EnableGlobalInt>

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065e8:	b004      	add	sp, #16
 80065ea:	4770      	bx	lr

080065ec <atoi>:
 80065ec:	220a      	movs	r2, #10
 80065ee:	2100      	movs	r1, #0
 80065f0:	f000 b8c2 	b.w	8006778 <strtol>

080065f4 <__libc_init_array>:
 80065f4:	b570      	push	{r4, r5, r6, lr}
 80065f6:	4e0d      	ldr	r6, [pc, #52]	; (800662c <__libc_init_array+0x38>)
 80065f8:	4c0d      	ldr	r4, [pc, #52]	; (8006630 <__libc_init_array+0x3c>)
 80065fa:	1ba4      	subs	r4, r4, r6
 80065fc:	10a4      	asrs	r4, r4, #2
 80065fe:	2500      	movs	r5, #0
 8006600:	42a5      	cmp	r5, r4
 8006602:	d109      	bne.n	8006618 <__libc_init_array+0x24>
 8006604:	4e0b      	ldr	r6, [pc, #44]	; (8006634 <__libc_init_array+0x40>)
 8006606:	4c0c      	ldr	r4, [pc, #48]	; (8006638 <__libc_init_array+0x44>)
 8006608:	f000 f8ee 	bl	80067e8 <_init>
 800660c:	1ba4      	subs	r4, r4, r6
 800660e:	10a4      	asrs	r4, r4, #2
 8006610:	2500      	movs	r5, #0
 8006612:	42a5      	cmp	r5, r4
 8006614:	d105      	bne.n	8006622 <__libc_init_array+0x2e>
 8006616:	bd70      	pop	{r4, r5, r6, pc}
 8006618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800661c:	4798      	blx	r3
 800661e:	3501      	adds	r5, #1
 8006620:	e7ee      	b.n	8006600 <__libc_init_array+0xc>
 8006622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006626:	4798      	blx	r3
 8006628:	3501      	adds	r5, #1
 800662a:	e7f2      	b.n	8006612 <__libc_init_array+0x1e>
 800662c:	08006a64 	.word	0x08006a64
 8006630:	08006a64 	.word	0x08006a64
 8006634:	08006a64 	.word	0x08006a64
 8006638:	08006a68 	.word	0x08006a68

0800663c <memset>:
 800663c:	4402      	add	r2, r0
 800663e:	4603      	mov	r3, r0
 8006640:	4293      	cmp	r3, r2
 8006642:	d100      	bne.n	8006646 <memset+0xa>
 8006644:	4770      	bx	lr
 8006646:	f803 1b01 	strb.w	r1, [r3], #1
 800664a:	e7f9      	b.n	8006640 <memset+0x4>

0800664c <strstr>:
 800664c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800664e:	7803      	ldrb	r3, [r0, #0]
 8006650:	b17b      	cbz	r3, 8006672 <strstr+0x26>
 8006652:	4604      	mov	r4, r0
 8006654:	7823      	ldrb	r3, [r4, #0]
 8006656:	4620      	mov	r0, r4
 8006658:	1c66      	adds	r6, r4, #1
 800665a:	b17b      	cbz	r3, 800667c <strstr+0x30>
 800665c:	1e4a      	subs	r2, r1, #1
 800665e:	1e63      	subs	r3, r4, #1
 8006660:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006664:	b14d      	cbz	r5, 800667a <strstr+0x2e>
 8006666:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800666a:	42af      	cmp	r7, r5
 800666c:	4634      	mov	r4, r6
 800666e:	d0f7      	beq.n	8006660 <strstr+0x14>
 8006670:	e7f0      	b.n	8006654 <strstr+0x8>
 8006672:	780b      	ldrb	r3, [r1, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf18      	it	ne
 8006678:	2000      	movne	r0, #0
 800667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667c:	4618      	mov	r0, r3
 800667e:	e7fc      	b.n	800667a <strstr+0x2e>

08006680 <_strtol_l.isra.0>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	4680      	mov	r8, r0
 8006686:	4689      	mov	r9, r1
 8006688:	4692      	mov	sl, r2
 800668a:	461e      	mov	r6, r3
 800668c:	460f      	mov	r7, r1
 800668e:	463d      	mov	r5, r7
 8006690:	9808      	ldr	r0, [sp, #32]
 8006692:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006696:	f000 f885 	bl	80067a4 <__locale_ctype_ptr_l>
 800669a:	4420      	add	r0, r4
 800669c:	7843      	ldrb	r3, [r0, #1]
 800669e:	f013 0308 	ands.w	r3, r3, #8
 80066a2:	d132      	bne.n	800670a <_strtol_l.isra.0+0x8a>
 80066a4:	2c2d      	cmp	r4, #45	; 0x2d
 80066a6:	d132      	bne.n	800670e <_strtol_l.isra.0+0x8e>
 80066a8:	787c      	ldrb	r4, [r7, #1]
 80066aa:	1cbd      	adds	r5, r7, #2
 80066ac:	2201      	movs	r2, #1
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d05d      	beq.n	800676e <_strtol_l.isra.0+0xee>
 80066b2:	2e10      	cmp	r6, #16
 80066b4:	d109      	bne.n	80066ca <_strtol_l.isra.0+0x4a>
 80066b6:	2c30      	cmp	r4, #48	; 0x30
 80066b8:	d107      	bne.n	80066ca <_strtol_l.isra.0+0x4a>
 80066ba:	782b      	ldrb	r3, [r5, #0]
 80066bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80066c0:	2b58      	cmp	r3, #88	; 0x58
 80066c2:	d14f      	bne.n	8006764 <_strtol_l.isra.0+0xe4>
 80066c4:	786c      	ldrb	r4, [r5, #1]
 80066c6:	2610      	movs	r6, #16
 80066c8:	3502      	adds	r5, #2
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	bf14      	ite	ne
 80066ce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80066d2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80066d6:	2700      	movs	r7, #0
 80066d8:	fbb1 fcf6 	udiv	ip, r1, r6
 80066dc:	4638      	mov	r0, r7
 80066de:	fb06 1e1c 	mls	lr, r6, ip, r1
 80066e2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80066e6:	2b09      	cmp	r3, #9
 80066e8:	d817      	bhi.n	800671a <_strtol_l.isra.0+0x9a>
 80066ea:	461c      	mov	r4, r3
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	dd23      	ble.n	8006738 <_strtol_l.isra.0+0xb8>
 80066f0:	1c7b      	adds	r3, r7, #1
 80066f2:	d007      	beq.n	8006704 <_strtol_l.isra.0+0x84>
 80066f4:	4584      	cmp	ip, r0
 80066f6:	d31c      	bcc.n	8006732 <_strtol_l.isra.0+0xb2>
 80066f8:	d101      	bne.n	80066fe <_strtol_l.isra.0+0x7e>
 80066fa:	45a6      	cmp	lr, r4
 80066fc:	db19      	blt.n	8006732 <_strtol_l.isra.0+0xb2>
 80066fe:	fb00 4006 	mla	r0, r0, r6, r4
 8006702:	2701      	movs	r7, #1
 8006704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006708:	e7eb      	b.n	80066e2 <_strtol_l.isra.0+0x62>
 800670a:	462f      	mov	r7, r5
 800670c:	e7bf      	b.n	800668e <_strtol_l.isra.0+0xe>
 800670e:	2c2b      	cmp	r4, #43	; 0x2b
 8006710:	bf04      	itt	eq
 8006712:	1cbd      	addeq	r5, r7, #2
 8006714:	787c      	ldrbeq	r4, [r7, #1]
 8006716:	461a      	mov	r2, r3
 8006718:	e7c9      	b.n	80066ae <_strtol_l.isra.0+0x2e>
 800671a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800671e:	2b19      	cmp	r3, #25
 8006720:	d801      	bhi.n	8006726 <_strtol_l.isra.0+0xa6>
 8006722:	3c37      	subs	r4, #55	; 0x37
 8006724:	e7e2      	b.n	80066ec <_strtol_l.isra.0+0x6c>
 8006726:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800672a:	2b19      	cmp	r3, #25
 800672c:	d804      	bhi.n	8006738 <_strtol_l.isra.0+0xb8>
 800672e:	3c57      	subs	r4, #87	; 0x57
 8006730:	e7dc      	b.n	80066ec <_strtol_l.isra.0+0x6c>
 8006732:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006736:	e7e5      	b.n	8006704 <_strtol_l.isra.0+0x84>
 8006738:	1c7b      	adds	r3, r7, #1
 800673a:	d108      	bne.n	800674e <_strtol_l.isra.0+0xce>
 800673c:	2322      	movs	r3, #34	; 0x22
 800673e:	f8c8 3000 	str.w	r3, [r8]
 8006742:	4608      	mov	r0, r1
 8006744:	f1ba 0f00 	cmp.w	sl, #0
 8006748:	d107      	bne.n	800675a <_strtol_l.isra.0+0xda>
 800674a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674e:	b102      	cbz	r2, 8006752 <_strtol_l.isra.0+0xd2>
 8006750:	4240      	negs	r0, r0
 8006752:	f1ba 0f00 	cmp.w	sl, #0
 8006756:	d0f8      	beq.n	800674a <_strtol_l.isra.0+0xca>
 8006758:	b10f      	cbz	r7, 800675e <_strtol_l.isra.0+0xde>
 800675a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800675e:	f8ca 9000 	str.w	r9, [sl]
 8006762:	e7f2      	b.n	800674a <_strtol_l.isra.0+0xca>
 8006764:	2430      	movs	r4, #48	; 0x30
 8006766:	2e00      	cmp	r6, #0
 8006768:	d1af      	bne.n	80066ca <_strtol_l.isra.0+0x4a>
 800676a:	2608      	movs	r6, #8
 800676c:	e7ad      	b.n	80066ca <_strtol_l.isra.0+0x4a>
 800676e:	2c30      	cmp	r4, #48	; 0x30
 8006770:	d0a3      	beq.n	80066ba <_strtol_l.isra.0+0x3a>
 8006772:	260a      	movs	r6, #10
 8006774:	e7a9      	b.n	80066ca <_strtol_l.isra.0+0x4a>
	...

08006778 <strtol>:
 8006778:	4b08      	ldr	r3, [pc, #32]	; (800679c <strtol+0x24>)
 800677a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800677c:	681c      	ldr	r4, [r3, #0]
 800677e:	4d08      	ldr	r5, [pc, #32]	; (80067a0 <strtol+0x28>)
 8006780:	6a23      	ldr	r3, [r4, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	bf08      	it	eq
 8006786:	462b      	moveq	r3, r5
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4613      	mov	r3, r2
 800678c:	460a      	mov	r2, r1
 800678e:	4601      	mov	r1, r0
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ff75 	bl	8006680 <_strtol_l.isra.0>
 8006796:	b003      	add	sp, #12
 8006798:	bd30      	pop	{r4, r5, pc}
 800679a:	bf00      	nop
 800679c:	20000014 	.word	0x20000014
 80067a0:	20000078 	.word	0x20000078

080067a4 <__locale_ctype_ptr_l>:
 80067a4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80067a8:	4770      	bx	lr

080067aa <__ascii_mbtowc>:
 80067aa:	b082      	sub	sp, #8
 80067ac:	b901      	cbnz	r1, 80067b0 <__ascii_mbtowc+0x6>
 80067ae:	a901      	add	r1, sp, #4
 80067b0:	b142      	cbz	r2, 80067c4 <__ascii_mbtowc+0x1a>
 80067b2:	b14b      	cbz	r3, 80067c8 <__ascii_mbtowc+0x1e>
 80067b4:	7813      	ldrb	r3, [r2, #0]
 80067b6:	600b      	str	r3, [r1, #0]
 80067b8:	7812      	ldrb	r2, [r2, #0]
 80067ba:	1c10      	adds	r0, r2, #0
 80067bc:	bf18      	it	ne
 80067be:	2001      	movne	r0, #1
 80067c0:	b002      	add	sp, #8
 80067c2:	4770      	bx	lr
 80067c4:	4610      	mov	r0, r2
 80067c6:	e7fb      	b.n	80067c0 <__ascii_mbtowc+0x16>
 80067c8:	f06f 0001 	mvn.w	r0, #1
 80067cc:	e7f8      	b.n	80067c0 <__ascii_mbtowc+0x16>

080067ce <__ascii_wctomb>:
 80067ce:	b149      	cbz	r1, 80067e4 <__ascii_wctomb+0x16>
 80067d0:	2aff      	cmp	r2, #255	; 0xff
 80067d2:	bf85      	ittet	hi
 80067d4:	238a      	movhi	r3, #138	; 0x8a
 80067d6:	6003      	strhi	r3, [r0, #0]
 80067d8:	700a      	strbls	r2, [r1, #0]
 80067da:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80067de:	bf98      	it	ls
 80067e0:	2001      	movls	r0, #1
 80067e2:	4770      	bx	lr
 80067e4:	4608      	mov	r0, r1
 80067e6:	4770      	bx	lr

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
